{
	"info": {
		"_postman_id": "2d18cf21-2921-4625-965b-32cddcb1d496",
		"name": "Docker Engine API",
		"description": "The Engine API is an HTTP API served by Docker Engine. It is the API the\nDocker client uses to communicate with the Engine, so everything the Docker\nclient can do can be done with the API.\n\nMost of the client's commands map directly to API endpoints (e.g. `docker ps`\nis `GET /containers/json`). The notable exception is running containers,\nwhich consists of several API calls.\n\n# Errors\n\nThe API uses standard HTTP status codes to indicate the success or failure\nof the API call. The body of the response will be JSON in the following\nformat:\n\n```\n{\n  \"message\": \"page not found\"\n}\n```\n\n# Versioning\n\nThe API is usually changed in each release, so API calls are versioned to\nensure that clients don't break. To lock to a specific version of the API,\nyou prefix the URL with its version, for example, call `/v1.30/info` to use\nthe v1.30 version of the `/info` endpoint. If the API version specified in\nthe URL is not supported by the daemon, a HTTP `400 Bad Request` error message\nis returned.\n\nIf you omit the version-prefix, the current version of the API (v1.41) is used.\nFor example, calling `/info` is the same as calling `/v1.41/info`. Using the\nAPI without a version-prefix is deprecated and will be removed in a future release.\n\nEngine releases in the near future should support this version of the API,\nso your client will continue to work even if it is talking to a newer Engine.\n\nThe API uses an open schema model, which means server may add extra properties\nto responses. Likewise, the server will ignore any extra query parameters and\nrequest body properties. When you write clients, you need to ignore additional\nproperties in responses to ensure they do not break when talking to newer\ndaemons.\n\n\n# Authentication\n\nAuthentication for registries is handled client side. The client has to send\nauthentication details to various endpoints that need to communicate with\nregistries, such as `POST /images/(name)/push`. These are sent as\n`X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5)\n(JSON) string with the following structure:\n\n```\n{\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"email\": \"string\",\n  \"serveraddress\": \"string\"\n}\n```\n\nThe `serveraddress` is a domain/IP without a protocol. Throughout this\nstructure, double quotes are required.\n\nIf you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth),\nyou can just pass this instead of credentials:\n\n```\n{\n  \"identitytoken\": \"9cbaf023786cd7...\"\n}\n```\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "containers",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "attach",
							"item": [
								{
									"name": "Attach to a container",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.docker.raw-stream"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/attach?detachKeys=anim incididunt&logs=false&stream=false&stdin=false&stdout=false&stderr=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"attach"
											],
											"query": [
												{
													"key": "detachKeys",
													"value": "anim incididunt",
													"description": "Override the key sequence for detaching a container.Format is a single\ncharacter `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`,\n`@`, `^`, `[`, `,` or `_`.\n"
												},
												{
													"key": "logs",
													"value": "false",
													"description": "Replay previous logs from the container.\n\nThis is useful for attaching to a container that has started and you\nwant to output everything since the container started.\n\nIf `stream` is also enabled, once all the previous output has been\nreturned, it will seamlessly transition into streaming current\noutput.\n"
												},
												{
													"key": "stream",
													"value": "false",
													"description": "Stream attached streams from the time the request was made onwards.\n"
												},
												{
													"key": "stdin",
													"value": "false",
													"description": "Attach to `stdin`"
												},
												{
													"key": "stdout",
													"value": "false",
													"description": "Attach to `stdout`"
												},
												{
													"key": "stderr",
													"value": "false",
													"description": "Attach to `stderr`"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										},
										"description": "Attach to a container to read its output or send it input. You can attach\nto the same container multiple times and you can reattach to containers\nthat have been detached.\n\nEither the `stream` or `logs` parameter must be `true` for this endpoint\nto do anything.\n\nSee the [documentation for the `docker attach` command](/engine/reference/commandline/attach/)\nfor more details.\n\n### Hijacking\n\nThis endpoint hijacks the HTTP connection to transport `stdin`, `stdout`,\nand `stderr` on the same socket.\n\nThis is the response from the daemon for an attach request:\n\n```\nHTTP/1.1 200 OK\nContent-Type: application/vnd.docker.raw-stream\n\n[STREAM]\n```\n\nAfter the headers and two new lines, the TCP connection can now be used\nfor raw, bidirectional communication between the client and server.\n\nTo hint potential proxies about connection hijacking, the Docker client\ncan also optionally send connection upgrade headers.\n\nFor example, the client sends this request to upgrade the connection:\n\n```\nPOST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1\nUpgrade: tcp\nConnection: Upgrade\n```\n\nThe Docker daemon will respond with a `101 UPGRADED` response, and will\nsimilarly follow with the raw stream:\n\n```\nHTTP/1.1 101 UPGRADED\nContent-Type: application/vnd.docker.raw-stream\nConnection: Upgrade\nUpgrade: tcp\n\n[STREAM]\n```\n\n### Stream format\n\nWhen the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate),\nthe stream over the hijacked connected is multiplexed to separate out\n`stdout` and `stderr`. The stream consists of a series of frames, each\ncontaining a header and a payload.\n\nThe header contains the information which the stream writes (`stdout` or\n`stderr`). It also contains the size of the associated frame encoded in\nthe last four bytes (`uint32`).\n\nIt is encoded on the first eight bytes like this:\n\n```go\nheader := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}\n```\n\n`STREAM_TYPE` can be:\n\n- 0: `stdin` (is written on `stdout`)\n- 1: `stdout`\n- 2: `stderr`\n\n`SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size\nencoded as big endian.\n\nFollowing the header is the payload, which is the specified number of\nbytes of `STREAM_TYPE`.\n\nThe simplest way to implement this protocol is the following:\n\n1. Read 8 bytes.\n2. Choose `stdout` or `stderr` depending on the first byte.\n3. Extract the frame size from the last four bytes.\n4. Read the extracted size and output it on the correct output.\n5. Goto 1.\n\n### Stream format when using a TTY\n\nWhen the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate),\nthe stream is not multiplexed. The data exchanged over the hijacked\nconnection is simply the raw data from the process PTY and client's\n`stdin`.\n"
									},
									"response": [
										{
											"name": "no error, hints proxy about hijacking",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/containers/:id/attach?detachKeys=anim incididunt&logs=false&stream=false&stdin=false&stdout=false&stderr=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"attach"
													],
													"query": [
														{
															"key": "detachKeys",
															"value": "anim incididunt"
														},
														{
															"key": "logs",
															"value": "false"
														},
														{
															"key": "stream",
															"value": "false"
														},
														{
															"key": "stdin",
															"value": "false"
														},
														{
															"key": "stdout",
															"value": "false"
														},
														{
															"key": "stderr",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "Switching Protocols",
											"code": 101,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "no error, no upgrade header found",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/containers/:id/attach?detachKeys=anim incididunt&logs=false&stream=false&stdin=false&stdout=false&stderr=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"attach"
													],
													"query": [
														{
															"key": "detachKeys",
															"value": "anim incididunt"
														},
														{
															"key": "logs",
															"value": "false"
														},
														{
															"key": "stream",
															"value": "false"
														},
														{
															"key": "stdin",
															"value": "false"
														},
														{
															"key": "stdout",
															"value": "false"
														},
														{
															"key": "stderr",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "bad parameter",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/containers/:id/attach?detachKeys=anim incididunt&logs=false&stream=false&stdin=false&stdout=false&stderr=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"attach"
													],
													"query": [
														{
															"key": "detachKeys",
															"value": "anim incididunt"
														},
														{
															"key": "logs",
															"value": "false"
														},
														{
															"key": "stream",
															"value": "false"
														},
														{
															"key": "stdin",
															"value": "false"
														},
														{
															"key": "stdout",
															"value": "false"
														},
														{
															"key": "stderr",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/vnd.docker.raw-stream"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "no such container",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/containers/:id/attach?detachKeys=anim incididunt&logs=false&stream=false&stdin=false&stdout=false&stderr=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"attach"
													],
													"query": [
														{
															"key": "detachKeys",
															"value": "anim incididunt"
														},
														{
															"key": "logs",
															"value": "false"
														},
														{
															"key": "stream",
															"value": "false"
														},
														{
															"key": "stdin",
															"value": "false"
														},
														{
															"key": "stdout",
															"value": "false"
														},
														{
															"key": "stderr",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
										},
										{
											"name": "server error",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/containers/:id/attach?detachKeys=anim incididunt&logs=false&stream=false&stdin=false&stdout=false&stderr=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"attach"
													],
													"query": [
														{
															"key": "detachKeys",
															"value": "anim incididunt"
														},
														{
															"key": "logs",
															"value": "false"
														},
														{
															"key": "stream",
															"value": "false"
														},
														{
															"key": "stdin",
															"value": "false"
														},
														{
															"key": "stdout",
															"value": "false"
														},
														{
															"key": "stderr",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/vnd.docker.raw-stream"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Attach to a container via a websocket",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/attach/ws?detachKeys=anim incididunt&logs=false&stream=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"attach",
												"ws"
											],
											"query": [
												{
													"key": "detachKeys",
													"value": "anim incididunt",
													"description": "Override the key sequence for detaching a container.Format is a single\ncharacter `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`,\n`@`, `^`, `[`, `,`, or `_`.\n"
												},
												{
													"key": "logs",
													"value": "false",
													"description": "Return logs"
												},
												{
													"key": "stream",
													"value": "false",
													"description": "Return stream"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"response": [
										{
											"name": "no error, hints proxy about hijacking",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/containers/:id/attach/ws?detachKeys=anim incididunt&logs=false&stream=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"attach",
														"ws"
													],
													"query": [
														{
															"key": "detachKeys",
															"value": "anim incididunt"
														},
														{
															"key": "logs",
															"value": "false"
														},
														{
															"key": "stream",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "Switching Protocols",
											"code": 101,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "no error, no upgrade header found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/containers/:id/attach/ws?detachKeys=anim incididunt&logs=false&stream=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"attach",
														"ws"
													],
													"query": [
														{
															"key": "detachKeys",
															"value": "anim incididunt"
														},
														{
															"key": "logs",
															"value": "false"
														},
														{
															"key": "stream",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "bad parameter",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/containers/:id/attach/ws?detachKeys=anim incididunt&logs=false&stream=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"attach",
														"ws"
													],
													"query": [
														{
															"key": "detachKeys",
															"value": "anim incididunt"
														},
														{
															"key": "logs",
															"value": "false"
														},
														{
															"key": "stream",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Something went wrong.\"\n}"
										},
										{
											"name": "no such container",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/containers/:id/attach/ws?detachKeys=anim incididunt&logs=false&stream=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"attach",
														"ws"
													],
													"query": [
														{
															"key": "detachKeys",
															"value": "anim incididunt"
														},
														{
															"key": "logs",
															"value": "false"
														},
														{
															"key": "stream",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
										},
										{
											"name": "server error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/containers/:id/attach/ws?detachKeys=anim incididunt&logs=false&stream=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"attach",
														"ws"
													],
													"query": [
														{
															"key": "detachKeys",
															"value": "anim incididunt"
														},
														{
															"key": "logs",
															"value": "false"
														},
														{
															"key": "stream",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Something went wrong.\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "archive",
							"item": [
								{
									"name": "Get information about files in a container",
									"request": {
										"method": "HEAD",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/archive?path=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"archive"
											],
											"query": [
												{
													"key": "path",
													"value": "anim incididunt",
													"description": "(Required) Resource in the container’s filesystem to archive."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										},
										"description": "A response header `X-Docker-Container-Path-Stat` is returned, containing\na base64 - encoded JSON object with some filesystem header information\nabout the path.\n"
									},
									"response": [
										{
											"name": "no error",
											"originalRequest": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/containers/:id/archive?path=anim incididunt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"archive"
													],
													"query": [
														{
															"key": "path",
															"value": "anim incididunt"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "X-Docker-Container-Path-Stat",
													"value": "anim incididunt",
													"description": "A base64 - encoded JSON object with some filesystem header\ninformation about the path\n"
												},
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad parameter",
											"originalRequest": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/containers/:id/archive?path=anim incididunt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"archive"
													],
													"query": [
														{
															"key": "path",
															"value": "anim incididunt"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Something went wrong.\"\n}"
										},
										{
											"name": "Container or path does not exist",
											"originalRequest": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/containers/:id/archive?path=anim incididunt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"archive"
													],
													"query": [
														{
															"key": "path",
															"value": "anim incididunt"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
										},
										{
											"name": "Server error",
											"originalRequest": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/containers/:id/archive?path=anim incididunt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"archive"
													],
													"query": [
														{
															"key": "path",
															"value": "anim incididunt"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Something went wrong.\"\n}"
										}
									]
								},
								{
									"name": "Get an archive of a filesystem resource in a container",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/x-tar"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/archive?path=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"archive"
											],
											"query": [
												{
													"key": "path",
													"value": "anim incididunt",
													"description": "(Required) Resource in the container’s filesystem to archive."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										},
										"description": "Get a tar archive of a resource in the filesystem of container id."
									},
									"response": [
										{
											"name": "no error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/containers/:id/archive?path=anim incididunt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"archive"
													],
													"query": [
														{
															"key": "path",
															"value": "anim incididunt"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad parameter",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/containers/:id/archive?path=anim incididunt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"archive"
													],
													"query": [
														{
															"key": "path",
															"value": "anim incididunt"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/x-tar"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Container or path does not exist",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/containers/:id/archive?path=anim incididunt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"archive"
													],
													"query": [
														{
															"key": "path",
															"value": "anim incididunt"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
										},
										{
											"name": "server error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/containers/:id/archive?path=anim incididunt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"archive"
													],
													"query": [
														{
															"key": "path",
															"value": "anim incididunt"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/x-tar"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Extract an archive of files or folders to a directory in a container",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-tar"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "file",
											"file": {}
										},
										"url": {
											"raw": "{{baseUrl}}/containers/:id/archive?path=anim incididunt&noOverwriteDirNonDir=anim incididunt&copyUIDGID=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"archive"
											],
											"query": [
												{
													"key": "path",
													"value": "anim incididunt",
													"description": "(Required) Path to a directory in the container to extract the archive’s contents into. "
												},
												{
													"key": "noOverwriteDirNonDir",
													"value": "anim incididunt",
													"description": "If `1`, `true`, or `True` then it will be an error if unpacking the\ngiven content would cause an existing directory to be replaced with\na non-directory and vice versa.\n"
												},
												{
													"key": "copyUIDGID",
													"value": "anim incididunt",
													"description": "If `1`, `true`, then it will copy UID/GID maps to the dest file or\ndir\n"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										},
										"description": "Upload a tar archive to be extracted to a path in the filesystem of container id.\n`path` parameter is asserted to be a directory. If it exists as a file, 400 error\nwill be returned with message \"not a directory\".\n"
									},
									"response": [
										{
											"name": "The content was extracted successfully",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "file",
													"file": {}
												},
												"url": {
													"raw": "{{baseUrl}}/containers/:id/archive?path=anim incididunt&noOverwriteDirNonDir=anim incididunt&copyUIDGID=anim incididunt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"archive"
													],
													"query": [
														{
															"key": "path",
															"value": "anim incididunt"
														},
														{
															"key": "noOverwriteDirNonDir",
															"value": "anim incididunt"
														},
														{
															"key": "copyUIDGID",
															"value": "anim incididunt"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad parameter",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "file",
													"file": {}
												},
												"url": {
													"raw": "{{baseUrl}}/containers/:id/archive?path=anim incididunt&noOverwriteDirNonDir=anim incididunt&copyUIDGID=anim incididunt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"archive"
													],
													"query": [
														{
															"key": "path",
															"value": "anim incididunt"
														},
														{
															"key": "noOverwriteDirNonDir",
															"value": "anim incididunt"
														},
														{
															"key": "copyUIDGID",
															"value": "anim incididunt"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"not a directory\"\n}"
										},
										{
											"name": "Permission denied, the volume or container rootfs is marked as read-only.",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "file",
													"file": {}
												},
												"url": {
													"raw": "{{baseUrl}}/containers/:id/archive?path=anim incididunt&noOverwriteDirNonDir=anim incididunt&copyUIDGID=anim incididunt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"archive"
													],
													"query": [
														{
															"key": "path",
															"value": "anim incididunt"
														},
														{
															"key": "noOverwriteDirNonDir",
															"value": "anim incididunt"
														},
														{
															"key": "copyUIDGID",
															"value": "anim incididunt"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Something went wrong.\"\n}"
										},
										{
											"name": "No such container or path does not exist inside the container",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "file",
													"file": {}
												},
												"url": {
													"raw": "{{baseUrl}}/containers/:id/archive?path=anim incididunt&noOverwriteDirNonDir=anim incididunt&copyUIDGID=anim incididunt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"archive"
													],
													"query": [
														{
															"key": "path",
															"value": "anim incididunt"
														},
														{
															"key": "noOverwriteDirNonDir",
															"value": "anim incididunt"
														},
														{
															"key": "copyUIDGID",
															"value": "anim incididunt"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
										},
										{
											"name": "Server error",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "file",
													"file": {}
												},
												"url": {
													"raw": "{{baseUrl}}/containers/:id/archive?path=anim incididunt&noOverwriteDirNonDir=anim incididunt&copyUIDGID=anim incididunt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"containers",
														":id",
														"archive"
													],
													"query": [
														{
															"key": "path",
															"value": "anim incididunt"
														},
														{
															"key": "noOverwriteDirNonDir",
															"value": "anim incididunt"
														},
														{
															"key": "copyUIDGID",
															"value": "anim incididunt"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "anim incididunt",
															"description": "(Required) ID or name of the container"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"Something went wrong.\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Remove a container",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/containers/:id?v=false&force=false&link=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										":id"
									],
									"query": [
										{
											"key": "v",
											"value": "false",
											"description": "Remove anonymous volumes associated with the container."
										},
										{
											"key": "force",
											"value": "false",
											"description": "If the container is running, kill it before removing it."
										},
										{
											"key": "link",
											"value": "false",
											"description": "Remove the specified link associated with the container."
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of the container"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id?v=false&force=false&link=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id"
											],
											"query": [
												{
													"key": "v",
													"value": "false"
												},
												{
													"key": "force",
													"value": "false"
												},
												{
													"key": "link",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad parameter",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id?v=false&force=false&link=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id"
											],
											"query": [
												{
													"key": "v",
													"value": "false"
												},
												{
													"key": "force",
													"value": "false"
												},
												{
													"key": "link",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "no such container",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id?v=false&force=false&link=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id"
											],
											"query": [
												{
													"key": "v",
													"value": "false"
												},
												{
													"key": "force",
													"value": "false"
												},
												{
													"key": "link",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
								},
								{
									"name": "conflict",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id?v=false&force=false&link=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id"
											],
											"query": [
												{
													"key": "v",
													"value": "false"
												},
												{
													"key": "force",
													"value": "false"
												},
												{
													"key": "link",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"You cannot remove a running container: c2ada9df5af8. Stop the\\ncontainer before attempting removal or force remove\\n\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id?v=false&force=false&link=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id"
											],
											"query": [
												{
													"key": "v",
													"value": "false"
												},
												{
													"key": "force",
													"value": "false"
												},
												{
													"key": "link",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Inspect a container",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/containers/:id/json?size=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										":id",
										"json"
									],
									"query": [
										{
											"key": "size",
											"value": "false",
											"description": "Return the size of container as fields `SizeRw` and `SizeRootFs`"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of the container"
										}
									]
								},
								"description": "Return low-level information about a container."
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/json?size=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"json"
											],
											"query": [
												{
													"key": "size",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"AppArmorProfile\": \"\",\n  \"Args\": [\n    \"-c\",\n    \"exit 9\"\n  ],\n  \"Config\": {\n    \"AttachStderr\": true,\n    \"AttachStdin\": false,\n    \"AttachStdout\": true,\n    \"Cmd\": [\n      \"/bin/sh\",\n      \"-c\",\n      \"exit 9\"\n    ],\n    \"Domainname\": \"\",\n    \"Env\": [\n      \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n    ],\n    \"Healthcheck\": {\n      \"Test\": [\n        \"CMD-SHELL\",\n        \"exit 0\"\n      ]\n    },\n    \"Hostname\": \"ba033ac44011\",\n    \"Image\": \"ubuntu\",\n    \"Labels\": {\n      \"com.example.vendor\": \"Acme\",\n      \"com.example.license\": \"GPL\",\n      \"com.example.version\": \"1.0\"\n    },\n    \"MacAddress\": \"\",\n    \"NetworkDisabled\": false,\n    \"OpenStdin\": false,\n    \"StdinOnce\": false,\n    \"Tty\": false,\n    \"User\": \"\",\n    \"Volumes\": {\n      \"/volumes/data\": {}\n    },\n    \"WorkingDir\": \"\",\n    \"StopSignal\": \"SIGTERM\",\n    \"StopTimeout\": 10\n  },\n  \"Created\": \"2015-01-06T15:47:31.485331387Z\",\n  \"Driver\": \"devicemapper\",\n  \"ExecIDs\": [\n    \"b35395de42bc8abd327f9dd65d913b9ba28c74d2f0734eeeae84fa1c616a0fca\",\n    \"3fc1232e5cd20c8de182ed81178503dc6437f4e7ef12b52cc5e8de020652f1c4\"\n  ],\n  \"HostConfig\": {\n    \"MaximumIOps\": 0,\n    \"MaximumIOBps\": 0,\n    \"BlkioWeight\": 0,\n    \"BlkioWeightDevice\": [\n      {}\n    ],\n    \"BlkioDeviceReadBps\": [\n      {}\n    ],\n    \"BlkioDeviceWriteBps\": [\n      {}\n    ],\n    \"BlkioDeviceReadIOps\": [\n      {}\n    ],\n    \"BlkioDeviceWriteIOps\": [\n      {}\n    ],\n    \"ContainerIDFile\": \"\",\n    \"CpusetCpus\": \"\",\n    \"CpusetMems\": \"\",\n    \"CpuPercent\": 80,\n    \"CpuShares\": 0,\n    \"CpuPeriod\": 100000,\n    \"CpuRealtimePeriod\": 1000000,\n    \"CpuRealtimeRuntime\": 10000,\n    \"Devices\": [],\n    \"DeviceRequests\": [\n      {\n        \"Driver\": \"nvidia\",\n        \"Count\": -1,\n        \"DeviceIDs\\\"\": [\n          \"0\",\n          \"1\",\n          \"GPU-fef8089b-4820-abfc-e83e-94318197576e\"\n        ],\n        \"Capabilities\": [\n          [\n            \"gpu\",\n            \"nvidia\",\n            \"compute\"\n          ]\n        ],\n        \"Options\": {\n          \"property1\": \"string\",\n          \"property2\": \"string\"\n        }\n      }\n    ],\n    \"IpcMode\": \"\",\n    \"Memory\": 0,\n    \"MemorySwap\": 0,\n    \"MemoryReservation\": 0,\n    \"KernelMemory\": 0,\n    \"OomKillDisable\": false,\n    \"OomScoreAdj\": 500,\n    \"NetworkMode\": \"bridge\",\n    \"PidMode\": \"\",\n    \"PortBindings\": {},\n    \"Privileged\": false,\n    \"ReadonlyRootfs\": false,\n    \"PublishAllPorts\": false,\n    \"RestartPolicy\": {\n      \"MaximumRetryCount\": 2,\n      \"Name\": \"on-failure\"\n    },\n    \"LogConfig\": {\n      \"Type\": \"json-file\"\n    },\n    \"Sysctls\": {\n      \"net.ipv4.ip_forward\": \"1\"\n    },\n    \"Ulimits\": [\n      {}\n    ],\n    \"VolumeDriver\": \"\",\n    \"ShmSize\": 67108864\n  },\n  \"HostnamePath\": \"/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hostname\",\n  \"HostsPath\": \"/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hosts\",\n  \"LogPath\": \"/var/lib/docker/containers/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b-json.log\",\n  \"Id\": \"ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39\",\n  \"Image\": \"04c5d3b7b0656168630d3ba35d8889bd0e9caafcaeb3004d2bfbc47e7c5d35d2\",\n  \"MountLabel\": \"\",\n  \"Name\": \"/boring_euclid\",\n  \"NetworkSettings\": {\n    \"Bridge\": \"\",\n    \"SandboxID\": \"\",\n    \"HairpinMode\": false,\n    \"LinkLocalIPv6Address\": \"\",\n    \"LinkLocalIPv6PrefixLen\": 0,\n    \"SandboxKey\": \"\",\n    \"EndpointID\": \"\",\n    \"Gateway\": \"\",\n    \"GlobalIPv6Address\": \"\",\n    \"GlobalIPv6PrefixLen\": 0,\n    \"IPAddress\": \"\",\n    \"IPPrefixLen\": 0,\n    \"IPv6Gateway\": \"\",\n    \"MacAddress\": \"\",\n    \"Networks\": {\n      \"bridge\": {\n        \"NetworkID\": \"7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812\",\n        \"EndpointID\": \"7587b82f0dada3656fda26588aee72630c6fab1536d36e394b2bfbcf898c971d\",\n        \"Gateway\": \"172.17.0.1\",\n        \"IPAddress\": \"172.17.0.2\",\n        \"IPPrefixLen\": 16,\n        \"IPv6Gateway\": \"\",\n        \"GlobalIPv6Address\": \"\",\n        \"GlobalIPv6PrefixLen\": 0,\n        \"MacAddress\": \"02:42:ac:12:00:02\"\n      }\n    }\n  },\n  \"Path\": \"/bin/sh\",\n  \"ProcessLabel\": \"\",\n  \"ResolvConfPath\": \"/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/resolv.conf\",\n  \"RestartCount\": 1,\n  \"State\": {\n    \"Error\": \"\",\n    \"ExitCode\": 9,\n    \"FinishedAt\": \"2015-01-06T15:47:32.080254511Z\",\n    \"Health\": {\n      \"Status\": \"healthy\",\n      \"FailingStreak\": 0,\n      \"Log\": [\n        {\n          \"Start\": \"2019-12-22T10:59:05.6385933Z\",\n          \"End\": \"2019-12-22T10:59:05.8078452Z\",\n          \"ExitCode\": 0,\n          \"Output\": \"\"\n        }\n      ]\n    },\n    \"OOMKilled\": false,\n    \"Dead\": false,\n    \"Paused\": false,\n    \"Pid\": 0,\n    \"Restarting\": false,\n    \"Running\": true,\n    \"StartedAt\": \"2015-01-06T15:47:32.072697474Z\",\n    \"Status\": \"running\"\n  },\n  \"Mounts\": [\n    {\n      \"Name\": \"fac362...80535\",\n      \"Source\": \"/data\",\n      \"Destination\": \"/data\",\n      \"Driver\": \"local\",\n      \"Mode\": \"ro,Z\",\n      \"RW\": false,\n      \"Propagation\": \"\"\n    }\n  ]\n}"
								},
								{
									"name": "no such container",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/json?size=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"json"
											],
											"query": [
												{
													"key": "size",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/json?size=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"json"
											],
											"query": [
												{
													"key": "size",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "List processes running inside a container",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/containers/:id/top?ps_args=-ef",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										":id",
										"top"
									],
									"query": [
										{
											"key": "ps_args",
											"value": "-ef",
											"description": "The arguments to pass to `ps`. For example, `aux`"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of the container"
										}
									]
								},
								"description": "On Unix systems, this is done by running the `ps` command. This endpoint\nis not supported on Windows.\n"
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/top?ps_args=-ef",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"top"
											],
											"query": [
												{
													"key": "ps_args",
													"value": "-ef"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"Titles\": [\n    \"UID\",\n    \"PID\",\n    \"PPID\",\n    \"C\",\n    \"STIME\",\n    \"TTY\",\n    \"TIME\",\n    \"CMD\"\n  ],\n  \"Processes\": [\n    [\n      \"root\",\n      \"13642\",\n      \"882\",\n      \"0\",\n      \"17:03\",\n      \"pts/0\",\n      \"00:00:00\",\n      \"/bin/bash\"\n    ],\n    [\n      \"root\",\n      \"13735\",\n      \"13642\",\n      \"0\",\n      \"17:06\",\n      \"pts/0\",\n      \"00:00:00\",\n      \"sleep 10\"\n    ]\n  ]\n}"
								},
								{
									"name": "no such container",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/top?ps_args=-ef",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"top"
											],
											"query": [
												{
													"key": "ps_args",
													"value": "-ef"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/top?ps_args=-ef",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"top"
											],
											"query": [
												{
													"key": "ps_args",
													"value": "-ef"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Get container logs",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/containers/:id/logs?follow=false&stdout=false&stderr=false&since=0&until=0&timestamps=false&tail=all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										":id",
										"logs"
									],
									"query": [
										{
											"key": "follow",
											"value": "false",
											"description": "Keep connection after returning logs."
										},
										{
											"key": "stdout",
											"value": "false",
											"description": "Return logs from `stdout`"
										},
										{
											"key": "stderr",
											"value": "false",
											"description": "Return logs from `stderr`"
										},
										{
											"key": "since",
											"value": "0",
											"description": "Only return logs since this time, as a UNIX timestamp"
										},
										{
											"key": "until",
											"value": "0",
											"description": "Only return logs before this time, as a UNIX timestamp"
										},
										{
											"key": "timestamps",
											"value": "false",
											"description": "Add timestamps to every log line"
										},
										{
											"key": "tail",
											"value": "all",
											"description": "Only return this number of log lines from the end of the logs.\nSpecify as an integer or `all` to output all log lines.\n"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of the container"
										}
									]
								},
								"description": "Get `stdout` and `stderr` logs from a container.\n\nNote: This endpoint works only for containers with the `json-file` or\n`journald` logging driver.\n"
							},
							"response": [
								{
									"name": "logs returned as a stream in response body.\nFor the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).\nNote that unlike the attach endpoint, the logs endpoint does not\nupgrade the connection and does not set Content-Type.\n",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/logs?follow=false&stdout=false&stderr=false&since=0&until=0&timestamps=false&tail=all",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"logs"
											],
											"query": [
												{
													"key": "follow",
													"value": "false"
												},
												{
													"key": "stdout",
													"value": "false"
												},
												{
													"key": "stderr",
													"value": "false"
												},
												{
													"key": "since",
													"value": "0"
												},
												{
													"key": "until",
													"value": "0"
												},
												{
													"key": "timestamps",
													"value": "false"
												},
												{
													"key": "tail",
													"value": "all"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"anim incididunt\""
								},
								{
									"name": "no such container",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/logs?follow=false&stdout=false&stderr=false&since=0&until=0&timestamps=false&tail=all",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"logs"
											],
											"query": [
												{
													"key": "follow",
													"value": "false"
												},
												{
													"key": "stdout",
													"value": "false"
												},
												{
													"key": "stderr",
													"value": "false"
												},
												{
													"key": "since",
													"value": "0"
												},
												{
													"key": "until",
													"value": "0"
												},
												{
													"key": "timestamps",
													"value": "false"
												},
												{
													"key": "tail",
													"value": "all"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/logs?follow=false&stdout=false&stderr=false&since=0&until=0&timestamps=false&tail=all",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"logs"
											],
											"query": [
												{
													"key": "follow",
													"value": "false"
												},
												{
													"key": "stdout",
													"value": "false"
												},
												{
													"key": "stderr",
													"value": "false"
												},
												{
													"key": "since",
													"value": "0"
												},
												{
													"key": "until",
													"value": "0"
												},
												{
													"key": "timestamps",
													"value": "false"
												},
												{
													"key": "tail",
													"value": "all"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Get changes on a container’s filesystem",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/containers/:id/changes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										":id",
										"changes"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of the container"
										}
									]
								},
								"description": "Returns which files in a container's filesystem have been added, deleted,\nor modified. The `Kind` of modification can be one of:\n\n- `0`: Modified\n- `1`: Added\n- `2`: Deleted\n"
							},
							"response": [
								{
									"name": "The list of changes",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/changes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"changes"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"Path\": \"/dev\",\n    \"Kind\": 0\n  },\n  {\n    \"Path\": \"/dev/kmsg\",\n    \"Kind\": 1\n  },\n  {\n    \"Path\": \"/test\",\n    \"Kind\": 1\n  }\n]"
								},
								{
									"name": "no such container",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/changes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"changes"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/changes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"changes"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Export a container",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/octet-stream"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/containers/:id/export",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										":id",
										"export"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of the container"
										}
									]
								},
								"description": "Export the contents of a container as a tarball."
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/export",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"export"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "no such container",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/export",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"export"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/export",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"export"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/octet-stream"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get container stats based on resource usage",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/containers/:id/stats?stream=true&one-shot=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										":id",
										"stats"
									],
									"query": [
										{
											"key": "stream",
											"value": "true",
											"description": "Stream the output. If false, the stats will be output once and then\nit will disconnect.\n"
										},
										{
											"key": "one-shot",
											"value": "false",
											"description": "Only get a single stat instead of waiting for 2 cycles. Must be used\nwith `stream=false`.\n"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of the container"
										}
									]
								},
								"description": "This endpoint returns a live stream of a container’s resource usage\nstatistics.\n\nThe `precpu_stats` is the CPU statistic of the *previous* read, and is\nused to calculate the CPU usage percentage. It is not an exact copy\nof the `cpu_stats` field.\n\nIf either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is\nnil then for compatibility with older daemons the length of the\ncorresponding `cpu_usage.percpu_usage` array should be used.\n\nOn a cgroup v2 host, the following fields are not set\n* `blkio_stats`: all fields other than `io_service_bytes_recursive`\n* `cpu_stats`: `cpu_usage.percpu_usage`\n* `memory_stats`: `max_usage` and `failcnt`\nAlso, `memory_stats.stats` fields are incompatible with cgroup v1.\n\nTo calculate the values shown by the `stats` command of the docker cli tool\nthe following formulas can be used:\n* used_memory = `memory_stats.usage - memory_stats.stats.cache`\n* available_memory = `memory_stats.limit`\n* Memory usage % = `(used_memory / available_memory) * 100.0`\n* cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage`\n* system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage`\n* number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus`\n* CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0`\n"
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/stats?stream=true&one-shot=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"stats"
											],
											"query": [
												{
													"key": "stream",
													"value": "true"
												},
												{
													"key": "one-shot",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"read\": \"2015-01-08T22:57:31.547920715Z\",\n  \"pids_stats\": {\n    \"current\": 3\n  },\n  \"networks\": {\n    \"eth0\": {\n      \"rx_bytes\": 5338,\n      \"rx_dropped\": 0,\n      \"rx_errors\": 0,\n      \"rx_packets\": 36,\n      \"tx_bytes\": 648,\n      \"tx_dropped\": 0,\n      \"tx_errors\": 0,\n      \"tx_packets\": 8\n    },\n    \"eth5\": {\n      \"rx_bytes\": 4641,\n      \"rx_dropped\": 0,\n      \"rx_errors\": 0,\n      \"rx_packets\": 26,\n      \"tx_bytes\": 690,\n      \"tx_dropped\": 0,\n      \"tx_errors\": 0,\n      \"tx_packets\": 9\n    }\n  },\n  \"memory_stats\": {\n    \"stats\": {\n      \"total_pgmajfault\": 0,\n      \"cache\": 0,\n      \"mapped_file\": 0,\n      \"total_inactive_file\": 0,\n      \"pgpgout\": 414,\n      \"rss\": 6537216,\n      \"total_mapped_file\": 0,\n      \"writeback\": 0,\n      \"unevictable\": 0,\n      \"pgpgin\": 477,\n      \"total_unevictable\": 0,\n      \"pgmajfault\": 0,\n      \"total_rss\": 6537216,\n      \"total_rss_huge\": 6291456,\n      \"total_writeback\": 0,\n      \"total_inactive_anon\": 0,\n      \"rss_huge\": 6291456,\n      \"hierarchical_memory_limit\": 67108864,\n      \"total_pgfault\": 964,\n      \"total_active_file\": 0,\n      \"active_anon\": 6537216,\n      \"total_active_anon\": 6537216,\n      \"total_pgpgout\": 414,\n      \"total_cache\": 0,\n      \"inactive_anon\": 0,\n      \"active_file\": 0,\n      \"pgfault\": 964,\n      \"inactive_file\": 0,\n      \"total_pgpgin\": 477\n    },\n    \"max_usage\": 6651904,\n    \"usage\": 6537216,\n    \"failcnt\": 0,\n    \"limit\": 67108864\n  },\n  \"blkio_stats\": {},\n  \"cpu_stats\": {\n    \"cpu_usage\": {\n      \"percpu_usage\": [\n        8646879,\n        24472255,\n        36438778,\n        30657443\n      ],\n      \"usage_in_usermode\": 50000000,\n      \"total_usage\": 100215355,\n      \"usage_in_kernelmode\": 30000000\n    },\n    \"system_cpu_usage\": 739306590000000,\n    \"online_cpus\": 4,\n    \"throttling_data\": {\n      \"periods\": 0,\n      \"throttled_periods\": 0,\n      \"throttled_time\": 0\n    }\n  },\n  \"precpu_stats\": {\n    \"cpu_usage\": {\n      \"percpu_usage\": [\n        8646879,\n        24350896,\n        36438778,\n        30657443\n      ],\n      \"usage_in_usermode\": 50000000,\n      \"total_usage\": 100093996,\n      \"usage_in_kernelmode\": 30000000\n    },\n    \"system_cpu_usage\": 9492140000000,\n    \"online_cpus\": 4,\n    \"throttling_data\": {\n      \"periods\": 0,\n      \"throttled_periods\": 0,\n      \"throttled_time\": 0\n    }\n  }\n}"
								},
								{
									"name": "no such container",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/stats?stream=true&one-shot=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"stats"
											],
											"query": [
												{
													"key": "stream",
													"value": "true"
												},
												{
													"key": "one-shot",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/stats?stream=true&one-shot=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"stats"
											],
											"query": [
												{
													"key": "stream",
													"value": "true"
												},
												{
													"key": "one-shot",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Resize a container TTY",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/containers/:id/resize?h=-74142093&w=-74142093",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										":id",
										"resize"
									],
									"query": [
										{
											"key": "h",
											"value": "-74142093",
											"description": "Height of the TTY session in characters"
										},
										{
											"key": "w",
											"value": "-74142093",
											"description": "Width of the TTY session in characters"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of the container"
										}
									]
								},
								"description": "Resize the TTY for a container."
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/resize?h=-74142093&w=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"resize"
											],
											"query": [
												{
													"key": "h",
													"value": "-74142093"
												},
												{
													"key": "w",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "no such container",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/resize?h=-74142093&w=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"resize"
											],
											"query": [
												{
													"key": "h",
													"value": "-74142093"
												},
												{
													"key": "w",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
								},
								{
									"name": "cannot resize container",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/resize?h=-74142093&w=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"resize"
											],
											"query": [
												{
													"key": "h",
													"value": "-74142093"
												},
												{
													"key": "w",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Start a container",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/containers/:id/start?detachKeys=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										":id",
										"start"
									],
									"query": [
										{
											"key": "detachKeys",
											"value": "anim incididunt",
											"description": "Override the key sequence for detaching a container. Format is a\nsingle character `[a-Z]` or `ctrl-<value>` where `<value>` is one\nof: `a-z`, `@`, `^`, `[`, `,` or `_`.\n"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of the container"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/start?detachKeys=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"start"
											],
											"query": [
												{
													"key": "detachKeys",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "container already started",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/start?detachKeys=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"start"
											],
											"query": [
												{
													"key": "detachKeys",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Not Modified",
									"code": 304,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "no such container",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/start?detachKeys=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"start"
											],
											"query": [
												{
													"key": "detachKeys",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/start?detachKeys=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"start"
											],
											"query": [
												{
													"key": "detachKeys",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Stop a container",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/containers/:id/stop?t=-74142093",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										":id",
										"stop"
									],
									"query": [
										{
											"key": "t",
											"value": "-74142093",
											"description": "Number of seconds to wait before killing the container"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of the container"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/stop?t=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"stop"
											],
											"query": [
												{
													"key": "t",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "container already stopped",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/stop?t=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"stop"
											],
											"query": [
												{
													"key": "t",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Not Modified",
									"code": 304,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "no such container",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/stop?t=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"stop"
											],
											"query": [
												{
													"key": "t",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/stop?t=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"stop"
											],
											"query": [
												{
													"key": "t",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Restart a container",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/containers/:id/restart?t=-74142093",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										":id",
										"restart"
									],
									"query": [
										{
											"key": "t",
											"value": "-74142093",
											"description": "Number of seconds to wait before killing the container"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of the container"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/restart?t=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"restart"
											],
											"query": [
												{
													"key": "t",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "no such container",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/restart?t=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"restart"
											],
											"query": [
												{
													"key": "t",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/restart?t=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"restart"
											],
											"query": [
												{
													"key": "t",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Kill a container",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/containers/:id/kill?signal=SIGKILL",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										":id",
										"kill"
									],
									"query": [
										{
											"key": "signal",
											"value": "SIGKILL",
											"description": "Signal to send to the container as an integer or string (e.g. `SIGINT`)"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of the container"
										}
									]
								},
								"description": "Send a POSIX signal to a container, defaulting to killing to the\ncontainer.\n"
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/kill?signal=SIGKILL",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"kill"
											],
											"query": [
												{
													"key": "signal",
													"value": "SIGKILL"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "no such container",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/kill?signal=SIGKILL",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"kill"
											],
											"query": [
												{
													"key": "signal",
													"value": "SIGKILL"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
								},
								{
									"name": "container is not running",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/kill?signal=SIGKILL",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"kill"
											],
											"query": [
												{
													"key": "signal",
													"value": "SIGKILL"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Container d37cde0fe4ad63c3a7252023b2f9800282894247d145cb5933ddf6e52cc03a28 is not running\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/kill?signal=SIGKILL",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"kill"
											],
											"query": [
												{
													"key": "signal",
													"value": "SIGKILL"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Update a container",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"CpuShares\": -32864509,\n  \"Memory\": 0,\n  \"CgroupParent\": \"culpa laborum anim Ut mollit\",\n  \"BlkioWeight\": 41,\n  \"BlkioWeightDevice\": [\n    {\n      \"Path\": \"esse id dolor\",\n      \"Weight\": 99818292\n    },\n    {\n      \"Path\": \"sed minim\",\n      \"Weight\": 4428116\n    }\n  ],\n  \"BlkioDeviceReadBps\": [\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"BlkioDeviceWriteBps\": [\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"BlkioDeviceReadIOps\": [\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"BlkioDeviceWriteIOps\": [\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"CpuPeriod\": 62077167,\n  \"CpuQuota\": -80360527,\n  \"CpuRealtimePeriod\": -88943840,\n  \"CpuRealtimeRuntime\": -55508711,\n  \"CpusetCpus\": \"0-3\",\n  \"CpusetMems\": \"adipisicing eiusmod\",\n  \"Devices\": [\n    {\n      \"PathOnHost\": \"/dev/deviceName\",\n      \"PathInContainer\": \"/dev/deviceName\",\n      \"CgroupPermissions\": \"mrw\"\n    },\n    {\n      \"PathOnHost\": \"/dev/deviceName\",\n      \"PathInContainer\": \"/dev/deviceName\",\n      \"CgroupPermissions\": \"mrw\"\n    }\n  ],\n  \"DeviceCgroupRules\": [\n    \"c 13:* rwm\",\n    \"c 13:* rwm\"\n  ],\n  \"DeviceRequests\": [\n    {\n      \"Driver\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Count\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DeviceIDs\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Capabilities\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Options\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Driver\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Count\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DeviceIDs\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Capabilities\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Options\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"KernelMemory\": 209715200,\n  \"KernelMemoryTCP\": 16654445,\n  \"MemoryReservation\": 35655510,\n  \"MemorySwap\": -10527698,\n  \"MemorySwappiness\": 56,\n  \"NanoCpus\": 35331414,\n  \"OomKillDisable\": true,\n  \"Init\": true,\n  \"PidsLimit\": 67335288,\n  \"Ulimits\": [\n    {\n      \"Name\": \"aute fugiat commodo ea\",\n      \"Soft\": -59784600,\n      \"Hard\": -32478601\n    },\n    {\n      \"Name\": \"exercitation laboris\",\n      \"Soft\": -29728770,\n      \"Hard\": -24377097\n    }\n  ],\n  \"CpuCount\": -42685127,\n  \"CpuPercent\": -40236912,\n  \"IOMaximumIOps\": -20484691,\n  \"IOMaximumBandwidth\": -97837930,\n  \"RestartPolicy\": {\n    \"Name\": \"on-failure\",\n    \"MaximumRetryCount\": -6791628\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/containers/:id/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										":id",
										"update"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of the container"
										}
									]
								},
								"description": "Change various configuration options of a container without having to\nrecreate it.\n"
							},
							"response": [
								{
									"name": "The container has been updated.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"CpuShares\": -25103533,\n  \"Memory\": 0,\n  \"CgroupParent\": \"aliquip ullamco aliqua\",\n  \"BlkioWeight\": 78,\n  \"BlkioWeightDevice\": [\n    {\n      \"Path\": \"dolor sunt\",\n      \"Weight\": 48934802\n    },\n    {\n      \"Path\": \"mollit\",\n      \"Weight\": 10068586\n    }\n  ],\n  \"BlkioDeviceReadBps\": [\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"BlkioDeviceWriteBps\": [\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"BlkioDeviceReadIOps\": [\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"BlkioDeviceWriteIOps\": [\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"CpuPeriod\": -18973766,\n  \"CpuQuota\": 39485222,\n  \"CpuRealtimePeriod\": 51793331,\n  \"CpuRealtimeRuntime\": 65019236,\n  \"CpusetCpus\": \"0-3\",\n  \"CpusetMems\": \"esse Ut proident velit\",\n  \"Devices\": [\n    {\n      \"PathOnHost\": \"/dev/deviceName\",\n      \"PathInContainer\": \"/dev/deviceName\",\n      \"CgroupPermissions\": \"mrw\"\n    },\n    {\n      \"PathOnHost\": \"/dev/deviceName\",\n      \"PathInContainer\": \"/dev/deviceName\",\n      \"CgroupPermissions\": \"mrw\"\n    }\n  ],\n  \"DeviceCgroupRules\": [\n    \"c 13:* rwm\",\n    \"c 13:* rwm\"\n  ],\n  \"DeviceRequests\": [\n    {\n      \"Driver\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Count\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DeviceIDs\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Capabilities\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Options\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Driver\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Count\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DeviceIDs\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Capabilities\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Options\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"KernelMemory\": 209715200,\n  \"KernelMemoryTCP\": 69682365,\n  \"MemoryReservation\": -65078348,\n  \"MemorySwap\": 38123845,\n  \"MemorySwappiness\": 46,\n  \"NanoCpus\": 84965158,\n  \"OomKillDisable\": true,\n  \"Init\": false,\n  \"PidsLimit\": 95670522,\n  \"Ulimits\": [\n    {\n      \"Name\": \"nisi ad ut\",\n      \"Soft\": 54583554,\n      \"Hard\": 78996569\n    },\n    {\n      \"Name\": \"quis \",\n      \"Soft\": -10424367,\n      \"Hard\": 25839196\n    }\n  ],\n  \"CpuCount\": -24850583,\n  \"CpuPercent\": 15804569,\n  \"IOMaximumIOps\": 50063104,\n  \"IOMaximumBandwidth\": 98022530,\n  \"RestartPolicy\": {\n    \"Name\": \"always\",\n    \"MaximumRetryCount\": -79846687\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/containers/:id/update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"update"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"Warnings\": [\n    \"sed eu reprehenderit dolor\",\n    \"nostrud consectetur sed enim\"\n  ]\n}"
								},
								{
									"name": "no such container",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"CpuShares\": -25103533,\n  \"Memory\": 0,\n  \"CgroupParent\": \"aliquip ullamco aliqua\",\n  \"BlkioWeight\": 78,\n  \"BlkioWeightDevice\": [\n    {\n      \"Path\": \"dolor sunt\",\n      \"Weight\": 48934802\n    },\n    {\n      \"Path\": \"mollit\",\n      \"Weight\": 10068586\n    }\n  ],\n  \"BlkioDeviceReadBps\": [\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"BlkioDeviceWriteBps\": [\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"BlkioDeviceReadIOps\": [\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"BlkioDeviceWriteIOps\": [\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"CpuPeriod\": -18973766,\n  \"CpuQuota\": 39485222,\n  \"CpuRealtimePeriod\": 51793331,\n  \"CpuRealtimeRuntime\": 65019236,\n  \"CpusetCpus\": \"0-3\",\n  \"CpusetMems\": \"esse Ut proident velit\",\n  \"Devices\": [\n    {\n      \"PathOnHost\": \"/dev/deviceName\",\n      \"PathInContainer\": \"/dev/deviceName\",\n      \"CgroupPermissions\": \"mrw\"\n    },\n    {\n      \"PathOnHost\": \"/dev/deviceName\",\n      \"PathInContainer\": \"/dev/deviceName\",\n      \"CgroupPermissions\": \"mrw\"\n    }\n  ],\n  \"DeviceCgroupRules\": [\n    \"c 13:* rwm\",\n    \"c 13:* rwm\"\n  ],\n  \"DeviceRequests\": [\n    {\n      \"Driver\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Count\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DeviceIDs\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Capabilities\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Options\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Driver\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Count\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DeviceIDs\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Capabilities\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Options\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"KernelMemory\": 209715200,\n  \"KernelMemoryTCP\": 69682365,\n  \"MemoryReservation\": -65078348,\n  \"MemorySwap\": 38123845,\n  \"MemorySwappiness\": 46,\n  \"NanoCpus\": 84965158,\n  \"OomKillDisable\": true,\n  \"Init\": false,\n  \"PidsLimit\": 95670522,\n  \"Ulimits\": [\n    {\n      \"Name\": \"nisi ad ut\",\n      \"Soft\": 54583554,\n      \"Hard\": 78996569\n    },\n    {\n      \"Name\": \"quis \",\n      \"Soft\": -10424367,\n      \"Hard\": 25839196\n    }\n  ],\n  \"CpuCount\": -24850583,\n  \"CpuPercent\": 15804569,\n  \"IOMaximumIOps\": 50063104,\n  \"IOMaximumBandwidth\": 98022530,\n  \"RestartPolicy\": {\n    \"Name\": \"always\",\n    \"MaximumRetryCount\": -79846687\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/containers/:id/update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"update"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"CpuShares\": -25103533,\n  \"Memory\": 0,\n  \"CgroupParent\": \"aliquip ullamco aliqua\",\n  \"BlkioWeight\": 78,\n  \"BlkioWeightDevice\": [\n    {\n      \"Path\": \"dolor sunt\",\n      \"Weight\": 48934802\n    },\n    {\n      \"Path\": \"mollit\",\n      \"Weight\": 10068586\n    }\n  ],\n  \"BlkioDeviceReadBps\": [\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"BlkioDeviceWriteBps\": [\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"BlkioDeviceReadIOps\": [\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"BlkioDeviceWriteIOps\": [\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Path\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Rate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"CpuPeriod\": -18973766,\n  \"CpuQuota\": 39485222,\n  \"CpuRealtimePeriod\": 51793331,\n  \"CpuRealtimeRuntime\": 65019236,\n  \"CpusetCpus\": \"0-3\",\n  \"CpusetMems\": \"esse Ut proident velit\",\n  \"Devices\": [\n    {\n      \"PathOnHost\": \"/dev/deviceName\",\n      \"PathInContainer\": \"/dev/deviceName\",\n      \"CgroupPermissions\": \"mrw\"\n    },\n    {\n      \"PathOnHost\": \"/dev/deviceName\",\n      \"PathInContainer\": \"/dev/deviceName\",\n      \"CgroupPermissions\": \"mrw\"\n    }\n  ],\n  \"DeviceCgroupRules\": [\n    \"c 13:* rwm\",\n    \"c 13:* rwm\"\n  ],\n  \"DeviceRequests\": [\n    {\n      \"Driver\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Count\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DeviceIDs\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Capabilities\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Options\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Driver\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Count\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DeviceIDs\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Capabilities\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Options\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"KernelMemory\": 209715200,\n  \"KernelMemoryTCP\": 69682365,\n  \"MemoryReservation\": -65078348,\n  \"MemorySwap\": 38123845,\n  \"MemorySwappiness\": 46,\n  \"NanoCpus\": 84965158,\n  \"OomKillDisable\": true,\n  \"Init\": false,\n  \"PidsLimit\": 95670522,\n  \"Ulimits\": [\n    {\n      \"Name\": \"nisi ad ut\",\n      \"Soft\": 54583554,\n      \"Hard\": 78996569\n    },\n    {\n      \"Name\": \"quis \",\n      \"Soft\": -10424367,\n      \"Hard\": 25839196\n    }\n  ],\n  \"CpuCount\": -24850583,\n  \"CpuPercent\": 15804569,\n  \"IOMaximumIOps\": 50063104,\n  \"IOMaximumBandwidth\": 98022530,\n  \"RestartPolicy\": {\n    \"Name\": \"always\",\n    \"MaximumRetryCount\": -79846687\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/containers/:id/update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"update"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Rename a container",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/containers/:id/rename?name=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										":id",
										"rename"
									],
									"query": [
										{
											"key": "name",
											"value": "anim incididunt",
											"description": "(Required) New name for the container"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of the container"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/rename?name=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"rename"
											],
											"query": [
												{
													"key": "name",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "no such container",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/rename?name=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"rename"
											],
											"query": [
												{
													"key": "name",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
								},
								{
									"name": "name already in use",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/rename?name=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"rename"
											],
											"query": [
												{
													"key": "name",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/rename?name=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"rename"
											],
											"query": [
												{
													"key": "name",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Pause a container",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/containers/:id/pause",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										":id",
										"pause"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of the container"
										}
									]
								},
								"description": "Use the freezer cgroup to suspend all processes in a container.\n\nTraditionally, when suspending a process the `SIGSTOP` signal is used,\nwhich is observable by the process being suspended. With the freezer\ncgroup the process is unaware, and unable to capture, that it is being\nsuspended, and subsequently resumed.\n"
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/pause",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"pause"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "no such container",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/pause",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"pause"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/pause",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"pause"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Unpause a container",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/containers/:id/unpause",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										":id",
										"unpause"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of the container"
										}
									]
								},
								"description": "Resume a container which has been paused."
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/unpause",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"unpause"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "no such container",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/unpause",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"unpause"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/unpause",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"unpause"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Wait for a container",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/containers/:id/wait?condition=not-running",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										":id",
										"wait"
									],
									"query": [
										{
											"key": "condition",
											"value": "not-running",
											"description": "Wait until a container state reaches the given condition.\n\nDefaults to `not-running` if omitted or empty.\n"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of the container"
										}
									]
								},
								"description": "Block until a container stops, then returns the exit code."
							},
							"response": [
								{
									"name": "The container has exit.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/wait?condition=not-running",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"wait"
											],
											"query": [
												{
													"key": "condition",
													"value": "not-running"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"StatusCode\": -33733473,\n  \"Error\": {\n    \"Message\": \"laborum aliquip Ut\"\n  }\n}"
								},
								{
									"name": "bad parameter",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/wait?condition=not-running",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"wait"
											],
											"query": [
												{
													"key": "condition",
													"value": "not-running"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "no such container",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/wait?condition=not-running",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"wait"
											],
											"query": [
												{
													"key": "condition",
													"value": "not-running"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/containers/:id/wait?condition=not-running",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"wait"
											],
											"query": [
												{
													"key": "condition",
													"value": "not-running"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the container"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Create an exec instance",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"AttachStdin\": false,\n  \"AttachStdout\": true,\n  \"AttachStderr\": true,\n  \"DetachKeys\": \"ctrl-p,ctrl-q\",\n  \"Tty\": false,\n  \"Cmd\": [\n    \"date\"\n  ],\n  \"Env\": [\n    \"FOO=bar\",\n    \"BAZ=quux\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/containers/:id/exec",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										":id",
										"exec"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of container"
										}
									]
								},
								"description": "Run a command inside a running container."
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"AttachStdin\": true,\n  \"AttachStdout\": false,\n  \"AttachStderr\": false,\n  \"DetachKeys\": \"dolor irure ut eu\",\n  \"Tty\": true,\n  \"Env\": [\n    \"eiusmod deserunt commodo dolor anim\",\n    \"dolor commodo sed aute fugiat\"\n  ],\n  \"Cmd\": [\n    \"elit\",\n    \"dolore Ut enim\"\n  ],\n  \"Privileged\": false,\n  \"User\": \"nostrud veniam\",\n  \"WorkingDir\": \"ut Lorem\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/containers/:id/exec",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"exec"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of container"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"Id\": \"dolore pariatur eu\"\n}"
								},
								{
									"name": "no such container",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"AttachStdin\": true,\n  \"AttachStdout\": false,\n  \"AttachStderr\": false,\n  \"DetachKeys\": \"dolor irure ut eu\",\n  \"Tty\": true,\n  \"Env\": [\n    \"eiusmod deserunt commodo dolor anim\",\n    \"dolor commodo sed aute fugiat\"\n  ],\n  \"Cmd\": [\n    \"elit\",\n    \"dolore Ut enim\"\n  ],\n  \"Privileged\": false,\n  \"User\": \"nostrud veniam\",\n  \"WorkingDir\": \"ut Lorem\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/containers/:id/exec",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"exec"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of container"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
								},
								{
									"name": "container is paused",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"AttachStdin\": true,\n  \"AttachStdout\": false,\n  \"AttachStderr\": false,\n  \"DetachKeys\": \"dolor irure ut eu\",\n  \"Tty\": true,\n  \"Env\": [\n    \"eiusmod deserunt commodo dolor anim\",\n    \"dolor commodo sed aute fugiat\"\n  ],\n  \"Cmd\": [\n    \"elit\",\n    \"dolore Ut enim\"\n  ],\n  \"Privileged\": false,\n  \"User\": \"nostrud veniam\",\n  \"WorkingDir\": \"ut Lorem\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/containers/:id/exec",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"exec"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of container"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "Server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"AttachStdin\": true,\n  \"AttachStdout\": false,\n  \"AttachStderr\": false,\n  \"DetachKeys\": \"dolor irure ut eu\",\n  \"Tty\": true,\n  \"Env\": [\n    \"eiusmod deserunt commodo dolor anim\",\n    \"dolor commodo sed aute fugiat\"\n  ],\n  \"Cmd\": [\n    \"elit\",\n    \"dolore Ut enim\"\n  ],\n  \"Privileged\": false,\n  \"User\": \"nostrud veniam\",\n  \"WorkingDir\": \"ut Lorem\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/containers/:id/exec",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"containers",
												":id",
												"exec"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of container"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "List containers",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/containers/json?all=false&limit=-74142093&size=false&filters=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"containers",
								"json"
							],
							"query": [
								{
									"key": "all",
									"value": "false",
									"description": "Return all containers. By default, only running containers are shown.\n"
								},
								{
									"key": "limit",
									"value": "-74142093",
									"description": "Return this number of most recently created containers, including\nnon-running ones.\n"
								},
								{
									"key": "size",
									"value": "false",
									"description": "Return the size of container as fields `SizeRw` and `SizeRootFs`.\n"
								},
								{
									"key": "filters",
									"value": "anim incididunt",
									"description": "Filters to process on the container list, encoded as JSON (a\n`map[string][]string`). For example, `{\"status\": [\"paused\"]}` will\nonly return paused containers.\n\nAvailable filters:\n\n- `ancestor`=(`<image-name>[:<tag>]`, `<image id>`, or `<image@digest>`)\n- `before`=(`<container id>` or `<container name>`)\n- `expose`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)\n- `exited=<int>` containers with exit code of `<int>`\n- `health`=(`starting`|`healthy`|`unhealthy`|`none`)\n- `id=<ID>` a container's ID\n- `isolation=`(`default`|`process`|`hyperv`) (Windows daemon only)\n- `is-task=`(`true`|`false`)\n- `label=key` or `label=\"key=value\"` of a container label\n- `name=<name>` a container's name\n- `network`=(`<network id>` or `<network name>`)\n- `publish`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)\n- `since`=(`<container id>` or `<container name>`)\n- `status=`(`created`|`restarting`|`running`|`removing`|`paused`|`exited`|`dead`)\n- `volume`=(`<volume name>` or `<mount point destination>`)\n"
								}
							]
						},
						"description": "Returns a list of containers. For details on the format, see the\n[inspect endpoint](#operation/ContainerInspect).\n\nNote that it uses a different, smaller representation of a container\nthan inspecting a single container. For example, the list of linked\ncontainers is not propagated .\n"
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/containers/json?all=false&limit=-74142093&size=false&filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										"json"
									],
									"query": [
										{
											"key": "all",
											"value": "false"
										},
										{
											"key": "limit",
											"value": "-74142093"
										},
										{
											"key": "size",
											"value": "false"
										},
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"Id\": \"8dfafdbc3a40\",\n    \"Names\": [\n      \"/boring_feynman\"\n    ],\n    \"Image\": \"ubuntu:latest\",\n    \"ImageID\": \"d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82\",\n    \"Command\": \"echo 1\",\n    \"Created\": 1367854155,\n    \"State\": \"Exited\",\n    \"Status\": \"Exit 0\",\n    \"Ports\": [\n      {\n        \"PrivatePort\": 2222,\n        \"PublicPort\": 3333,\n        \"Type\": \"tcp\"\n      }\n    ],\n    \"Labels\": {\n      \"com.example.vendor\": \"Acme\",\n      \"com.example.license\": \"GPL\",\n      \"com.example.version\": \"1.0\"\n    },\n    \"SizeRw\": 12288,\n    \"SizeRootFs\": 0,\n    \"HostConfig\": {\n      \"NetworkMode\": \"default\"\n    },\n    \"NetworkSettings\": {\n      \"Networks\": {\n        \"bridge\": {\n          \"NetworkID\": \"7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812\",\n          \"EndpointID\": \"2cdc4edb1ded3631c81f57966563e5c8525b81121bb3706a9a9a3ae102711f3f\",\n          \"Gateway\": \"172.17.0.1\",\n          \"IPAddress\": \"172.17.0.2\",\n          \"IPPrefixLen\": 16,\n          \"IPv6Gateway\": \"\",\n          \"GlobalIPv6Address\": \"\",\n          \"GlobalIPv6PrefixLen\": 0,\n          \"MacAddress\": \"02:42:ac:11:00:02\"\n        }\n      }\n    },\n    \"Mounts\": [\n      {\n        \"Name\": \"fac362...80535\",\n        \"Source\": \"/data\",\n        \"Destination\": \"/data\",\n        \"Driver\": \"local\",\n        \"Mode\": \"ro,Z\",\n        \"RW\": false,\n        \"Propagation\": \"\"\n      }\n    ]\n  },\n  {\n    \"Id\": \"9cd87474be90\",\n    \"Names\": [\n      \"/coolName\"\n    ],\n    \"Image\": \"ubuntu:latest\",\n    \"ImageID\": \"d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82\",\n    \"Command\": \"echo 222222\",\n    \"Created\": 1367854155,\n    \"State\": \"Exited\",\n    \"Status\": \"Exit 0\",\n    \"Ports\": [],\n    \"Labels\": {},\n    \"SizeRw\": 12288,\n    \"SizeRootFs\": 0,\n    \"HostConfig\": {\n      \"NetworkMode\": \"default\"\n    },\n    \"NetworkSettings\": {\n      \"Networks\": {\n        \"bridge\": {\n          \"NetworkID\": \"7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812\",\n          \"EndpointID\": \"88eaed7b37b38c2a3f0c4bc796494fdf51b270c2d22656412a2ca5d559a64d7a\",\n          \"Gateway\": \"172.17.0.1\",\n          \"IPAddress\": \"172.17.0.8\",\n          \"IPPrefixLen\": 16,\n          \"IPv6Gateway\": \"\",\n          \"GlobalIPv6Address\": \"\",\n          \"GlobalIPv6PrefixLen\": 0,\n          \"MacAddress\": \"02:42:ac:11:00:08\"\n        }\n      }\n    },\n    \"Mounts\": []\n  },\n  {\n    \"Id\": \"3176a2479c92\",\n    \"Names\": [\n      \"/sleepy_dog\"\n    ],\n    \"Image\": \"ubuntu:latest\",\n    \"ImageID\": \"d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82\",\n    \"Command\": \"echo 3333333333333333\",\n    \"Created\": 1367854154,\n    \"State\": \"Exited\",\n    \"Status\": \"Exit 0\",\n    \"Ports\": [],\n    \"Labels\": {},\n    \"SizeRw\": 12288,\n    \"SizeRootFs\": 0,\n    \"HostConfig\": {\n      \"NetworkMode\": \"default\"\n    },\n    \"NetworkSettings\": {\n      \"Networks\": {\n        \"bridge\": {\n          \"NetworkID\": \"7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812\",\n          \"EndpointID\": \"8b27c041c30326d59cd6e6f510d4f8d1d570a228466f956edf7815508f78e30d\",\n          \"Gateway\": \"172.17.0.1\",\n          \"IPAddress\": \"172.17.0.6\",\n          \"IPPrefixLen\": 16,\n          \"IPv6Gateway\": \"\",\n          \"GlobalIPv6Address\": \"\",\n          \"GlobalIPv6PrefixLen\": 0,\n          \"MacAddress\": \"02:42:ac:11:00:06\"\n        }\n      }\n    },\n    \"Mounts\": []\n  },\n  {\n    \"Id\": \"4cb07b47f9fb\",\n    \"Names\": [\n      \"/running_cat\"\n    ],\n    \"Image\": \"ubuntu:latest\",\n    \"ImageID\": \"d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82\",\n    \"Command\": \"echo 444444444444444444444444444444444\",\n    \"Created\": 1367854152,\n    \"State\": \"Exited\",\n    \"Status\": \"Exit 0\",\n    \"Ports\": [],\n    \"Labels\": {},\n    \"SizeRw\": 12288,\n    \"SizeRootFs\": 0,\n    \"HostConfig\": {\n      \"NetworkMode\": \"default\"\n    },\n    \"NetworkSettings\": {\n      \"Networks\": {\n        \"bridge\": {\n          \"NetworkID\": \"7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812\",\n          \"EndpointID\": \"d91c7b2f0644403d7ef3095985ea0e2370325cd2332ff3a3225c4247328e66e9\",\n          \"Gateway\": \"172.17.0.1\",\n          \"IPAddress\": \"172.17.0.5\",\n          \"IPPrefixLen\": 16,\n          \"IPv6Gateway\": \"\",\n          \"GlobalIPv6Address\": \"\",\n          \"GlobalIPv6PrefixLen\": 0,\n          \"MacAddress\": \"02:42:ac:11:00:05\"\n        }\n      }\n    },\n    \"Mounts\": []\n  }\n]"
						},
						{
							"name": "bad parameter",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/containers/json?all=false&limit=-74142093&size=false&filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										"json"
									],
									"query": [
										{
											"key": "all",
											"value": "false"
										},
										{
											"key": "limit",
											"value": "-74142093"
										},
										{
											"key": "size",
											"value": "false"
										},
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/containers/json?all=false&limit=-74142093&size=false&filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										"json"
									],
									"query": [
										{
											"key": "all",
											"value": "false"
										},
										{
											"key": "limit",
											"value": "-74142093"
										},
										{
											"key": "size",
											"value": "false"
										},
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Create a container",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Hostname\": \"439f4e91bd1d\",\n  \"Domainname\": \"velit laboris irure\",\n  \"User\": \"amet consequ\",\n  \"AttachStdin\": false,\n  \"AttachStdout\": true,\n  \"AttachStderr\": true,\n  \"ExposedPorts\": {\n    \"80/tcp\": {},\n    \"443/tcp\": {}\n  },\n  \"Tty\": false,\n  \"OpenStdin\": false,\n  \"StdinOnce\": false,\n  \"Env\": [\n    \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n  ],\n  \"Cmd\": [\n    \"/bin/sh\"\n  ],\n  \"Healthcheck\": {\n    \"Test\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"Interval\": -44735885,\n    \"Timeout\": 75497414,\n    \"Retries\": -58172573,\n    \"StartPeriod\": -1898448\n  },\n  \"ArgsEscaped\": false,\n  \"Image\": \"example-image:1.0\",\n  \"Volumes\": {\n    \"qui_8b\": {},\n    \"pariatur_c0b\": {}\n  },\n  \"WorkingDir\": \"/public/\",\n  \"NetworkDisabled\": true,\n  \"MacAddress\": \"dolor qui velit nisi nostrud\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"StopSignal\": \"SIGTERM\",\n  \"StopTimeout\": 10,\n  \"Shell\": [\n    \"/bin/sh\",\n    \"-c\"\n  ],\n  \"HostConfig\": {\n    \"CpuShares\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Memory\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CgroupParent\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioWeight\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioWeightDevice\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceReadBps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceWriteBps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceReadIOps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceWriteIOps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuPeriod\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuQuota\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuRealtimePeriod\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuRealtimeRuntime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpusetCpus\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpusetMems\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Devices\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"DeviceCgroupRules\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"DeviceRequests\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"KernelMemory\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"KernelMemoryTCP\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"MemoryReservation\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"MemorySwap\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"MemorySwappiness\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"NanoCpus\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"OomKillDisable\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Init\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"PidsLimit\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Ulimits\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuPercent\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"IOMaximumIOps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"IOMaximumBandwidth\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Binds\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"ContainerIDFile\": \"in sunt Ut\",\n    \"LogConfig\": {\n      \"Type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Config\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"NetworkMode\": \"tempor officia consec\",\n    \"PortBindings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"RestartPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"AutoRemove\": true,\n    \"VolumeDriver\": \"esse cupidatat velit in\",\n    \"VolumesFrom\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"Mounts\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"CapAdd\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"CapDrop\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"CgroupnsMode\": \"host\",\n    \"Dns\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"DnsOptions\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"DnsSearch\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"ExtraHosts\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"GroupAdd\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"IpcMode\": \"pariatur ex\",\n    \"Cgroup\": \"adipisicing qui\",\n    \"Links\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"OomScoreAdj\": 500,\n    \"PidMode\": \"enim tempor aliquip dolore cillum\",\n    \"Privileged\": true,\n    \"PublishAllPorts\": true,\n    \"ReadonlyRootfs\": false,\n    \"SecurityOpt\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"StorageOpt\": {\n      \"infe\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Tmpfs\": {\n      \"consequat3\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"UTSMode\": \"sint dolor cillum\",\n    \"UsernsMode\": \"elit officia\",\n    \"ShmSize\": 83584855,\n    \"Sysctls\": {\n      \"sunta91\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Runtime\": \"sit aliqua Ut\",\n    \"ConsoleSize\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"Isolation\": \"default\",\n    \"MaskedPaths\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"ReadonlyPaths\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  },\n  \"NetworkingConfig\": {\n    \"EndpointsConfig\": {\n      \"isolated_nw\": {\n        \"IPAMConfig\": {\n          \"IPv4Address\": \"172.20.30.33\",\n          \"IPv6Address\": \"2001:db8:abcd::3033\",\n          \"LinkLocalIPs\": [\n            \"169.254.34.68\",\n            \"fe80::3468\"\n          ]\n        },\n        \"Links\": [\n          \"container_1\",\n          \"container_2\"\n        ],\n        \"Aliases\": [\n          \"server_x\",\n          \"server_y\"\n        ]\n      }\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/containers/create?name=/WFNIfvBp8I6R&platform=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"containers",
								"create"
							],
							"query": [
								{
									"key": "name",
									"value": "/WFNIfvBp8I6R",
									"description": "Assign the specified name to the container. Must match\n`/?[a-zA-Z0-9][a-zA-Z0-9_.-]+`.\n"
								},
								{
									"key": "platform",
									"value": "",
									"description": "Platform in the format `os[/arch[/variant]]` used for image lookup.\n\nWhen specified, the daemon checks if the requested image is present\nin the local image cache with the given OS and Architecture, and\notherwise returns a `404` status.\n\nIf the option is not set, the host's native OS and Architecture are\nused to look up the image in the image cache. However, if no platform\nis passed and the given image does exist in the local image cache,\nbut its OS or architecture does not match, the container is created\nwith the available image, and a warning is added to the `Warnings`\nfield in the response, for example;\n\n    WARNING: The requested image's platform (linux/arm64/v8) does not\n             match the detected host platform (linux/amd64) and no\n             specific platform was requested\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "Container created successfully",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Hostname\": \"439f4e91bd1d\",\n  \"Domainname\": \"tempor iru\",\n  \"User\": \"veniam mollit\",\n  \"AttachStdin\": false,\n  \"AttachStdout\": true,\n  \"AttachStderr\": true,\n  \"ExposedPorts\": {\n    \"80/tcp\": {},\n    \"443/tcp\": {}\n  },\n  \"Tty\": false,\n  \"OpenStdin\": false,\n  \"StdinOnce\": false,\n  \"Env\": [\n    \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n  ],\n  \"Cmd\": [\n    \"/bin/sh\"\n  ],\n  \"Healthcheck\": {\n    \"Test\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"Interval\": -48652823,\n    \"Timeout\": -12692220,\n    \"Retries\": -50623284,\n    \"StartPeriod\": 38249638\n  },\n  \"ArgsEscaped\": false,\n  \"Image\": \"example-image:1.0\",\n  \"Volumes\": {\n    \"veniam9\": {},\n    \"amet6\": {}\n  },\n  \"WorkingDir\": \"/public/\",\n  \"NetworkDisabled\": true,\n  \"MacAddress\": \"sed laboris consequat exercitation magna\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"StopSignal\": \"SIGTERM\",\n  \"StopTimeout\": 10,\n  \"Shell\": [\n    \"/bin/sh\",\n    \"-c\"\n  ],\n  \"HostConfig\": {\n    \"CpuShares\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Memory\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CgroupParent\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioWeight\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioWeightDevice\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceReadBps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceWriteBps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceReadIOps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceWriteIOps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuPeriod\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuQuota\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuRealtimePeriod\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuRealtimeRuntime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpusetCpus\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpusetMems\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Devices\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"DeviceCgroupRules\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"DeviceRequests\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"KernelMemory\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"KernelMemoryTCP\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"MemoryReservation\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"MemorySwap\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"MemorySwappiness\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"NanoCpus\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"OomKillDisable\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Init\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"PidsLimit\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Ulimits\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuPercent\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"IOMaximumIOps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"IOMaximumBandwidth\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Binds\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"ContainerIDFile\": \"do deserunt\",\n    \"LogConfig\": {\n      \"Type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Config\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"NetworkMode\": \"proident culpa cupidatat laboris\",\n    \"PortBindings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"RestartPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"AutoRemove\": false,\n    \"VolumeDriver\": \"est qui in pariatur\",\n    \"VolumesFrom\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"Mounts\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"CapAdd\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"CapDrop\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"CgroupnsMode\": \"private\",\n    \"Dns\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"DnsOptions\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"DnsSearch\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"ExtraHosts\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"GroupAdd\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"IpcMode\": \"consequat tempor enim sit\",\n    \"Cgroup\": \"qui elit\",\n    \"Links\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"OomScoreAdj\": 500,\n    \"PidMode\": \"cillum incididunt officia reprehenderit\",\n    \"Privileged\": false,\n    \"PublishAllPorts\": false,\n    \"ReadonlyRootfs\": false,\n    \"SecurityOpt\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"StorageOpt\": {\n      \"tempor4\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"sinta\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Tmpfs\": {\n      \"nisi_3\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"aliquip_44\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"UTSMode\": \"ut adipisicing exercitation quis qui\",\n    \"UsernsMode\": \"commodo aliqua tempor proident\",\n    \"ShmSize\": 96614252,\n    \"Sysctls\": {\n      \"cillum_16\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Runtime\": \"exercitation elit u\",\n    \"ConsoleSize\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"Isolation\": \"process\",\n    \"MaskedPaths\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"ReadonlyPaths\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  },\n  \"NetworkingConfig\": {\n    \"EndpointsConfig\": {\n      \"isolated_nw\": {\n        \"IPAMConfig\": {\n          \"IPv4Address\": \"172.20.30.33\",\n          \"IPv6Address\": \"2001:db8:abcd::3033\",\n          \"LinkLocalIPs\": [\n            \"169.254.34.68\",\n            \"fe80::3468\"\n          ]\n        },\n        \"Links\": [\n          \"container_1\",\n          \"container_2\"\n        ],\n        \"Aliases\": [\n          \"server_x\",\n          \"server_y\"\n        ]\n      }\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/containers/create?name=/WFNIfvBp8I6R&platform=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										"create"
									],
									"query": [
										{
											"key": "name",
											"value": "/WFNIfvBp8I6R"
										},
										{
											"key": "platform",
											"value": ""
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"Id\": \"e90e34656806\",\n  \"Warnings\": []\n}"
						},
						{
							"name": "bad parameter",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Hostname\": \"439f4e91bd1d\",\n  \"Domainname\": \"tempor iru\",\n  \"User\": \"veniam mollit\",\n  \"AttachStdin\": false,\n  \"AttachStdout\": true,\n  \"AttachStderr\": true,\n  \"ExposedPorts\": {\n    \"80/tcp\": {},\n    \"443/tcp\": {}\n  },\n  \"Tty\": false,\n  \"OpenStdin\": false,\n  \"StdinOnce\": false,\n  \"Env\": [\n    \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n  ],\n  \"Cmd\": [\n    \"/bin/sh\"\n  ],\n  \"Healthcheck\": {\n    \"Test\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"Interval\": -48652823,\n    \"Timeout\": -12692220,\n    \"Retries\": -50623284,\n    \"StartPeriod\": 38249638\n  },\n  \"ArgsEscaped\": false,\n  \"Image\": \"example-image:1.0\",\n  \"Volumes\": {\n    \"veniam9\": {},\n    \"amet6\": {}\n  },\n  \"WorkingDir\": \"/public/\",\n  \"NetworkDisabled\": true,\n  \"MacAddress\": \"sed laboris consequat exercitation magna\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"StopSignal\": \"SIGTERM\",\n  \"StopTimeout\": 10,\n  \"Shell\": [\n    \"/bin/sh\",\n    \"-c\"\n  ],\n  \"HostConfig\": {\n    \"CpuShares\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Memory\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CgroupParent\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioWeight\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioWeightDevice\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceReadBps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceWriteBps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceReadIOps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceWriteIOps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuPeriod\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuQuota\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuRealtimePeriod\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuRealtimeRuntime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpusetCpus\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpusetMems\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Devices\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"DeviceCgroupRules\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"DeviceRequests\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"KernelMemory\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"KernelMemoryTCP\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"MemoryReservation\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"MemorySwap\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"MemorySwappiness\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"NanoCpus\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"OomKillDisable\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Init\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"PidsLimit\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Ulimits\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuPercent\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"IOMaximumIOps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"IOMaximumBandwidth\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Binds\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"ContainerIDFile\": \"do deserunt\",\n    \"LogConfig\": {\n      \"Type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Config\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"NetworkMode\": \"proident culpa cupidatat laboris\",\n    \"PortBindings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"RestartPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"AutoRemove\": false,\n    \"VolumeDriver\": \"est qui in pariatur\",\n    \"VolumesFrom\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"Mounts\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"CapAdd\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"CapDrop\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"CgroupnsMode\": \"private\",\n    \"Dns\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"DnsOptions\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"DnsSearch\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"ExtraHosts\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"GroupAdd\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"IpcMode\": \"consequat tempor enim sit\",\n    \"Cgroup\": \"qui elit\",\n    \"Links\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"OomScoreAdj\": 500,\n    \"PidMode\": \"cillum incididunt officia reprehenderit\",\n    \"Privileged\": false,\n    \"PublishAllPorts\": false,\n    \"ReadonlyRootfs\": false,\n    \"SecurityOpt\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"StorageOpt\": {\n      \"tempor4\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"sinta\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Tmpfs\": {\n      \"nisi_3\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"aliquip_44\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"UTSMode\": \"ut adipisicing exercitation quis qui\",\n    \"UsernsMode\": \"commodo aliqua tempor proident\",\n    \"ShmSize\": 96614252,\n    \"Sysctls\": {\n      \"cillum_16\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Runtime\": \"exercitation elit u\",\n    \"ConsoleSize\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"Isolation\": \"process\",\n    \"MaskedPaths\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"ReadonlyPaths\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  },\n  \"NetworkingConfig\": {\n    \"EndpointsConfig\": {\n      \"isolated_nw\": {\n        \"IPAMConfig\": {\n          \"IPv4Address\": \"172.20.30.33\",\n          \"IPv6Address\": \"2001:db8:abcd::3033\",\n          \"LinkLocalIPs\": [\n            \"169.254.34.68\",\n            \"fe80::3468\"\n          ]\n        },\n        \"Links\": [\n          \"container_1\",\n          \"container_2\"\n        ],\n        \"Aliases\": [\n          \"server_x\",\n          \"server_y\"\n        ]\n      }\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/containers/create?name=/WFNIfvBp8I6R&platform=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										"create"
									],
									"query": [
										{
											"key": "name",
											"value": "/WFNIfvBp8I6R"
										},
										{
											"key": "platform",
											"value": ""
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "no such image",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Hostname\": \"439f4e91bd1d\",\n  \"Domainname\": \"tempor iru\",\n  \"User\": \"veniam mollit\",\n  \"AttachStdin\": false,\n  \"AttachStdout\": true,\n  \"AttachStderr\": true,\n  \"ExposedPorts\": {\n    \"80/tcp\": {},\n    \"443/tcp\": {}\n  },\n  \"Tty\": false,\n  \"OpenStdin\": false,\n  \"StdinOnce\": false,\n  \"Env\": [\n    \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n  ],\n  \"Cmd\": [\n    \"/bin/sh\"\n  ],\n  \"Healthcheck\": {\n    \"Test\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"Interval\": -48652823,\n    \"Timeout\": -12692220,\n    \"Retries\": -50623284,\n    \"StartPeriod\": 38249638\n  },\n  \"ArgsEscaped\": false,\n  \"Image\": \"example-image:1.0\",\n  \"Volumes\": {\n    \"veniam9\": {},\n    \"amet6\": {}\n  },\n  \"WorkingDir\": \"/public/\",\n  \"NetworkDisabled\": true,\n  \"MacAddress\": \"sed laboris consequat exercitation magna\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"StopSignal\": \"SIGTERM\",\n  \"StopTimeout\": 10,\n  \"Shell\": [\n    \"/bin/sh\",\n    \"-c\"\n  ],\n  \"HostConfig\": {\n    \"CpuShares\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Memory\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CgroupParent\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioWeight\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioWeightDevice\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceReadBps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceWriteBps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceReadIOps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceWriteIOps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuPeriod\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuQuota\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuRealtimePeriod\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuRealtimeRuntime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpusetCpus\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpusetMems\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Devices\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"DeviceCgroupRules\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"DeviceRequests\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"KernelMemory\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"KernelMemoryTCP\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"MemoryReservation\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"MemorySwap\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"MemorySwappiness\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"NanoCpus\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"OomKillDisable\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Init\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"PidsLimit\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Ulimits\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuPercent\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"IOMaximumIOps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"IOMaximumBandwidth\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Binds\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"ContainerIDFile\": \"do deserunt\",\n    \"LogConfig\": {\n      \"Type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Config\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"NetworkMode\": \"proident culpa cupidatat laboris\",\n    \"PortBindings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"RestartPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"AutoRemove\": false,\n    \"VolumeDriver\": \"est qui in pariatur\",\n    \"VolumesFrom\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"Mounts\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"CapAdd\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"CapDrop\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"CgroupnsMode\": \"private\",\n    \"Dns\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"DnsOptions\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"DnsSearch\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"ExtraHosts\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"GroupAdd\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"IpcMode\": \"consequat tempor enim sit\",\n    \"Cgroup\": \"qui elit\",\n    \"Links\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"OomScoreAdj\": 500,\n    \"PidMode\": \"cillum incididunt officia reprehenderit\",\n    \"Privileged\": false,\n    \"PublishAllPorts\": false,\n    \"ReadonlyRootfs\": false,\n    \"SecurityOpt\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"StorageOpt\": {\n      \"tempor4\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"sinta\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Tmpfs\": {\n      \"nisi_3\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"aliquip_44\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"UTSMode\": \"ut adipisicing exercitation quis qui\",\n    \"UsernsMode\": \"commodo aliqua tempor proident\",\n    \"ShmSize\": 96614252,\n    \"Sysctls\": {\n      \"cillum_16\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Runtime\": \"exercitation elit u\",\n    \"ConsoleSize\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"Isolation\": \"process\",\n    \"MaskedPaths\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"ReadonlyPaths\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  },\n  \"NetworkingConfig\": {\n    \"EndpointsConfig\": {\n      \"isolated_nw\": {\n        \"IPAMConfig\": {\n          \"IPv4Address\": \"172.20.30.33\",\n          \"IPv6Address\": \"2001:db8:abcd::3033\",\n          \"LinkLocalIPs\": [\n            \"169.254.34.68\",\n            \"fe80::3468\"\n          ]\n        },\n        \"Links\": [\n          \"container_1\",\n          \"container_2\"\n        ],\n        \"Aliases\": [\n          \"server_x\",\n          \"server_y\"\n        ]\n      }\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/containers/create?name=/WFNIfvBp8I6R&platform=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										"create"
									],
									"query": [
										{
											"key": "name",
											"value": "/WFNIfvBp8I6R"
										},
										{
											"key": "platform",
											"value": ""
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"No such image: c2ada9df5af8\"\n}"
						},
						{
							"name": "conflict",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Hostname\": \"439f4e91bd1d\",\n  \"Domainname\": \"tempor iru\",\n  \"User\": \"veniam mollit\",\n  \"AttachStdin\": false,\n  \"AttachStdout\": true,\n  \"AttachStderr\": true,\n  \"ExposedPorts\": {\n    \"80/tcp\": {},\n    \"443/tcp\": {}\n  },\n  \"Tty\": false,\n  \"OpenStdin\": false,\n  \"StdinOnce\": false,\n  \"Env\": [\n    \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n  ],\n  \"Cmd\": [\n    \"/bin/sh\"\n  ],\n  \"Healthcheck\": {\n    \"Test\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"Interval\": -48652823,\n    \"Timeout\": -12692220,\n    \"Retries\": -50623284,\n    \"StartPeriod\": 38249638\n  },\n  \"ArgsEscaped\": false,\n  \"Image\": \"example-image:1.0\",\n  \"Volumes\": {\n    \"veniam9\": {},\n    \"amet6\": {}\n  },\n  \"WorkingDir\": \"/public/\",\n  \"NetworkDisabled\": true,\n  \"MacAddress\": \"sed laboris consequat exercitation magna\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"StopSignal\": \"SIGTERM\",\n  \"StopTimeout\": 10,\n  \"Shell\": [\n    \"/bin/sh\",\n    \"-c\"\n  ],\n  \"HostConfig\": {\n    \"CpuShares\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Memory\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CgroupParent\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioWeight\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioWeightDevice\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceReadBps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceWriteBps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceReadIOps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceWriteIOps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuPeriod\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuQuota\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuRealtimePeriod\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuRealtimeRuntime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpusetCpus\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpusetMems\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Devices\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"DeviceCgroupRules\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"DeviceRequests\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"KernelMemory\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"KernelMemoryTCP\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"MemoryReservation\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"MemorySwap\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"MemorySwappiness\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"NanoCpus\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"OomKillDisable\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Init\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"PidsLimit\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Ulimits\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuPercent\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"IOMaximumIOps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"IOMaximumBandwidth\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Binds\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"ContainerIDFile\": \"do deserunt\",\n    \"LogConfig\": {\n      \"Type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Config\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"NetworkMode\": \"proident culpa cupidatat laboris\",\n    \"PortBindings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"RestartPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"AutoRemove\": false,\n    \"VolumeDriver\": \"est qui in pariatur\",\n    \"VolumesFrom\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"Mounts\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"CapAdd\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"CapDrop\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"CgroupnsMode\": \"private\",\n    \"Dns\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"DnsOptions\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"DnsSearch\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"ExtraHosts\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"GroupAdd\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"IpcMode\": \"consequat tempor enim sit\",\n    \"Cgroup\": \"qui elit\",\n    \"Links\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"OomScoreAdj\": 500,\n    \"PidMode\": \"cillum incididunt officia reprehenderit\",\n    \"Privileged\": false,\n    \"PublishAllPorts\": false,\n    \"ReadonlyRootfs\": false,\n    \"SecurityOpt\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"StorageOpt\": {\n      \"tempor4\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"sinta\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Tmpfs\": {\n      \"nisi_3\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"aliquip_44\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"UTSMode\": \"ut adipisicing exercitation quis qui\",\n    \"UsernsMode\": \"commodo aliqua tempor proident\",\n    \"ShmSize\": 96614252,\n    \"Sysctls\": {\n      \"cillum_16\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Runtime\": \"exercitation elit u\",\n    \"ConsoleSize\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"Isolation\": \"process\",\n    \"MaskedPaths\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"ReadonlyPaths\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  },\n  \"NetworkingConfig\": {\n    \"EndpointsConfig\": {\n      \"isolated_nw\": {\n        \"IPAMConfig\": {\n          \"IPv4Address\": \"172.20.30.33\",\n          \"IPv6Address\": \"2001:db8:abcd::3033\",\n          \"LinkLocalIPs\": [\n            \"169.254.34.68\",\n            \"fe80::3468\"\n          ]\n        },\n        \"Links\": [\n          \"container_1\",\n          \"container_2\"\n        ],\n        \"Aliases\": [\n          \"server_x\",\n          \"server_y\"\n        ]\n      }\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/containers/create?name=/WFNIfvBp8I6R&platform=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										"create"
									],
									"query": [
										{
											"key": "name",
											"value": "/WFNIfvBp8I6R"
										},
										{
											"key": "platform",
											"value": ""
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Hostname\": \"439f4e91bd1d\",\n  \"Domainname\": \"tempor iru\",\n  \"User\": \"veniam mollit\",\n  \"AttachStdin\": false,\n  \"AttachStdout\": true,\n  \"AttachStderr\": true,\n  \"ExposedPorts\": {\n    \"80/tcp\": {},\n    \"443/tcp\": {}\n  },\n  \"Tty\": false,\n  \"OpenStdin\": false,\n  \"StdinOnce\": false,\n  \"Env\": [\n    \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n  ],\n  \"Cmd\": [\n    \"/bin/sh\"\n  ],\n  \"Healthcheck\": {\n    \"Test\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"Interval\": -48652823,\n    \"Timeout\": -12692220,\n    \"Retries\": -50623284,\n    \"StartPeriod\": 38249638\n  },\n  \"ArgsEscaped\": false,\n  \"Image\": \"example-image:1.0\",\n  \"Volumes\": {\n    \"veniam9\": {},\n    \"amet6\": {}\n  },\n  \"WorkingDir\": \"/public/\",\n  \"NetworkDisabled\": true,\n  \"MacAddress\": \"sed laboris consequat exercitation magna\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"StopSignal\": \"SIGTERM\",\n  \"StopTimeout\": 10,\n  \"Shell\": [\n    \"/bin/sh\",\n    \"-c\"\n  ],\n  \"HostConfig\": {\n    \"CpuShares\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Memory\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CgroupParent\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioWeight\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioWeightDevice\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceReadBps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceWriteBps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceReadIOps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"BlkioDeviceWriteIOps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuPeriod\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuQuota\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuRealtimePeriod\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuRealtimeRuntime\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpusetCpus\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpusetMems\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Devices\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"DeviceCgroupRules\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"DeviceRequests\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"KernelMemory\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"KernelMemoryTCP\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"MemoryReservation\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"MemorySwap\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"MemorySwappiness\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"NanoCpus\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"OomKillDisable\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Init\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"PidsLimit\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Ulimits\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CpuPercent\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"IOMaximumIOps\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"IOMaximumBandwidth\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Binds\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"ContainerIDFile\": \"do deserunt\",\n    \"LogConfig\": {\n      \"Type\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Config\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"NetworkMode\": \"proident culpa cupidatat laboris\",\n    \"PortBindings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"RestartPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"AutoRemove\": false,\n    \"VolumeDriver\": \"est qui in pariatur\",\n    \"VolumesFrom\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"Mounts\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"CapAdd\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"CapDrop\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"CgroupnsMode\": \"private\",\n    \"Dns\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"DnsOptions\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"DnsSearch\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"ExtraHosts\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"GroupAdd\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"IpcMode\": \"consequat tempor enim sit\",\n    \"Cgroup\": \"qui elit\",\n    \"Links\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"OomScoreAdj\": 500,\n    \"PidMode\": \"cillum incididunt officia reprehenderit\",\n    \"Privileged\": false,\n    \"PublishAllPorts\": false,\n    \"ReadonlyRootfs\": false,\n    \"SecurityOpt\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"StorageOpt\": {\n      \"tempor4\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"sinta\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Tmpfs\": {\n      \"nisi_3\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"aliquip_44\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"UTSMode\": \"ut adipisicing exercitation quis qui\",\n    \"UsernsMode\": \"commodo aliqua tempor proident\",\n    \"ShmSize\": 96614252,\n    \"Sysctls\": {\n      \"cillum_16\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Runtime\": \"exercitation elit u\",\n    \"ConsoleSize\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"Isolation\": \"process\",\n    \"MaskedPaths\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"ReadonlyPaths\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  },\n  \"NetworkingConfig\": {\n    \"EndpointsConfig\": {\n      \"isolated_nw\": {\n        \"IPAMConfig\": {\n          \"IPv4Address\": \"172.20.30.33\",\n          \"IPv6Address\": \"2001:db8:abcd::3033\",\n          \"LinkLocalIPs\": [\n            \"169.254.34.68\",\n            \"fe80::3468\"\n          ]\n        },\n        \"Links\": [\n          \"container_1\",\n          \"container_2\"\n        ],\n        \"Aliases\": [\n          \"server_x\",\n          \"server_y\"\n        ]\n      }\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/containers/create?name=/WFNIfvBp8I6R&platform=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										"create"
									],
									"query": [
										{
											"key": "name",
											"value": "/WFNIfvBp8I6R"
										},
										{
											"key": "platform",
											"value": ""
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Delete stopped containers",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/containers/prune?filters=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"containers",
								"prune"
							],
							"query": [
								{
									"key": "filters",
									"value": "anim incididunt",
									"description": "Filters to process on the prune list, encoded as JSON (a `map[string][]string`).\n\nAvailable filters:\n- `until=<timestamp>` Prune containers created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.\n- `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune containers with (or without, in case `label!=...` is used) the specified labels.\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "No error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/containers/prune?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										"prune"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"ContainersDeleted\": [\n    \"non sunt in exercitation ipsum\",\n    \"reprehenderit nulla cupidatat\"\n  ],\n  \"SpaceReclaimed\": 62493158\n}"
						},
						{
							"name": "Server error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/containers/prune?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"containers",
										"prune"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "images",
			"item": [
				{
					"name": "{name}",
					"item": [
						{
							"name": "Remove an image",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/images/:name?force=false&noprune=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"images",
										":name"
									],
									"query": [
										{
											"key": "force",
											"value": "false",
											"description": "Remove the image even if it is being used by stopped containers or has other tags"
										},
										{
											"key": "noprune",
											"value": "false",
											"description": "Do not delete untagged parent images"
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "anim incididunt",
											"description": "(Required) Image name or ID"
										}
									]
								},
								"description": "Remove an image, along with any untagged parent images that were\nreferenced by that image.\n\nImages can't be removed if they have descendant images, are being\nused by a running container or are being used by a build.\n"
							},
							"response": [
								{
									"name": "The image was deleted successfully",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/images/:name?force=false&noprune=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												},
												{
													"key": "noprune",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or ID"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"Untagged\": \"3e2f21a89f\"\n  },\n  {\n    \"Deleted\": \"3e2f21a89f\"\n  },\n  {\n    \"Deleted\": \"53b4f83ac9\"\n  }\n]"
								},
								{
									"name": "No such image",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/images/:name?force=false&noprune=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												},
												{
													"key": "noprune",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or ID"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "Conflict",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/images/:name?force=false&noprune=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												},
												{
													"key": "noprune",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or ID"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "Server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/images/:name?force=false&noprune=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												},
												{
													"key": "noprune",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or ID"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Inspect an image",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/images/:name/json",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"images",
										":name",
										"json"
									],
									"variable": [
										{
											"key": "name",
											"value": "anim incididunt",
											"description": "(Required) Image name or id"
										}
									]
								},
								"description": "Return low-level information about an image."
							},
							"response": [
								{
									"name": "No error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/images/:name/json",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name",
												"json"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"Id\": \"sha256:ec3f0931a6e6b6855d76b2d7b0be30e81860baccd891b2e243280bf1cd8ad710\",\n  \"RepoTags\": [\n    \"example:1.0\",\n    \"example:latest\",\n    \"example:stable\",\n    \"internal.registry.example.com:5000/example:1.0\"\n  ],\n  \"RepoDigests\": [\n    \"example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb\",\n    \"internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578\"\n  ],\n  \"Parent\": \"\",\n  \"Comment\": \"\",\n  \"Created\": \"2022-02-04T21:20:12.497794809Z\",\n  \"Container\": \"65974bc86f1770ae4bff79f651ebdbce166ae9aada632ee3fa9af3a264911735\",\n  \"ContainerConfig\": {\n    \"Hostname\": \"439f4e91bd1d\",\n    \"Domainname\": \"in in pariatur Lorem\",\n    \"User\": \"dolor eu eiusmod\",\n    \"AttachStdin\": false,\n    \"AttachStdout\": true,\n    \"AttachStderr\": true,\n    \"ExposedPorts\": {\n      \"80/tcp\": {},\n      \"443/tcp\": {}\n    },\n    \"Tty\": false,\n    \"OpenStdin\": false,\n    \"StdinOnce\": false,\n    \"Env\": [\n      \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n    ],\n    \"Cmd\": [\n      \"/bin/sh\"\n    ],\n    \"Healthcheck\": {\n      \"Test\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Interval\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Timeout\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Retries\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"StartPeriod\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"ArgsEscaped\": false,\n    \"Image\": \"example-image:1.0\",\n    \"Volumes\": {\n      \"labore9b1\": {},\n      \"reprehenderitc\": {}\n    },\n    \"WorkingDir\": \"/public/\",\n    \"NetworkDisabled\": true,\n    \"MacAddress\": \"officia sit tempor id in\",\n    \"Labels\": {\n      \"com.example.some-label\": \"some-value\",\n      \"com.example.some-other-label\": \"some-other-value\"\n    },\n    \"StopSignal\": \"SIGTERM\",\n    \"StopTimeout\": 10,\n    \"Shell\": [\n      \"/bin/sh\",\n      \"-c\"\n    ]\n  },\n  \"DockerVersion\": \"20.10.7\",\n  \"Author\": \"\",\n  \"Config\": {\n    \"Hostname\": \"439f4e91bd1d\",\n    \"Domainname\": \"incididunt in\",\n    \"User\": \"laboris fugiat magna occaecat qui\",\n    \"AttachStdin\": false,\n    \"AttachStdout\": true,\n    \"AttachStderr\": true,\n    \"ExposedPorts\": {\n      \"80/tcp\": {},\n      \"443/tcp\": {}\n    },\n    \"Tty\": false,\n    \"OpenStdin\": false,\n    \"StdinOnce\": false,\n    \"Env\": [\n      \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n    ],\n    \"Cmd\": [\n      \"/bin/sh\"\n    ],\n    \"Healthcheck\": {\n      \"Test\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Interval\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Timeout\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Retries\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"StartPeriod\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"ArgsEscaped\": false,\n    \"Image\": \"example-image:1.0\",\n    \"Volumes\": {\n      \"tempor06\": {}\n    },\n    \"WorkingDir\": \"/public/\",\n    \"NetworkDisabled\": false,\n    \"MacAddress\": \"ad in consequat dolore Ut\",\n    \"Labels\": {\n      \"com.example.some-label\": \"some-value\",\n      \"com.example.some-other-label\": \"some-other-value\"\n    },\n    \"StopSignal\": \"SIGTERM\",\n    \"StopTimeout\": 10,\n    \"Shell\": [\n      \"/bin/sh\",\n      \"-c\"\n    ]\n  },\n  \"Architecture\": \"arm\",\n  \"Variant\": \"v7\",\n  \"Os\": \"linux\",\n  \"OsVersion\": \"\",\n  \"Size\": 1239828,\n  \"VirtualSize\": 1239828,\n  \"GraphDriver\": {\n    \"Name\": \"overlay2\",\n    \"Data\": {\n      \"MergedDir\": \"/var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/merged\",\n      \"UpperDir\": \"/var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/diff\",\n      \"WorkDir\": \"/var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/work\"\n    }\n  },\n  \"RootFS\": {\n    \"Type\": \"layers\",\n    \"Layers\": [\n      \"sha256:1834950e52ce4d5a88a1bbd131c537f4d0e56d10ff0dd69e66be3b7dfa9df7e6\",\n      \"sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\"\n    ]\n  },\n  \"Metadata\": {\n    \"LastTagTime\": \"2022-02-28T14:40:02.623929178Z\"\n  }\n}"
								},
								{
									"name": "No such image",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/images/:name/json",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name",
												"json"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such image: someimage (tag: latest)\"\n}"
								},
								{
									"name": "Server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/images/:name/json",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name",
												"json"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Get the history of an image",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/images/:name/history",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"images",
										":name",
										"history"
									],
									"variable": [
										{
											"key": "name",
											"value": "anim incididunt",
											"description": "(Required) Image name or ID"
										}
									]
								},
								"description": "Return parent layers of an image."
							},
							"response": [
								{
									"name": "List of image layers",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/images/:name/history",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name",
												"history"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or ID"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"Id\": \"3db9c44f45209632d6050b35958829c3a2aa256d81b9a7be45b362ff85c54710\",\n    \"Created\": 1398108230,\n    \"CreatedBy\": \"/bin/sh -c #(nop) ADD file:eb15dbd63394e063b805a3c32ca7bf0266ef64676d5a6fab4801f2e81e2a5148 in /\",\n    \"Tags\": [\n      \"ubuntu:lucid\",\n      \"ubuntu:10.04\"\n    ],\n    \"Size\": 182964289,\n    \"Comment\": \"\"\n  },\n  {\n    \"Id\": \"6cfa4d1f33fb861d4d114f43b25abd0ac737509268065cdfd69d544a59c85ab8\",\n    \"Created\": 1398108222,\n    \"CreatedBy\": \"/bin/sh -c #(nop) MAINTAINER Tianon Gravi <admwiggin@gmail.com> - mkimage-debootstrap.sh -i iproute,iputils-ping,ubuntu-minimal -t lucid.tar.xz lucid http://archive.ubuntu.com/ubuntu/\",\n    \"Tags\": [],\n    \"Size\": 0,\n    \"Comment\": \"\"\n  },\n  {\n    \"Id\": \"511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158\",\n    \"Created\": 1371157430,\n    \"CreatedBy\": \"\",\n    \"Tags\": [\n      \"scratch12:latest\",\n      \"scratch:latest\"\n    ],\n    \"Size\": 0,\n    \"Comment\": \"Imported from -\"\n  }\n]"
								},
								{
									"name": "No such image",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/images/:name/history",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name",
												"history"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or ID"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "Server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/images/:name/history",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name",
												"history"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or ID"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Push an image",
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) A base64url-encoded auth configuration.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
										"key": "X-Registry-Auth",
										"value": "anim incididunt"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/images/:name/push?tag=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"images",
										":name",
										"push"
									],
									"query": [
										{
											"key": "tag",
											"value": "anim incididunt",
											"description": "The tag to associate with the image on the registry."
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "anim incididunt",
											"description": "(Required) Image name or ID."
										}
									]
								},
								"description": "Push an image to a registry.\n\nIf you wish to push an image on to a private registry, that image must\nalready have a tag which references the registry. For example,\n`registry.example.com/myimage:latest`.\n\nThe push is cancelled if the HTTP connection is closed.\n"
							},
							"response": [
								{
									"name": "No error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) A base64url-encoded auth configuration.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
												"key": "X-Registry-Auth",
												"value": "anim incididunt"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/images/:name/push?tag=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name",
												"push"
											],
											"query": [
												{
													"key": "tag",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "No such image",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) A base64url-encoded auth configuration.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
												"key": "X-Registry-Auth",
												"value": "anim incididunt"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/images/:name/push?tag=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name",
												"push"
											],
											"query": [
												{
													"key": "tag",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or ID."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "Server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) A base64url-encoded auth configuration.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
												"key": "X-Registry-Auth",
												"value": "anim incididunt"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/images/:name/push?tag=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name",
												"push"
											],
											"query": [
												{
													"key": "tag",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or ID."
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Tag an image",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/images/:name/tag?repo=anim incididunt&tag=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"images",
										":name",
										"tag"
									],
									"query": [
										{
											"key": "repo",
											"value": "anim incididunt",
											"description": "The repository to tag in. For example, `someuser/someimage`."
										},
										{
											"key": "tag",
											"value": "anim incididunt",
											"description": "The name of the new tag."
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "anim incididunt",
											"description": "(Required) Image name or ID to tag."
										}
									]
								},
								"description": "Tag an image so that it becomes part of a repository."
							},
							"response": [
								{
									"name": "No error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/images/:name/tag?repo=anim incididunt&tag=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name",
												"tag"
											],
											"query": [
												{
													"key": "repo",
													"value": "anim incididunt"
												},
												{
													"key": "tag",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or ID to tag."
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad parameter",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/images/:name/tag?repo=anim incididunt&tag=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name",
												"tag"
											],
											"query": [
												{
													"key": "repo",
													"value": "anim incididunt"
												},
												{
													"key": "tag",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or ID to tag."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "No such image",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/images/:name/tag?repo=anim incididunt&tag=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name",
												"tag"
											],
											"query": [
												{
													"key": "repo",
													"value": "anim incididunt"
												},
												{
													"key": "tag",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or ID to tag."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "Conflict",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/images/:name/tag?repo=anim incididunt&tag=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name",
												"tag"
											],
											"query": [
												{
													"key": "repo",
													"value": "anim incididunt"
												},
												{
													"key": "tag",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or ID to tag."
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "Server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/images/:name/tag?repo=anim incididunt&tag=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name",
												"tag"
											],
											"query": [
												{
													"key": "repo",
													"value": "anim incididunt"
												},
												{
													"key": "tag",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or ID to tag."
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Export an image",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/x-tar"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/images/:name/get",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"images",
										":name",
										"get"
									],
									"variable": [
										{
											"key": "name",
											"value": "anim incididunt",
											"description": "(Required) Image name or ID"
										}
									]
								},
								"description": "Get a tarball containing all images and metadata for a repository.\n\nIf `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.\n\n### Image tarball format\n\nAn image tarball contains one directory per image layer (named using its long ID), each containing these files:\n\n- `VERSION`: currently `1.0` - the file format version\n- `json`: detailed layer information, similar to `docker inspect layer_id`\n- `layer.tar`: A tarfile containing the filesystem changes in this layer\n\nThe `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.\n\nIf the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.\n\n```json\n{\n  \"hello-world\": {\n    \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"\n  }\n}\n```\n"
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/images/:name/get",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name",
												"get"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or ID"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/x-tar"
										}
									],
									"cookie": [],
									"body": "anim incididunt"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/images/:name/get",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"images",
												":name",
												"get"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Image name or ID"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/x-tar"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "List Images",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/images/json?all=false&filters=anim incididunt&digests=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"images",
								"json"
							],
							"query": [
								{
									"key": "all",
									"value": "false",
									"description": "Show all images. Only images from a final layer (no children) are shown by default."
								},
								{
									"key": "filters",
									"value": "anim incididunt",
									"description": "A JSON encoded value of the filters (a `map[string][]string`) to\nprocess on the images list.\n\nAvailable filters:\n\n- `before`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)\n- `dangling=true`\n- `label=key` or `label=\"key=value\"` of an image label\n- `reference`=(`<image-name>[:<tag>]`)\n- `since`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)\n"
								},
								{
									"key": "digests",
									"value": "false",
									"description": "Show digest information as a `RepoDigests` field on each image."
								}
							]
						},
						"description": "Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image."
					},
					"response": [
						{
							"name": "Summary image data for the images matching the query",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/images/json?all=false&filters=anim incididunt&digests=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"images",
										"json"
									],
									"query": [
										{
											"key": "all",
											"value": "false"
										},
										{
											"key": "filters",
											"value": "anim incididunt"
										},
										{
											"key": "digests",
											"value": "false"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"Id\": \"sha256:ec3f0931a6e6b6855d76b2d7b0be30e81860baccd891b2e243280bf1cd8ad710\",\n    \"ParentId\": \"\",\n    \"RepoTags\": [\n      \"example:1.0\",\n      \"example:latest\",\n      \"example:stable\",\n      \"internal.registry.example.com:5000/example:1.0\"\n    ],\n    \"RepoDigests\": [\n      \"example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb\",\n      \"internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578\"\n    ],\n    \"Created\": -94695575,\n    \"Size\": 172064416,\n    \"SharedSize\": 1239828,\n    \"VirtualSize\": 172064416,\n    \"Labels\": {\n      \"com.example.some-label\": \"some-value\",\n      \"com.example.some-other-label\": \"some-other-value\"\n    },\n    \"Containers\": 2\n  },\n  {\n    \"Id\": \"sha256:ec3f0931a6e6b6855d76b2d7b0be30e81860baccd891b2e243280bf1cd8ad710\",\n    \"ParentId\": \"\",\n    \"RepoTags\": [\n      \"example:1.0\",\n      \"example:latest\",\n      \"example:stable\",\n      \"internal.registry.example.com:5000/example:1.0\"\n    ],\n    \"RepoDigests\": [\n      \"example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb\",\n      \"internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578\"\n    ],\n    \"Created\": 6594603,\n    \"Size\": 172064416,\n    \"SharedSize\": 1239828,\n    \"VirtualSize\": 172064416,\n    \"Labels\": {\n      \"com.example.some-label\": \"some-value\",\n      \"com.example.some-other-label\": \"some-other-value\"\n    },\n    \"Containers\": 2\n  }\n]"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/images/json?all=false&filters=anim incididunt&digests=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"images",
										"json"
									],
									"query": [
										{
											"key": "all",
											"value": "false"
										},
										{
											"key": "filters",
											"value": "anim incididunt"
										},
										{
											"key": "digests",
											"value": "false"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Create an image",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "A base64url-encoded auth configuration.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
								"key": "X-Registry-Auth",
								"value": "anim incididunt"
							},
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"anim incididunt\""
						},
						"url": {
							"raw": "{{baseUrl}}/images/create?fromImage=anim incididunt&fromSrc=anim incididunt&repo=anim incididunt&tag=anim incididunt&message=anim incididunt&changes=in,eiusmod sed laboris officia&platform=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"images",
								"create"
							],
							"query": [
								{
									"key": "fromImage",
									"value": "anim incididunt",
									"description": "Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed."
								},
								{
									"key": "fromSrc",
									"value": "anim incididunt",
									"description": "Source to import. The value may be a URL from which the image can be retrieved or `-` to read the image from the request body. This parameter may only be used when importing an image."
								},
								{
									"key": "repo",
									"value": "anim incididunt",
									"description": "Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image."
								},
								{
									"key": "tag",
									"value": "anim incididunt",
									"description": "Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled."
								},
								{
									"key": "message",
									"value": "anim incididunt",
									"description": "Set commit message for imported image."
								},
								{
									"key": "changes",
									"value": "in,eiusmod sed laboris officia",
									"description": "Apply `Dockerfile` instructions to the image that is created,\nfor example: `changes=ENV DEBUG=true`.\nNote that `ENV DEBUG=true` should be URI component encoded.\n\nSupported `Dockerfile` instructions:\n`CMD`|`ENTRYPOINT`|`ENV`|`EXPOSE`|`ONBUILD`|`USER`|`VOLUME`|`WORKDIR`\n"
								},
								{
									"key": "platform",
									"value": "",
									"description": "Platform in the format os[/arch[/variant]]"
								}
							]
						},
						"description": "Create an image by either pulling it from a registry or importing it."
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "A base64url-encoded auth configuration.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
										"key": "X-Registry-Auth",
										"value": "anim incididunt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"anim incididunt\""
								},
								"url": {
									"raw": "{{baseUrl}}/images/create?fromImage=anim incididunt&fromSrc=anim incididunt&repo=anim incididunt&tag=anim incididunt&message=anim incididunt&changes=commodo ut,reprehenderit sit voluptate&platform=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"images",
										"create"
									],
									"query": [
										{
											"key": "fromImage",
											"value": "anim incididunt"
										},
										{
											"key": "fromSrc",
											"value": "anim incididunt"
										},
										{
											"key": "repo",
											"value": "anim incididunt"
										},
										{
											"key": "tag",
											"value": "anim incididunt"
										},
										{
											"key": "message",
											"value": "anim incididunt"
										},
										{
											"key": "changes",
											"value": "commodo ut,reprehenderit sit voluptate"
										},
										{
											"key": "platform",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "repository does not exist or no read access",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "A base64url-encoded auth configuration.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
										"key": "X-Registry-Auth",
										"value": "anim incididunt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"anim incididunt\""
								},
								"url": {
									"raw": "{{baseUrl}}/images/create?fromImage=anim incididunt&fromSrc=anim incididunt&repo=anim incididunt&tag=anim incididunt&message=anim incididunt&changes=commodo ut,reprehenderit sit voluptate&platform=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"images",
										"create"
									],
									"query": [
										{
											"key": "fromImage",
											"value": "anim incididunt"
										},
										{
											"key": "fromSrc",
											"value": "anim incididunt"
										},
										{
											"key": "repo",
											"value": "anim incididunt"
										},
										{
											"key": "tag",
											"value": "anim incididunt"
										},
										{
											"key": "message",
											"value": "anim incididunt"
										},
										{
											"key": "changes",
											"value": "commodo ut,reprehenderit sit voluptate"
										},
										{
											"key": "platform",
											"value": ""
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "A base64url-encoded auth configuration.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
										"key": "X-Registry-Auth",
										"value": "anim incididunt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"anim incididunt\""
								},
								"url": {
									"raw": "{{baseUrl}}/images/create?fromImage=anim incididunt&fromSrc=anim incididunt&repo=anim incididunt&tag=anim incididunt&message=anim incididunt&changes=commodo ut,reprehenderit sit voluptate&platform=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"images",
										"create"
									],
									"query": [
										{
											"key": "fromImage",
											"value": "anim incididunt"
										},
										{
											"key": "fromSrc",
											"value": "anim incididunt"
										},
										{
											"key": "repo",
											"value": "anim incididunt"
										},
										{
											"key": "tag",
											"value": "anim incididunt"
										},
										{
											"key": "message",
											"value": "anim incididunt"
										},
										{
											"key": "changes",
											"value": "commodo ut,reprehenderit sit voluptate"
										},
										{
											"key": "platform",
											"value": ""
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Search images",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/images/search?term=anim incididunt&limit=-74142093&filters=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"images",
								"search"
							],
							"query": [
								{
									"key": "term",
									"value": "anim incididunt",
									"description": "(Required) Term to search"
								},
								{
									"key": "limit",
									"value": "-74142093",
									"description": "Maximum number of results to return"
								},
								{
									"key": "filters",
									"value": "anim incididunt",
									"description": "A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:\n\n- `is-automated=(true|false)`\n- `is-official=(true|false)`\n- `stars=<number>` Matches images that has at least 'number' stars.\n"
								}
							]
						},
						"description": "Search for an image on Docker Hub."
					},
					"response": [
						{
							"name": "No error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/images/search?term=anim incididunt&limit=-74142093&filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"images",
										"search"
									],
									"query": [
										{
											"key": "term",
											"value": "anim incididunt"
										},
										{
											"key": "limit",
											"value": "-74142093"
										},
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"description\": \"\",\n    \"is_official\": false,\n    \"is_automated\": false,\n    \"name\": \"wma55/u1210sshd\",\n    \"star_count\": 0\n  },\n  {\n    \"description\": \"\",\n    \"is_official\": false,\n    \"is_automated\": false,\n    \"name\": \"jdswinbank/sshd\",\n    \"star_count\": 0\n  },\n  {\n    \"description\": \"\",\n    \"is_official\": false,\n    \"is_automated\": false,\n    \"name\": \"vgauthier/sshd\",\n    \"star_count\": 0\n  }\n]"
						},
						{
							"name": "Server error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/images/search?term=anim incididunt&limit=-74142093&filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"images",
										"search"
									],
									"query": [
										{
											"key": "term",
											"value": "anim incididunt"
										},
										{
											"key": "limit",
											"value": "-74142093"
										},
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Delete unused images",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/images/prune?filters=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"images",
								"prune"
							],
							"query": [
								{
									"key": "filters",
									"value": "anim incididunt",
									"description": "Filters to process on the prune list, encoded as JSON (a `map[string][]string`). Available filters:\n\n- `dangling=<boolean>` When set to `true` (or `1`), prune only\n   unused *and* untagged images. When set to `false`\n   (or `0`), all unused images are pruned.\n- `until=<string>` Prune images created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.\n- `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune images with (or without, in case `label!=...` is used) the specified labels.\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "No error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/images/prune?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"images",
										"prune"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"ImagesDeleted\": [\n    {\n      \"Untagged\": \"quis sit ea sed\",\n      \"Deleted\": \"aliqua ullamco sint\"\n    },\n    {\n      \"Untagged\": \"sed Duis proident magna\",\n      \"Deleted\": \"eiusmod fugiat nulla dolore\"\n    }\n  ],\n  \"SpaceReclaimed\": -42669391\n}"
						},
						{
							"name": "Server error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/images/prune?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"images",
										"prune"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Export several images",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/x-tar"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/images/get?names=in,eiusmod sed laboris officia",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"images",
								"get"
							],
							"query": [
								{
									"key": "names",
									"value": "in,eiusmod sed laboris officia",
									"description": "Image names to filter by"
								}
							]
						},
						"description": "Get a tarball containing all images and metadata for several image\nrepositories.\n\nFor each value of the `names` parameter: if it is a specific name and\ntag (e.g. `ubuntu:latest`), then only that image (and its parents) are\nreturned; if it is an image ID, similarly only that image (and its parents)\nare returned and there would be no names referenced in the 'repositories'\nfile for this image ID.\n\nFor details on the format, see the [export image endpoint](#operation/ImageGet).\n"
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/images/get?names=commodo ut,reprehenderit sit voluptate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"images",
										"get"
									],
									"query": [
										{
											"key": "names",
											"value": "commodo ut,reprehenderit sit voluptate"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/x-tar"
								}
							],
							"cookie": [],
							"body": "anim incididunt"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/images/get?names=commodo ut,reprehenderit sit voluptate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"images",
										"get"
									],
									"query": [
										{
											"key": "names",
											"value": "commodo ut,reprehenderit sit voluptate"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/x-tar"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Import images",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-tar"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "{{baseUrl}}/images/load?quiet=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"images",
								"load"
							],
							"query": [
								{
									"key": "quiet",
									"value": "false",
									"description": "Suppress progress details during load."
								}
							]
						},
						"description": "Load a set of images and tags into a repository.\n\nFor details on the format, see the [export image endpoint](#operation/ImageGet).\n"
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {}
								},
								"url": {
									"raw": "{{baseUrl}}/images/load?quiet=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"images",
										"load"
									],
									"query": [
										{
											"key": "quiet",
											"value": "false"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {}
								},
								"url": {
									"raw": "{{baseUrl}}/images/load?quiet=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"images",
										"load"
									],
									"query": [
										{
											"key": "quiet",
											"value": "false"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "build",
			"item": [
				{
					"name": "Build an image",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.\n\nThe key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:\n\n```\n{\n  \"docker.example.com\": {\n    \"username\": \"janedoe\",\n    \"password\": \"hunter2\"\n  },\n  \"https://index.docker.io/v1/\": {\n    \"username\": \"mobydock\",\n    \"password\": \"conta1n3rize14\"\n  }\n}\n```\n\nOnly the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a `https://` prefix and a `/v1/` suffix even though Docker will prefer to use the v2 registry API.\n",
								"key": "X-Registry-Config",
								"value": "anim incididunt"
							},
							{
								"key": "Content-Type",
								"value": "application/octet-stream"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "{{baseUrl}}/build?dockerfile=Dockerfile&t=anim incididunt&extrahosts=anim incididunt&remote=anim incididunt&q=false&nocache=false&cachefrom=anim incididunt&pull=anim incididunt&rm=true&forcerm=false&memory=-74142093&memswap=-74142093&cpushares=-74142093&cpusetcpus=anim incididunt&cpuperiod=-74142093&cpuquota=-74142093&buildargs=anim incididunt&shmsize=-74142093&squash=false&labels=anim incididunt&networkmode=anim incididunt&platform=&target=&outputs=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"build"
							],
							"query": [
								{
									"key": "dockerfile",
									"value": "Dockerfile",
									"description": "Path within the build context to the `Dockerfile`. This is ignored if `remote` is specified and points to an external `Dockerfile`."
								},
								{
									"key": "t",
									"value": "anim incididunt",
									"description": "A name and optional tag to apply to the image in the `name:tag` format. If you omit the tag the default `latest` value is assumed. You can provide several `t` parameters."
								},
								{
									"key": "extrahosts",
									"value": "anim incididunt",
									"description": "Extra hosts to add to /etc/hosts"
								},
								{
									"key": "remote",
									"value": "anim incididunt",
									"description": "A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called `Dockerfile` and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the `dockerfile` parameter is also specified, there must be a file with the corresponding path inside the tarball."
								},
								{
									"key": "q",
									"value": "false",
									"description": "Suppress verbose build output."
								},
								{
									"key": "nocache",
									"value": "false",
									"description": "Do not use the cache when building the image."
								},
								{
									"key": "cachefrom",
									"value": "anim incididunt",
									"description": "JSON array of images used for build cache resolution."
								},
								{
									"key": "pull",
									"value": "anim incididunt",
									"description": "Attempt to pull the image even if an older image exists locally."
								},
								{
									"key": "rm",
									"value": "true",
									"description": "Remove intermediate containers after a successful build."
								},
								{
									"key": "forcerm",
									"value": "false",
									"description": "Always remove intermediate containers, even upon failure."
								},
								{
									"key": "memory",
									"value": "-74142093",
									"description": "Set memory limit for build."
								},
								{
									"key": "memswap",
									"value": "-74142093",
									"description": "Total memory (memory + swap). Set as `-1` to disable swap."
								},
								{
									"key": "cpushares",
									"value": "-74142093",
									"description": "CPU shares (relative weight)."
								},
								{
									"key": "cpusetcpus",
									"value": "anim incididunt",
									"description": "CPUs in which to allow execution (e.g., `0-3`, `0,1`)."
								},
								{
									"key": "cpuperiod",
									"value": "-74142093",
									"description": "The length of a CPU period in microseconds."
								},
								{
									"key": "cpuquota",
									"value": "-74142093",
									"description": "Microseconds of CPU time that the container can get in a CPU period."
								},
								{
									"key": "buildargs",
									"value": "anim incididunt",
									"description": "JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the `Dockerfile` RUN instruction, or for variable expansion in other `Dockerfile` instructions. This is not meant for passing secret values.\n\nFor example, the build arg `FOO=bar` would become `{\"FOO\":\"bar\"}` in JSON. This would result in the query parameter `buildargs={\"FOO\":\"bar\"}`. Note that `{\"FOO\":\"bar\"}` should be URI component encoded.\n\n[Read more about the buildargs instruction.](/engine/reference/builder/#arg)\n"
								},
								{
									"key": "shmsize",
									"value": "-74142093",
									"description": "Size of `/dev/shm` in bytes. The size must be greater than 0. If omitted the system uses 64MB."
								},
								{
									"key": "squash",
									"value": "false",
									"description": "Squash the resulting images layers into a single layer. *(Experimental release only.)*"
								},
								{
									"key": "labels",
									"value": "anim incididunt",
									"description": "Arbitrary key/value labels to set on the image, as a JSON map of string pairs."
								},
								{
									"key": "networkmode",
									"value": "anim incididunt",
									"description": "Sets the networking mode for the run commands during build. Supported\nstandard values are: `bridge`, `host`, `none`, and `container:<name|id>`.\nAny other value is taken as a custom network's name or ID to which this\ncontainer should connect to.\n"
								},
								{
									"key": "platform",
									"value": "",
									"description": "Platform in the format os[/arch[/variant]]"
								},
								{
									"key": "target",
									"value": "",
									"description": "Target build stage"
								},
								{
									"key": "outputs",
									"value": "",
									"description": "BuildKit output configuration"
								}
							]
						},
						"description": "Build an image from a tar archive with a `Dockerfile` in it.\n\nThe `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](/engine/reference/builder/).\n\nThe Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.\n\nThe build is canceled if the client drops the connection by quitting or being killed.\n"
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-type",
										"value": "application/x-tar"
									},
									{
										"description": "This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.\n\nThe key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:\n\n```\n{\n  \"docker.example.com\": {\n    \"username\": \"janedoe\",\n    \"password\": \"hunter2\"\n  },\n  \"https://index.docker.io/v1/\": {\n    \"username\": \"mobydock\",\n    \"password\": \"conta1n3rize14\"\n  }\n}\n```\n\nOnly the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a `https://` prefix and a `/v1/` suffix even though Docker will prefer to use the v2 registry API.\n",
										"key": "X-Registry-Config",
										"value": "anim incididunt"
									}
								],
								"body": {
									"mode": "file",
									"file": {}
								},
								"url": {
									"raw": "{{baseUrl}}/build?dockerfile=Dockerfile&t=anim incididunt&extrahosts=anim incididunt&remote=anim incididunt&q=false&nocache=false&cachefrom=anim incididunt&pull=anim incididunt&rm=true&forcerm=false&memory=-74142093&memswap=-74142093&cpushares=-74142093&cpusetcpus=anim incididunt&cpuperiod=-74142093&cpuquota=-74142093&buildargs=anim incididunt&shmsize=-74142093&squash=true&labels=anim incididunt&networkmode=anim incididunt&platform=&target=&outputs=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"build"
									],
									"query": [
										{
											"key": "dockerfile",
											"value": "Dockerfile"
										},
										{
											"key": "t",
											"value": "anim incididunt"
										},
										{
											"key": "extrahosts",
											"value": "anim incididunt"
										},
										{
											"key": "remote",
											"value": "anim incididunt"
										},
										{
											"key": "q",
											"value": "false"
										},
										{
											"key": "nocache",
											"value": "false"
										},
										{
											"key": "cachefrom",
											"value": "anim incididunt"
										},
										{
											"key": "pull",
											"value": "anim incididunt"
										},
										{
											"key": "rm",
											"value": "true"
										},
										{
											"key": "forcerm",
											"value": "false"
										},
										{
											"key": "memory",
											"value": "-74142093"
										},
										{
											"key": "memswap",
											"value": "-74142093"
										},
										{
											"key": "cpushares",
											"value": "-74142093"
										},
										{
											"key": "cpusetcpus",
											"value": "anim incididunt"
										},
										{
											"key": "cpuperiod",
											"value": "-74142093"
										},
										{
											"key": "cpuquota",
											"value": "-74142093"
										},
										{
											"key": "buildargs",
											"value": "anim incididunt"
										},
										{
											"key": "shmsize",
											"value": "-74142093"
										},
										{
											"key": "squash",
											"value": "true"
										},
										{
											"key": "labels",
											"value": "anim incididunt"
										},
										{
											"key": "networkmode",
											"value": "anim incididunt"
										},
										{
											"key": "platform",
											"value": ""
										},
										{
											"key": "target",
											"value": ""
										},
										{
											"key": "outputs",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad parameter",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-type",
										"value": "application/x-tar"
									},
									{
										"description": "This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.\n\nThe key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:\n\n```\n{\n  \"docker.example.com\": {\n    \"username\": \"janedoe\",\n    \"password\": \"hunter2\"\n  },\n  \"https://index.docker.io/v1/\": {\n    \"username\": \"mobydock\",\n    \"password\": \"conta1n3rize14\"\n  }\n}\n```\n\nOnly the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a `https://` prefix and a `/v1/` suffix even though Docker will prefer to use the v2 registry API.\n",
										"key": "X-Registry-Config",
										"value": "anim incididunt"
									}
								],
								"body": {
									"mode": "file",
									"file": {}
								},
								"url": {
									"raw": "{{baseUrl}}/build?dockerfile=Dockerfile&t=anim incididunt&extrahosts=anim incididunt&remote=anim incididunt&q=false&nocache=false&cachefrom=anim incididunt&pull=anim incididunt&rm=true&forcerm=false&memory=-74142093&memswap=-74142093&cpushares=-74142093&cpusetcpus=anim incididunt&cpuperiod=-74142093&cpuquota=-74142093&buildargs=anim incididunt&shmsize=-74142093&squash=true&labels=anim incididunt&networkmode=anim incididunt&platform=&target=&outputs=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"build"
									],
									"query": [
										{
											"key": "dockerfile",
											"value": "Dockerfile"
										},
										{
											"key": "t",
											"value": "anim incididunt"
										},
										{
											"key": "extrahosts",
											"value": "anim incididunt"
										},
										{
											"key": "remote",
											"value": "anim incididunt"
										},
										{
											"key": "q",
											"value": "false"
										},
										{
											"key": "nocache",
											"value": "false"
										},
										{
											"key": "cachefrom",
											"value": "anim incididunt"
										},
										{
											"key": "pull",
											"value": "anim incididunt"
										},
										{
											"key": "rm",
											"value": "true"
										},
										{
											"key": "forcerm",
											"value": "false"
										},
										{
											"key": "memory",
											"value": "-74142093"
										},
										{
											"key": "memswap",
											"value": "-74142093"
										},
										{
											"key": "cpushares",
											"value": "-74142093"
										},
										{
											"key": "cpusetcpus",
											"value": "anim incididunt"
										},
										{
											"key": "cpuperiod",
											"value": "-74142093"
										},
										{
											"key": "cpuquota",
											"value": "-74142093"
										},
										{
											"key": "buildargs",
											"value": "anim incididunt"
										},
										{
											"key": "shmsize",
											"value": "-74142093"
										},
										{
											"key": "squash",
											"value": "true"
										},
										{
											"key": "labels",
											"value": "anim incididunt"
										},
										{
											"key": "networkmode",
											"value": "anim incididunt"
										},
										{
											"key": "platform",
											"value": ""
										},
										{
											"key": "target",
											"value": ""
										},
										{
											"key": "outputs",
											"value": ""
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-type",
										"value": "application/x-tar"
									},
									{
										"description": "This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.\n\nThe key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:\n\n```\n{\n  \"docker.example.com\": {\n    \"username\": \"janedoe\",\n    \"password\": \"hunter2\"\n  },\n  \"https://index.docker.io/v1/\": {\n    \"username\": \"mobydock\",\n    \"password\": \"conta1n3rize14\"\n  }\n}\n```\n\nOnly the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a `https://` prefix and a `/v1/` suffix even though Docker will prefer to use the v2 registry API.\n",
										"key": "X-Registry-Config",
										"value": "anim incididunt"
									}
								],
								"body": {
									"mode": "file",
									"file": {}
								},
								"url": {
									"raw": "{{baseUrl}}/build?dockerfile=Dockerfile&t=anim incididunt&extrahosts=anim incididunt&remote=anim incididunt&q=false&nocache=false&cachefrom=anim incididunt&pull=anim incididunt&rm=true&forcerm=false&memory=-74142093&memswap=-74142093&cpushares=-74142093&cpusetcpus=anim incididunt&cpuperiod=-74142093&cpuquota=-74142093&buildargs=anim incididunt&shmsize=-74142093&squash=true&labels=anim incididunt&networkmode=anim incididunt&platform=&target=&outputs=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"build"
									],
									"query": [
										{
											"key": "dockerfile",
											"value": "Dockerfile"
										},
										{
											"key": "t",
											"value": "anim incididunt"
										},
										{
											"key": "extrahosts",
											"value": "anim incididunt"
										},
										{
											"key": "remote",
											"value": "anim incididunt"
										},
										{
											"key": "q",
											"value": "false"
										},
										{
											"key": "nocache",
											"value": "false"
										},
										{
											"key": "cachefrom",
											"value": "anim incididunt"
										},
										{
											"key": "pull",
											"value": "anim incididunt"
										},
										{
											"key": "rm",
											"value": "true"
										},
										{
											"key": "forcerm",
											"value": "false"
										},
										{
											"key": "memory",
											"value": "-74142093"
										},
										{
											"key": "memswap",
											"value": "-74142093"
										},
										{
											"key": "cpushares",
											"value": "-74142093"
										},
										{
											"key": "cpusetcpus",
											"value": "anim incididunt"
										},
										{
											"key": "cpuperiod",
											"value": "-74142093"
										},
										{
											"key": "cpuquota",
											"value": "-74142093"
										},
										{
											"key": "buildargs",
											"value": "anim incididunt"
										},
										{
											"key": "shmsize",
											"value": "-74142093"
										},
										{
											"key": "squash",
											"value": "true"
										},
										{
											"key": "labels",
											"value": "anim incididunt"
										},
										{
											"key": "networkmode",
											"value": "anim incididunt"
										},
										{
											"key": "platform",
											"value": ""
										},
										{
											"key": "target",
											"value": ""
										},
										{
											"key": "outputs",
											"value": ""
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Delete builder cache",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/build/prune?keep-storage=-74142093&all=true&filters=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"build",
								"prune"
							],
							"query": [
								{
									"key": "keep-storage",
									"value": "-74142093",
									"description": "Amount of disk space in bytes to keep for cache"
								},
								{
									"key": "all",
									"value": "true",
									"description": "Remove all types of build cache"
								},
								{
									"key": "filters",
									"value": "anim incididunt",
									"description": "A JSON encoded value of the filters (a `map[string][]string`) to\nprocess on the list of build cache objects.\n\nAvailable filters:\n\n- `until=<duration>`: duration relative to daemon's time, during which build cache was not used, in Go's duration format (e.g., '24h')\n- `id=<id>`\n- `parent=<id>`\n- `type=<string>`\n- `description=<string>`\n- `inuse`\n- `shared`\n- `private`\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "No error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/build/prune?keep-storage=-74142093&all=true&filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"build",
										"prune"
									],
									"query": [
										{
											"key": "keep-storage",
											"value": "-74142093"
										},
										{
											"key": "all",
											"value": "true"
										},
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"CachesDeleted\": [\n    \"Lorem tempor\",\n    \"ullamco dolore quis\"\n  ],\n  \"SpaceReclaimed\": -35737568\n}"
						},
						{
							"name": "Server error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/build/prune?keep-storage=-74142093&all=true&filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"build",
										"prune"
									],
									"query": [
										{
											"key": "keep-storage",
											"value": "-74142093"
										},
										{
											"key": "all",
											"value": "true"
										},
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": " ping",
			"item": [
				{
					"name": "Ping",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/_ping",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"_ping"
							]
						},
						"description": "This is a dummy endpoint you can use to test if the server is accessible."
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/_ping",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"_ping"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "API-Version",
									"value": "anim incididunt",
									"description": "Max API Version the server supports"
								},
								{
									"key": "Builder-Version",
									"value": "anim incididunt",
									"description": "Default version of docker image builder"
								},
								{
									"key": "Docker-Experimental",
									"value": "true",
									"description": "If the server is running with experimental mode enabled"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate",
									"description": ""
								},
								{
									"key": "Pragma",
									"value": "no-cache",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "OK"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/_ping",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"_ping"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate",
									"description": ""
								},
								{
									"key": "Pragma",
									"value": "no-cache",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Ping",
					"request": {
						"method": "HEAD",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/_ping",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"_ping"
							]
						},
						"description": "This is a dummy endpoint you can use to test if the server is accessible."
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/_ping",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"_ping"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "API-Version",
									"value": "anim incididunt",
									"description": "Max API Version the server supports"
								},
								{
									"key": "Builder-Version",
									"value": "anim incididunt",
									"description": "Default version of docker image builder"
								},
								{
									"key": "Docker-Experimental",
									"value": "true",
									"description": "If the server is running with experimental mode enabled"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate",
									"description": ""
								},
								{
									"key": "Pragma",
									"value": "no-cache",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "(empty)"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/_ping",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"_ping"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "exec/{id}",
			"item": [
				{
					"name": "Start an exec instance",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.docker.raw-stream"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Detach\": false,\n  \"Tty\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/exec/:id/start",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"exec",
								":id",
								"start"
							],
							"variable": [
								{
									"key": "id",
									"value": "anim incididunt",
									"description": "(Required) Exec instance ID"
								}
							]
						},
						"description": "Starts a previously set up exec instance. If detach is true, this endpoint\nreturns immediately after starting the command. Otherwise, it sets up an\ninteractive session with the command.\n"
					},
					"response": [
						{
							"name": "No error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Detach\": false,\n  \"Tty\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/exec/:id/start",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"exec",
										":id",
										"start"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) Exec instance ID"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "No such exec instance",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Detach\": false,\n  \"Tty\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/exec/:id/start",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"exec",
										":id",
										"start"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) Exec instance ID"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.docker.raw-stream"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Container is stopped or paused",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Detach\": false,\n  \"Tty\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/exec/:id/start",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"exec",
										":id",
										"start"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) Exec instance ID"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/vnd.docker.raw-stream"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Resize an exec instance",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/exec/:id/resize?h=-74142093&w=-74142093",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"exec",
								":id",
								"resize"
							],
							"query": [
								{
									"key": "h",
									"value": "-74142093",
									"description": "Height of the TTY session in characters"
								},
								{
									"key": "w",
									"value": "-74142093",
									"description": "Width of the TTY session in characters"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "anim incididunt",
									"description": "(Required) Exec instance ID"
								}
							]
						},
						"description": "Resize the TTY session used by an exec instance. This endpoint only works\nif `tty` was specified as part of creating and starting the exec instance.\n"
					},
					"response": [
						{
							"name": "No error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/exec/:id/resize?h=-74142093&w=-74142093",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"exec",
										":id",
										"resize"
									],
									"query": [
										{
											"key": "h",
											"value": "-74142093"
										},
										{
											"key": "w",
											"value": "-74142093"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) Exec instance ID"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "bad parameter",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/exec/:id/resize?h=-74142093&w=-74142093",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"exec",
										":id",
										"resize"
									],
									"query": [
										{
											"key": "h",
											"value": "-74142093"
										},
										{
											"key": "w",
											"value": "-74142093"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) Exec instance ID"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "No such exec instance",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/exec/:id/resize?h=-74142093&w=-74142093",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"exec",
										":id",
										"resize"
									],
									"query": [
										{
											"key": "h",
											"value": "-74142093"
										},
										{
											"key": "w",
											"value": "-74142093"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) Exec instance ID"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "Server error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/exec/:id/resize?h=-74142093&w=-74142093",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"exec",
										":id",
										"resize"
									],
									"query": [
										{
											"key": "h",
											"value": "-74142093"
										},
										{
											"key": "w",
											"value": "-74142093"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) Exec instance ID"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Inspect an exec instance",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/exec/:id/json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"exec",
								":id",
								"json"
							],
							"variable": [
								{
									"key": "id",
									"value": "anim incididunt",
									"description": "(Required) Exec instance ID"
								}
							]
						},
						"description": "Return low-level information about an exec instance."
					},
					"response": [
						{
							"name": "No error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/exec/:id/json",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"exec",
										":id",
										"json"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) Exec instance ID"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"CanRemove\": false,\n  \"ContainerID\": \"b53ee82b53a40c7dca428523e34f741f3abc51d9f297a14ff874bf761b995126\",\n  \"DetachKeys\": \"\",\n  \"ExitCode\": 2,\n  \"ID\": \"f33bbfb39f5b142420f4759b2348913bd4a8d1a6d7fd56499cb41a1bb91d7b3b\",\n  \"OpenStderr\": true,\n  \"OpenStdin\": true,\n  \"OpenStdout\": true,\n  \"ProcessConfig\": {\n    \"arguments\": [\n      \"-c\",\n      \"exit 2\"\n    ],\n    \"entrypoint\": \"sh\",\n    \"privileged\": false,\n    \"tty\": true,\n    \"user\": \"1000\"\n  },\n  \"Running\": false,\n  \"Pid\": 42000\n}"
						},
						{
							"name": "No such exec instance",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/exec/:id/json",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"exec",
										":id",
										"json"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) Exec instance ID"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "Server error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/exec/:id/json",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"exec",
										":id",
										"json"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) Exec instance ID"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "volumes",
			"item": [
				{
					"name": "{name}",
					"item": [
						{
							"name": "Inspect a volume",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/volumes/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"volumes",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "anim incididunt",
											"description": "(Required) Volume name or ID"
										}
									]
								}
							},
							"response": [
								{
									"name": "No error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/volumes/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"volumes",
												":name"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Volume name or ID"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"Name\": \"tardis\",\n  \"Driver\": \"custom\",\n  \"Mountpoint\": \"/var/lib/docker/volumes/tardis\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"Scope\": \"local\",\n  \"Options\": {\n    \"device\": \"tmpfs\",\n    \"o\": \"size=100m,uid=1000\",\n    \"type\": \"tmpfs\"\n  },\n  \"CreatedAt\": \"2016-06-07T20:31:11.853781916Z\",\n  \"Status\": {\n    \"dolore_2c2\": {},\n    \"consequat__\": {},\n    \"ut5\": {}\n  },\n  \"UsageData\": {\n    \"Size\": -1,\n    \"RefCount\": -1\n  }\n}"
								},
								{
									"name": "No such volume",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/volumes/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"volumes",
												":name"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Volume name or ID"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "Server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/volumes/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"volumes",
												":name"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Volume name or ID"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Remove a volume",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/volumes/:name?force=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"volumes",
										":name"
									],
									"query": [
										{
											"key": "force",
											"value": "false",
											"description": "Force the removal of the volume"
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "anim incididunt",
											"description": "(Required) Volume name or ID"
										}
									]
								},
								"description": "Instruct the driver to remove the volume."
							},
							"response": [
								{
									"name": "The volume was removed",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/volumes/:name?force=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"volumes",
												":name"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Volume name or ID"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "No such volume or volume driver",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/volumes/:name?force=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"volumes",
												":name"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Volume name or ID"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "Volume is in use and cannot be removed",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/volumes/:name?force=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"volumes",
												":name"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Volume name or ID"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "Server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/volumes/:name?force=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"volumes",
												":name"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) Volume name or ID"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "List volumes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/volumes?filters=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"volumes"
							],
							"query": [
								{
									"key": "filters",
									"value": "anim incididunt",
									"description": "JSON encoded value of the filters (a `map[string][]string`) to\nprocess on the volumes list. Available filters:\n\n- `dangling=<boolean>` When set to `true` (or `1`), returns all\n   volumes that are not in use by a container. When set to `false`\n   (or `0`), only volumes that are in use by one or more\n   containers are returned.\n- `driver=<volume-driver-name>` Matches volumes based on their driver.\n- `label=<key>` or `label=<key>:<value>` Matches volumes based on\n   the presence of a `label` alone or a `label` and a value.\n- `name=<volume-name>` Matches all or part of a volume name.\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "Summary volume data that matches the query",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/volumes?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"volumes"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"Volumes\": [\n    {\n      \"Name\": \"tardis\",\n      \"Driver\": \"custom\",\n      \"Mountpoint\": \"/var/lib/docker/volumes/tardis\",\n      \"Labels\": {\n        \"com.example.some-label\": \"some-value\",\n        \"com.example.some-other-label\": \"some-other-value\"\n      },\n      \"Scope\": \"local\",\n      \"Options\": {\n        \"device\": \"tmpfs\",\n        \"o\": \"size=100m,uid=1000\",\n        \"type\": \"tmpfs\"\n      },\n      \"CreatedAt\": \"2016-06-07T20:31:11.853781916Z\",\n      \"Status\": {\n        \"dolor_be9\": {},\n        \"deserunt67\": {},\n        \"incididunt71\": {}\n      },\n      \"UsageData\": {\n        \"Size\": -1,\n        \"RefCount\": -1\n      }\n    },\n    {\n      \"Name\": \"tardis\",\n      \"Driver\": \"custom\",\n      \"Mountpoint\": \"/var/lib/docker/volumes/tardis\",\n      \"Labels\": {\n        \"com.example.some-label\": \"some-value\",\n        \"com.example.some-other-label\": \"some-other-value\"\n      },\n      \"Scope\": \"local\",\n      \"Options\": {\n        \"device\": \"tmpfs\",\n        \"o\": \"size=100m,uid=1000\",\n        \"type\": \"tmpfs\"\n      },\n      \"CreatedAt\": \"2016-06-07T20:31:11.853781916Z\",\n      \"Status\": {\n        \"dolor385\": {},\n        \"minimc_c\": {}\n      },\n      \"UsageData\": {\n        \"Size\": -1,\n        \"RefCount\": -1\n      }\n    }\n  ],\n  \"Warnings\": [\n    \"anim nostrud in nulla velit\",\n    \"irure\"\n  ]\n}"
						},
						{
							"name": "Server error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/volumes?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"volumes"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Create a volume",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Name\": \"tardis\",\n  \"Driver\": \"custom\",\n  \"DriverOpts\": {\n    \"device\": \"tmpfs\",\n    \"o\": \"size=100m,uid=1000\",\n    \"type\": \"tmpfs\"\n  },\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/volumes/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"volumes",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "The volume was created successfully",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"tardis\",\n  \"Driver\": \"custom\",\n  \"DriverOpts\": {\n    \"device\": \"tmpfs\",\n    \"o\": \"size=100m,uid=1000\",\n    \"type\": \"tmpfs\"\n  },\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/volumes/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"volumes",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"Name\": \"tardis\",\n  \"Driver\": \"custom\",\n  \"Mountpoint\": \"/var/lib/docker/volumes/tardis\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"Scope\": \"local\",\n  \"Options\": {\n    \"device\": \"tmpfs\",\n    \"o\": \"size=100m,uid=1000\",\n    \"type\": \"tmpfs\"\n  },\n  \"CreatedAt\": \"2016-06-07T20:31:11.853781916Z\",\n  \"Status\": {\n    \"dolore_2c2\": {},\n    \"consequat__\": {},\n    \"ut5\": {}\n  },\n  \"UsageData\": {\n    \"Size\": -1,\n    \"RefCount\": -1\n  }\n}"
						},
						{
							"name": "Server error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"tardis\",\n  \"Driver\": \"custom\",\n  \"DriverOpts\": {\n    \"device\": \"tmpfs\",\n    \"o\": \"size=100m,uid=1000\",\n    \"type\": \"tmpfs\"\n  },\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/volumes/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"volumes",
										"create"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Delete unused volumes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/volumes/prune?filters=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"volumes",
								"prune"
							],
							"query": [
								{
									"key": "filters",
									"value": "anim incididunt",
									"description": "Filters to process on the prune list, encoded as JSON (a `map[string][]string`).\n\nAvailable filters:\n- `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune volumes with (or without, in case `label!=...` is used) the specified labels.\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "No error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/volumes/prune?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"volumes",
										"prune"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"VolumesDeleted\": [\n    \"velit in\",\n    \"deserunt aute Lorem eu\"\n  ],\n  \"SpaceReclaimed\": 44216821\n}"
						},
						{
							"name": "Server error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/volumes/prune?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"volumes",
										"prune"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "networks",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Inspect a network",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/networks/:id?verbose=false&scope=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"networks",
										":id"
									],
									"query": [
										{
											"key": "verbose",
											"value": "false",
											"description": "Detailed inspect output for troubleshooting"
										},
										{
											"key": "scope",
											"value": "anim incididunt",
											"description": "Filter the network by scope (swarm, global, or local)"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) Network ID or name"
										}
									]
								}
							},
							"response": [
								{
									"name": "No error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/networks/:id?verbose=false&scope=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"networks",
												":id"
											],
											"query": [
												{
													"key": "verbose",
													"value": "false"
												},
												{
													"key": "scope",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) Network ID or name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"Name\": \"net01\",\n  \"Id\": \"7d86d31b1478e7cca9ebed7e73aa0fdeec46c5ca29497431d3007d2d9e15ed99\",\n  \"Created\": \"2016-10-19T04:33:30.360899459Z\",\n  \"Scope\": \"local\",\n  \"Driver\": \"bridge\",\n  \"EnableIPv6\": false,\n  \"IPAM\": {\n    \"Driver\": \"default\",\n    \"Config\": [\n      {\n        \"Subnet\": \"172.19.0.0/16\",\n        \"Gateway\": \"172.19.0.1\"\n      }\n    ],\n    \"Options\": {\n      \"foo\": \"bar\"\n    }\n  },\n  \"Internal\": false,\n  \"Attachable\": false,\n  \"Ingress\": false,\n  \"Containers\": {\n    \"19a4d5d687db25203351ed79d478946f861258f018fe384f229f2efa4b23513c\": {\n      \"Name\": \"test\",\n      \"EndpointID\": \"628cadb8bcb92de107b2a1e516cbffe463e321f548feb37697cce00ad694f21a\",\n      \"MacAddress\": \"02:42:ac:13:00:02\",\n      \"IPv4Address\": \"172.19.0.2/16\",\n      \"IPv6Address\": \"\"\n    }\n  },\n  \"Options\": {\n    \"com.docker.network.bridge.default_bridge\": \"true\",\n    \"com.docker.network.bridge.enable_icc\": \"true\",\n    \"com.docker.network.bridge.enable_ip_masquerade\": \"true\",\n    \"com.docker.network.bridge.host_binding_ipv4\": \"0.0.0.0\",\n    \"com.docker.network.bridge.name\": \"docker0\",\n    \"com.docker.network.driver.mtu\": \"1500\"\n  },\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  }\n}"
								},
								{
									"name": "Network not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/networks/:id?verbose=false&scope=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"networks",
												":id"
											],
											"query": [
												{
													"key": "verbose",
													"value": "false"
												},
												{
													"key": "scope",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) Network ID or name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "Server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/networks/:id?verbose=false&scope=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"networks",
												":id"
											],
											"query": [
												{
													"key": "verbose",
													"value": "false"
												},
												{
													"key": "scope",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) Network ID or name"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Remove a network",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/networks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"networks",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) Network ID or name"
										}
									]
								}
							},
							"response": [
								{
									"name": "No error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/networks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"networks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) Network ID or name"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "operation not supported for pre-defined networks",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/networks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"networks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) Network ID or name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "no such network",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/networks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"networks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) Network ID or name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "Server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/networks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"networks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) Network ID or name"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Connect a container to a network",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Container\": \"3613f73ba0e4\",\n  \"EndpointConfig\": {\n    \"IPAMConfig\": {\n      \"IPv4Address\": \"172.24.56.89\",\n      \"IPv6Address\": \"2001:db8::5689\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/networks/:id/connect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"networks",
										":id",
										"connect"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) Network ID or name"
										}
									]
								}
							},
							"response": [
								{
									"name": "No error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Container\": \"3613f73ba0e4\",\n  \"EndpointConfig\": {\n    \"IPAMConfig\": {\n      \"IPv4Address\": \"172.24.56.89\",\n      \"IPv6Address\": \"2001:db8::5689\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/networks/:id/connect",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"networks",
												":id",
												"connect"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) Network ID or name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Operation not supported for swarm scoped networks",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Container\": \"3613f73ba0e4\",\n  \"EndpointConfig\": {\n    \"IPAMConfig\": {\n      \"IPv4Address\": \"172.24.56.89\",\n      \"IPv6Address\": \"2001:db8::5689\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/networks/:id/connect",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"networks",
												":id",
												"connect"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) Network ID or name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "Network or container not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Container\": \"3613f73ba0e4\",\n  \"EndpointConfig\": {\n    \"IPAMConfig\": {\n      \"IPv4Address\": \"172.24.56.89\",\n      \"IPv6Address\": \"2001:db8::5689\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/networks/:id/connect",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"networks",
												":id",
												"connect"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) Network ID or name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "Server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Container\": \"3613f73ba0e4\",\n  \"EndpointConfig\": {\n    \"IPAMConfig\": {\n      \"IPv4Address\": \"172.24.56.89\",\n      \"IPv6Address\": \"2001:db8::5689\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/networks/:id/connect",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"networks",
												":id",
												"connect"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) Network ID or name"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Disconnect a container from a network",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Container\": \"Excepteur cillum\",\n  \"Force\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/networks/:id/disconnect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"networks",
										":id",
										"disconnect"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) Network ID or name"
										}
									]
								}
							},
							"response": [
								{
									"name": "No error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Container\": \"Excepteur cillum\",\n  \"Force\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/networks/:id/disconnect",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"networks",
												":id",
												"disconnect"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) Network ID or name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Operation not supported for swarm scoped networks",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Container\": \"Excepteur cillum\",\n  \"Force\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/networks/:id/disconnect",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"networks",
												":id",
												"disconnect"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) Network ID or name"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "Network or container not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Container\": \"Excepteur cillum\",\n  \"Force\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/networks/:id/disconnect",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"networks",
												":id",
												"disconnect"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) Network ID or name"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "Server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Container\": \"Excepteur cillum\",\n  \"Force\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/networks/:id/disconnect",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"networks",
												":id",
												"disconnect"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) Network ID or name"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "List networks",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/networks?filters=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"networks"
							],
							"query": [
								{
									"key": "filters",
									"value": "anim incididunt",
									"description": "JSON encoded value of the filters (a `map[string][]string`) to process\non the networks list.\n\nAvailable filters:\n\n- `dangling=<boolean>` When set to `true` (or `1`), returns all\n   networks that are not in use by a container. When set to `false`\n   (or `0`), only networks that are in use by one or more\n   containers are returned.\n- `driver=<driver-name>` Matches a network's driver.\n- `id=<network-id>` Matches all or part of a network ID.\n- `label=<key>` or `label=<key>=<value>` of a network label.\n- `name=<network-name>` Matches all or part of a network name.\n- `scope=[\"swarm\"|\"global\"|\"local\"]` Filters networks by scope (`swarm`, `global`, or `local`).\n- `type=[\"custom\"|\"builtin\"]` Filters networks by type. The `custom` keyword returns all user-defined networks.\n"
								}
							]
						},
						"description": "Returns a list of networks. For details on the format, see the\n[network inspect endpoint](#operation/NetworkInspect).\n\nNote that it uses a different, smaller representation of a network than\ninspecting a single network. For example, the list of containers attached\nto the network is not propagated in API versions 1.28 and up.\n"
					},
					"response": [
						{
							"name": "No error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/networks?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"networks"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"Name\": \"bridge\",\n    \"Id\": \"f2de39df4171b0dc801e8002d1d999b77256983dfc63041c0f34030aa3977566\",\n    \"Created\": \"2016-10-19T06:21:00.416543526Z\",\n    \"Scope\": \"local\",\n    \"Driver\": \"bridge\",\n    \"EnableIPv6\": false,\n    \"Internal\": false,\n    \"Attachable\": false,\n    \"Ingress\": false,\n    \"IPAM\": {\n      \"Driver\": \"default\",\n      \"Config\": [\n        {\n          \"Subnet\": \"172.17.0.0/16\"\n        }\n      ]\n    },\n    \"Options\": {\n      \"com.docker.network.bridge.default_bridge\": \"true\",\n      \"com.docker.network.bridge.enable_icc\": \"true\",\n      \"com.docker.network.bridge.enable_ip_masquerade\": \"true\",\n      \"com.docker.network.bridge.host_binding_ipv4\": \"0.0.0.0\",\n      \"com.docker.network.bridge.name\": \"docker0\",\n      \"com.docker.network.driver.mtu\": \"1500\"\n    }\n  },\n  {\n    \"Name\": \"none\",\n    \"Id\": \"e086a3893b05ab69242d3c44e49483a3bbbd3a26b46baa8f61ab797c1088d794\",\n    \"Created\": \"0001-01-01T00:00:00Z\",\n    \"Scope\": \"local\",\n    \"Driver\": \"null\",\n    \"EnableIPv6\": false,\n    \"Internal\": false,\n    \"Attachable\": false,\n    \"Ingress\": false,\n    \"IPAM\": {\n      \"Driver\": \"default\",\n      \"Config\": []\n    },\n    \"Containers\": {},\n    \"Options\": {}\n  },\n  {\n    \"Name\": \"host\",\n    \"Id\": \"13e871235c677f196c4e1ecebb9dc733b9b2d2ab589e30c539efeda84a24215e\",\n    \"Created\": \"0001-01-01T00:00:00Z\",\n    \"Scope\": \"local\",\n    \"Driver\": \"host\",\n    \"EnableIPv6\": false,\n    \"Internal\": false,\n    \"Attachable\": false,\n    \"Ingress\": false,\n    \"IPAM\": {\n      \"Driver\": \"default\",\n      \"Config\": []\n    },\n    \"Containers\": {},\n    \"Options\": {}\n  }\n]"
						},
						{
							"name": "Server error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/networks?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"networks"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Create a network",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Name\": \"isolated_nw\",\n  \"CheckDuplicate\": false,\n  \"Driver\": \"bridge\",\n  \"EnableIPv6\": true,\n  \"IPAM\": {\n    \"Driver\": \"default\",\n    \"Config\": [\n      {\n        \"Subnet\": \"172.20.0.0/16\",\n        \"IPRange\": \"172.20.10.0/24\",\n        \"Gateway\": \"172.20.10.11\"\n      },\n      {\n        \"Subnet\": \"2001:db8:abcd::/64\",\n        \"Gateway\": \"2001:db8:abcd::1011\"\n      }\n    ],\n    \"Options\": {\n      \"foo\": \"bar\"\n    }\n  },\n  \"Internal\": true,\n  \"Attachable\": false,\n  \"Ingress\": false,\n  \"Options\": {\n    \"com.docker.network.bridge.default_bridge\": \"true\",\n    \"com.docker.network.bridge.enable_icc\": \"true\",\n    \"com.docker.network.bridge.enable_ip_masquerade\": \"true\",\n    \"com.docker.network.bridge.host_binding_ipv4\": \"0.0.0.0\",\n    \"com.docker.network.bridge.name\": \"docker0\",\n    \"com.docker.network.driver.mtu\": \"1500\"\n  },\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/networks/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"networks",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "No error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"isolated_nw\",\n  \"CheckDuplicate\": false,\n  \"Driver\": \"bridge\",\n  \"EnableIPv6\": true,\n  \"IPAM\": {\n    \"Driver\": \"default\",\n    \"Config\": [\n      {\n        \"Subnet\": \"172.20.0.0/16\",\n        \"IPRange\": \"172.20.10.0/24\",\n        \"Gateway\": \"172.20.10.11\"\n      },\n      {\n        \"Subnet\": \"2001:db8:abcd::/64\",\n        \"Gateway\": \"2001:db8:abcd::1011\"\n      }\n    ],\n    \"Options\": {\n      \"foo\": \"bar\"\n    }\n  },\n  \"Internal\": true,\n  \"Attachable\": false,\n  \"Ingress\": false,\n  \"Options\": {\n    \"com.docker.network.bridge.default_bridge\": \"true\",\n    \"com.docker.network.bridge.enable_icc\": \"true\",\n    \"com.docker.network.bridge.enable_ip_masquerade\": \"true\",\n    \"com.docker.network.bridge.host_binding_ipv4\": \"0.0.0.0\",\n    \"com.docker.network.bridge.name\": \"docker0\",\n    \"com.docker.network.driver.mtu\": \"1500\"\n  },\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/networks/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"networks",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"Id\": \"22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30\",\n  \"Warning\": \"\"\n}"
						},
						{
							"name": "operation not supported for pre-defined networks",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"isolated_nw\",\n  \"CheckDuplicate\": false,\n  \"Driver\": \"bridge\",\n  \"EnableIPv6\": true,\n  \"IPAM\": {\n    \"Driver\": \"default\",\n    \"Config\": [\n      {\n        \"Subnet\": \"172.20.0.0/16\",\n        \"IPRange\": \"172.20.10.0/24\",\n        \"Gateway\": \"172.20.10.11\"\n      },\n      {\n        \"Subnet\": \"2001:db8:abcd::/64\",\n        \"Gateway\": \"2001:db8:abcd::1011\"\n      }\n    ],\n    \"Options\": {\n      \"foo\": \"bar\"\n    }\n  },\n  \"Internal\": true,\n  \"Attachable\": false,\n  \"Ingress\": false,\n  \"Options\": {\n    \"com.docker.network.bridge.default_bridge\": \"true\",\n    \"com.docker.network.bridge.enable_icc\": \"true\",\n    \"com.docker.network.bridge.enable_ip_masquerade\": \"true\",\n    \"com.docker.network.bridge.host_binding_ipv4\": \"0.0.0.0\",\n    \"com.docker.network.bridge.name\": \"docker0\",\n    \"com.docker.network.driver.mtu\": \"1500\"\n  },\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/networks/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"networks",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "plugin not found",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"isolated_nw\",\n  \"CheckDuplicate\": false,\n  \"Driver\": \"bridge\",\n  \"EnableIPv6\": true,\n  \"IPAM\": {\n    \"Driver\": \"default\",\n    \"Config\": [\n      {\n        \"Subnet\": \"172.20.0.0/16\",\n        \"IPRange\": \"172.20.10.0/24\",\n        \"Gateway\": \"172.20.10.11\"\n      },\n      {\n        \"Subnet\": \"2001:db8:abcd::/64\",\n        \"Gateway\": \"2001:db8:abcd::1011\"\n      }\n    ],\n    \"Options\": {\n      \"foo\": \"bar\"\n    }\n  },\n  \"Internal\": true,\n  \"Attachable\": false,\n  \"Ingress\": false,\n  \"Options\": {\n    \"com.docker.network.bridge.default_bridge\": \"true\",\n    \"com.docker.network.bridge.enable_icc\": \"true\",\n    \"com.docker.network.bridge.enable_ip_masquerade\": \"true\",\n    \"com.docker.network.bridge.host_binding_ipv4\": \"0.0.0.0\",\n    \"com.docker.network.bridge.name\": \"docker0\",\n    \"com.docker.network.driver.mtu\": \"1500\"\n  },\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/networks/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"networks",
										"create"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "Server error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"isolated_nw\",\n  \"CheckDuplicate\": false,\n  \"Driver\": \"bridge\",\n  \"EnableIPv6\": true,\n  \"IPAM\": {\n    \"Driver\": \"default\",\n    \"Config\": [\n      {\n        \"Subnet\": \"172.20.0.0/16\",\n        \"IPRange\": \"172.20.10.0/24\",\n        \"Gateway\": \"172.20.10.11\"\n      },\n      {\n        \"Subnet\": \"2001:db8:abcd::/64\",\n        \"Gateway\": \"2001:db8:abcd::1011\"\n      }\n    ],\n    \"Options\": {\n      \"foo\": \"bar\"\n    }\n  },\n  \"Internal\": true,\n  \"Attachable\": false,\n  \"Ingress\": false,\n  \"Options\": {\n    \"com.docker.network.bridge.default_bridge\": \"true\",\n    \"com.docker.network.bridge.enable_icc\": \"true\",\n    \"com.docker.network.bridge.enable_ip_masquerade\": \"true\",\n    \"com.docker.network.bridge.host_binding_ipv4\": \"0.0.0.0\",\n    \"com.docker.network.bridge.name\": \"docker0\",\n    \"com.docker.network.driver.mtu\": \"1500\"\n  },\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/networks/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"networks",
										"create"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Delete unused networks",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/networks/prune?filters=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"networks",
								"prune"
							],
							"query": [
								{
									"key": "filters",
									"value": "anim incididunt",
									"description": "Filters to process on the prune list, encoded as JSON (a `map[string][]string`).\n\nAvailable filters:\n- `until=<timestamp>` Prune networks created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.\n- `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune networks with (or without, in case `label!=...` is used) the specified labels.\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "No error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/networks/prune?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"networks",
										"prune"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"NetworksDeleted\": [\n    \"sit\",\n    \"aliquip minim Duis cillum incididunt\"\n  ]\n}"
						},
						{
							"name": "Server error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/networks/prune?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"networks",
										"prune"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "plugins",
			"item": [
				{
					"name": "{name}",
					"item": [
						{
							"name": "Remove a plugin",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/plugins/:name?force=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										":name"
									],
									"query": [
										{
											"key": "force",
											"value": "false",
											"description": "Disable the plugin before removing. This may result in issues if the\nplugin is in use by a container.\n"
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "anim incididunt",
											"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?force=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"Settings\": {\n    \"Args\": [\n      \"ut voluptate nostrud officia\",\n      \"enim magna\"\n    ],\n    \"Devices\": [\n      {\n        \"Name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Description\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Settable\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"Name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Description\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Settable\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ],\n    \"Env\": [\n      \"DEBUG=0\"\n    ],\n    \"Mounts\": [\n      {\n        \"Name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Description\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Settable\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Source\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Destination\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Options\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"Name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Description\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Settable\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Source\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Destination\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Options\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  },\n  \"Enabled\": true,\n  \"Config\": {\n    \"Description\": \"A sample volume plugin for Docker\",\n    \"Documentation\": \"/engine/extend/plugins/\",\n    \"Interface\": {\n      \"Types\": [\n        \"docker.volumedriver/1.0\"\n      ],\n      \"Socket\": \"plugins.sock\",\n      \"ProtocolScheme\": \"\"\n    },\n    \"Entrypoint\": [\n      \"/usr/bin/sample-volume-plugin\",\n      \"/data\"\n    ],\n    \"WorkDir\": \"/bin/\",\n    \"Network\": {\n      \"Type\": \"host\"\n    },\n    \"Linux\": {\n      \"Capabilities\": [\n        \"CAP_SYS_ADMIN\",\n        \"CAP_SYSLOG\"\n      ],\n      \"AllowAllDevices\": false,\n      \"Devices\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"PidHost\": false,\n    \"PropagatedMount\": \"/mnt/volumes\",\n    \"IpcHost\": false,\n    \"Mounts\": [\n      {\n        \"Name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Description\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Settable\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Source\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Destination\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Options\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"Name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Description\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Settable\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Source\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Destination\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Options\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ],\n    \"Env\": [\n      {\n        \"Name\": \"DEBUG\",\n        \"Description\": \"If set, prints debug messages\",\n        \"Settable\": null,\n        \"Value\": \"0\"\n      }\n    ],\n    \"Args\": {\n      \"Name\": \"args\",\n      \"Description\": \"command line arguments\",\n      \"Settable\": [\n        \"et exercitation\",\n        \"ut eiusmod in nisi\"\n      ],\n      \"Value\": [\n        \"quis sit ut\",\n        \"ad in reprehen\"\n      ]\n    },\n    \"DockerVersion\": \"17.06.0-ce\",\n    \"User\": {\n      \"UID\": 1000,\n      \"GID\": 1000\n    },\n    \"rootfs\": {\n      \"type\": \"layers\",\n      \"diff_ids\": [\n        \"sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887\",\n        \"sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8\"\n      ]\n    }\n  },\n  \"Name\": \"tiborvass/sample-volume-plugin\",\n  \"Id\": \"5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078\",\n  \"PluginReference\": \"localhost:5000/tiborvass/sample-volume-plugin:latest\"\n}"
								},
								{
									"name": "plugin is not installed",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?force=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name?force=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Inspect a plugin",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/plugins/:name/json",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										":name",
										"json"
									],
									"variable": [
										{
											"key": "name",
											"value": "anim incididunt",
											"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/json",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"json"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"Settings\": {\n    \"Args\": [\n      \"ut voluptate nostrud officia\",\n      \"enim magna\"\n    ],\n    \"Devices\": [\n      {\n        \"Name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Description\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Settable\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"Name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Description\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Settable\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ],\n    \"Env\": [\n      \"DEBUG=0\"\n    ],\n    \"Mounts\": [\n      {\n        \"Name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Description\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Settable\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Source\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Destination\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Options\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"Name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Description\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Settable\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Source\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Destination\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Options\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  },\n  \"Enabled\": true,\n  \"Config\": {\n    \"Description\": \"A sample volume plugin for Docker\",\n    \"Documentation\": \"/engine/extend/plugins/\",\n    \"Interface\": {\n      \"Types\": [\n        \"docker.volumedriver/1.0\"\n      ],\n      \"Socket\": \"plugins.sock\",\n      \"ProtocolScheme\": \"\"\n    },\n    \"Entrypoint\": [\n      \"/usr/bin/sample-volume-plugin\",\n      \"/data\"\n    ],\n    \"WorkDir\": \"/bin/\",\n    \"Network\": {\n      \"Type\": \"host\"\n    },\n    \"Linux\": {\n      \"Capabilities\": [\n        \"CAP_SYS_ADMIN\",\n        \"CAP_SYSLOG\"\n      ],\n      \"AllowAllDevices\": false,\n      \"Devices\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"PidHost\": false,\n    \"PropagatedMount\": \"/mnt/volumes\",\n    \"IpcHost\": false,\n    \"Mounts\": [\n      {\n        \"Name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Description\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Settable\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Source\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Destination\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Options\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"Name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Description\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Settable\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Source\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Destination\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Options\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ],\n    \"Env\": [\n      {\n        \"Name\": \"DEBUG\",\n        \"Description\": \"If set, prints debug messages\",\n        \"Settable\": null,\n        \"Value\": \"0\"\n      }\n    ],\n    \"Args\": {\n      \"Name\": \"args\",\n      \"Description\": \"command line arguments\",\n      \"Settable\": [\n        \"et exercitation\",\n        \"ut eiusmod in nisi\"\n      ],\n      \"Value\": [\n        \"quis sit ut\",\n        \"ad in reprehen\"\n      ]\n    },\n    \"DockerVersion\": \"17.06.0-ce\",\n    \"User\": {\n      \"UID\": 1000,\n      \"GID\": 1000\n    },\n    \"rootfs\": {\n      \"type\": \"layers\",\n      \"diff_ids\": [\n        \"sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887\",\n        \"sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8\"\n      ]\n    }\n  },\n  \"Name\": \"tiborvass/sample-volume-plugin\",\n  \"Id\": \"5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078\",\n  \"PluginReference\": \"localhost:5000/tiborvass/sample-volume-plugin:latest\"\n}"
								},
								{
									"name": "plugin is not installed",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/json",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"json"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/json",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"json"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Enable a plugin",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/plugins/:name/enable?timeout=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										":name",
										"enable"
									],
									"query": [
										{
											"key": "timeout",
											"value": "0",
											"description": "Set the HTTP client timeout (in seconds)"
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "anim incididunt",
											"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/enable?timeout=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"enable"
											],
											"query": [
												{
													"key": "timeout",
													"value": "0"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "plugin is not installed",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/enable?timeout=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"enable"
											],
											"query": [
												{
													"key": "timeout",
													"value": "0"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/enable?timeout=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"enable"
											],
											"query": [
												{
													"key": "timeout",
													"value": "0"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Disable a plugin",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/plugins/:name/disable",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										":name",
										"disable"
									],
									"variable": [
										{
											"key": "name",
											"value": "anim incididunt",
											"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/disable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"disable"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "plugin is not installed",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/disable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"disable"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/disable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"disable"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Upgrade a plugin",
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "A base64url-encoded auth configuration to use when pulling a plugin\nfrom a registry.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
										"key": "X-Registry-Auth",
										"value": "anim incididunt"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"Name\": \"network\",\n    \"Description\": \"laboris Duis\",\n    \"Value\": [\n      \"host\"\n    ]\n  },\n  {\n    \"Name\": \"network\",\n    \"Description\": \"adipisicing in Duis ex\",\n    \"Value\": [\n      \"host\"\n    ]\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/plugins/:name/upgrade?remote=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										":name",
										"upgrade"
									],
									"query": [
										{
											"key": "remote",
											"value": "anim incididunt",
											"description": "(Required) Remote reference to upgrade to.\n\nThe `:latest` tag is optional, and is used as the default if omitted.\n"
										}
									],
									"variable": [
										{
											"key": "name",
											"value": "anim incididunt",
											"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "A base64url-encoded auth configuration to use when pulling a plugin\nfrom a registry.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
												"key": "X-Registry-Auth",
												"value": "anim incididunt"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/upgrade?remote=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"upgrade"
											],
											"query": [
												{
													"key": "remote",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "plugin not installed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "A base64url-encoded auth configuration to use when pulling a plugin\nfrom a registry.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
												"key": "X-Registry-Auth",
												"value": "anim incididunt"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/upgrade?remote=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"upgrade"
											],
											"query": [
												{
													"key": "remote",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "A base64url-encoded auth configuration to use when pulling a plugin\nfrom a registry.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
												"key": "X-Registry-Auth",
												"value": "anim incididunt"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/upgrade?remote=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"upgrade"
											],
											"query": [
												{
													"key": "remote",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Push a plugin",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/plugins/:name/push",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										":name",
										"push"
									],
									"variable": [
										{
											"key": "name",
											"value": "anim incididunt",
											"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
										}
									]
								},
								"description": "Push a plugin to the registry.\n"
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/push",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"push"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "plugin not installed",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/push",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"push"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/push",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"push"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Configure a plugin",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"DEBUG=1\"\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/plugins/:name/set",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										":name",
										"set"
									],
									"variable": [
										{
											"key": "name",
											"value": "anim incididunt",
											"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
										}
									]
								}
							},
							"response": [
								{
									"name": "No error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"DEBUG=1\"\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/set",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"set"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Plugin not installed",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"DEBUG=1\"\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/set",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"set"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "Server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"DEBUG=1\"\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/plugins/:name/set",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"plugins",
												":name",
												"set"
											],
											"variable": [
												{
													"key": "name",
													"value": "anim incididunt",
													"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "List plugins",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/plugins?filters=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"plugins"
							],
							"query": [
								{
									"key": "filters",
									"value": "anim incididunt",
									"description": "A JSON encoded value of the filters (a `map[string][]string`) to\nprocess on the plugin list.\n\nAvailable filters:\n\n- `capability=<capability name>`\n- `enable=<true>|<false>`\n"
								}
							]
						},
						"description": "Returns information about installed plugins."
					},
					"response": [
						{
							"name": "No error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"Settings\": {\n      \"Args\": [\n        \"in ullamco\",\n        \"al\"\n      ],\n      \"Devices\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"Env\": [\n        \"DEBUG=0\"\n      ],\n      \"Mounts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"Enabled\": true,\n    \"Config\": {\n      \"Description\": \"A sample volume plugin for Docker\",\n      \"Documentation\": \"/engine/extend/plugins/\",\n      \"Interface\": {\n        \"Types\": [\n          \"docker.volumedriver/1.0\"\n        ],\n        \"Socket\": \"plugins.sock\",\n        \"ProtocolScheme\": \"moby.plugins.http/v1\"\n      },\n      \"Entrypoint\": [\n        \"/usr/bin/sample-volume-plugin\",\n        \"/data\"\n      ],\n      \"WorkDir\": \"/bin/\",\n      \"Network\": {\n        \"Type\": \"host\"\n      },\n      \"Linux\": {\n        \"Capabilities\": [\n          \"CAP_SYS_ADMIN\",\n          \"CAP_SYSLOG\"\n        ],\n        \"AllowAllDevices\": false,\n        \"Devices\": [\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        ]\n      },\n      \"PidHost\": false,\n      \"PropagatedMount\": \"/mnt/volumes\",\n      \"IpcHost\": false,\n      \"Mounts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"Env\": [\n        {\n          \"Name\": \"DEBUG\",\n          \"Description\": \"If set, prints debug messages\",\n          \"Settable\": null,\n          \"Value\": \"0\"\n        }\n      ],\n      \"Args\": {\n        \"Name\": \"args\",\n        \"Description\": \"command line arguments\",\n        \"Settable\": [\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        ],\n        \"Value\": [\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        ]\n      },\n      \"DockerVersion\": \"17.06.0-ce\",\n      \"User\": {\n        \"UID\": 1000,\n        \"GID\": 1000\n      },\n      \"rootfs\": {\n        \"type\": \"layers\",\n        \"diff_ids\": [\n          \"sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887\",\n          \"sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8\"\n        ]\n      }\n    },\n    \"Name\": \"tiborvass/sample-volume-plugin\",\n    \"Id\": \"5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078\",\n    \"PluginReference\": \"localhost:5000/tiborvass/sample-volume-plugin:latest\"\n  },\n  {\n    \"Settings\": {\n      \"Args\": [\n        \"consequat aliquip culpa\",\n        \"proident\"\n      ],\n      \"Devices\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"Env\": [\n        \"DEBUG=0\"\n      ],\n      \"Mounts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"Enabled\": true,\n    \"Config\": {\n      \"Description\": \"A sample volume plugin for Docker\",\n      \"Documentation\": \"/engine/extend/plugins/\",\n      \"Interface\": {\n        \"Types\": [\n          \"docker.volumedriver/1.0\"\n        ],\n        \"Socket\": \"plugins.sock\",\n        \"ProtocolScheme\": \"\"\n      },\n      \"Entrypoint\": [\n        \"/usr/bin/sample-volume-plugin\",\n        \"/data\"\n      ],\n      \"WorkDir\": \"/bin/\",\n      \"Network\": {\n        \"Type\": \"host\"\n      },\n      \"Linux\": {\n        \"Capabilities\": [\n          \"CAP_SYS_ADMIN\",\n          \"CAP_SYSLOG\"\n        ],\n        \"AllowAllDevices\": false,\n        \"Devices\": [\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        ]\n      },\n      \"PidHost\": false,\n      \"PropagatedMount\": \"/mnt/volumes\",\n      \"IpcHost\": false,\n      \"Mounts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"Env\": [\n        {\n          \"Name\": \"DEBUG\",\n          \"Description\": \"If set, prints debug messages\",\n          \"Settable\": null,\n          \"Value\": \"0\"\n        }\n      ],\n      \"Args\": {\n        \"Name\": \"args\",\n        \"Description\": \"command line arguments\",\n        \"Settable\": [\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        ],\n        \"Value\": [\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        ]\n      },\n      \"DockerVersion\": \"17.06.0-ce\",\n      \"User\": {\n        \"UID\": 1000,\n        \"GID\": 1000\n      },\n      \"rootfs\": {\n        \"type\": \"layers\",\n        \"diff_ids\": [\n          \"sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887\",\n          \"sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8\"\n        ]\n      }\n    },\n    \"Name\": \"tiborvass/sample-volume-plugin\",\n    \"Id\": \"5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078\",\n    \"PluginReference\": \"localhost:5000/tiborvass/sample-volume-plugin:latest\"\n  }\n]"
						},
						{
							"name": "Server error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Get plugin privileges",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/plugins/privileges?remote=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"plugins",
								"privileges"
							],
							"query": [
								{
									"key": "remote",
									"value": "anim incididunt",
									"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins/privileges?remote=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										"privileges"
									],
									"query": [
										{
											"key": "remote",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"Name\": \"network\",\n    \"Description\": \"\",\n    \"Value\": [\n      \"host\"\n    ]\n  },\n  {\n    \"Name\": \"mount\",\n    \"Description\": \"\",\n    \"Value\": [\n      \"/data\"\n    ]\n  },\n  {\n    \"Name\": \"device\",\n    \"Description\": \"\",\n    \"Value\": [\n      \"/dev/cpu_dma_latency\"\n    ]\n  }\n]"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/plugins/privileges?remote=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										"privileges"
									],
									"query": [
										{
											"key": "remote",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Install a plugin",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "A base64url-encoded auth configuration to use when pulling a plugin\nfrom a registry.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
								"key": "X-Registry-Auth",
								"value": "anim incididunt"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"Name\": \"network\",\n    \"Description\": \"fugiat veniam eu aliqua\",\n    \"Value\": [\n      \"host\"\n    ]\n  },\n  {\n    \"Name\": \"network\",\n    \"Description\": \"est et nisi ullamco\",\n    \"Value\": [\n      \"host\"\n    ]\n  }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/plugins/pull?remote=anim incididunt&name=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"plugins",
								"pull"
							],
							"query": [
								{
									"key": "remote",
									"value": "anim incididunt",
									"description": "(Required) Remote reference for plugin to install.\n\nThe `:latest` tag is optional, and is used as the default if omitted.\n"
								},
								{
									"key": "name",
									"value": "anim incididunt",
									"description": "Local name for the pulled plugin.\n\nThe `:latest` tag is optional, and is used as the default if omitted.\n"
								}
							]
						},
						"description": "Pulls and installs a plugin. After the plugin is installed, it can be\nenabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable).\n"
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "A base64url-encoded auth configuration to use when pulling a plugin\nfrom a registry.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
										"key": "X-Registry-Auth",
										"value": "anim incididunt"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/plugins/pull?remote=anim incididunt&name=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										"pull"
									],
									"query": [
										{
											"key": "remote",
											"value": "anim incididunt"
										},
										{
											"key": "name",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "A base64url-encoded auth configuration to use when pulling a plugin\nfrom a registry.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
										"key": "X-Registry-Auth",
										"value": "anim incididunt"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/plugins/pull?remote=anim incididunt&name=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										"pull"
									],
									"query": [
										{
											"key": "remote",
											"value": "anim incididunt"
										},
										{
											"key": "name",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Create a plugin",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-tar"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "{{baseUrl}}/plugins/create?name=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"plugins",
								"create"
							],
							"query": [
								{
									"key": "name",
									"value": "anim incididunt",
									"description": "(Required) The name of the plugin. The `:latest` tag is optional, and is the\ndefault if omitted.\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {}
								},
								"url": {
									"raw": "{{baseUrl}}/plugins/create?name=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										"create"
									],
									"query": [
										{
											"key": "name",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {}
								},
								"url": {
									"raw": "{{baseUrl}}/plugins/create?name=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"plugins",
										"create"
									],
									"query": [
										{
											"key": "name",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "nodes",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Inspect a node",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/nodes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodes",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) The ID or name of the node"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nodes/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID or name of the node"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"ID\": \"24ifsmvkjbyhk\",\n  \"Version\": {\n    \"Index\": 373531\n  },\n  \"CreatedAt\": \"2016-08-18T10:44:24.496525531Z\",\n  \"UpdatedAt\": \"2017-08-09T07:09:37.632105588Z\",\n  \"Spec\": {\n    \"Availability\": \"active\",\n    \"Name\": \"node-name\",\n    \"Role\": \"manager\",\n    \"Labels\": {\n      \"foo\": \"bar\"\n    }\n  },\n  \"Description\": {\n    \"Hostname\": \"bf3067039e47\",\n    \"Platform\": {\n      \"Architecture\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"OS\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Resources\": {\n      \"NanoCPUs\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"MemoryBytes\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"GenericResources\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Engine\": {\n      \"EngineVersion\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Labels\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Plugins\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"TLSInfo\": {\n      \"TrustRoot\": \"-----BEGIN CERTIFICATE-----\\nMIIBajCCARCgAwIBAgIUbYqrLSOSQHoxD8CwG6Bi2PJi9c8wCgYIKoZIzj0EAwIw\\nEzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMTcwNDI0MjE0MzAwWhcNMzcwNDE5MjE0\\nMzAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH\\nA0IABJk/VyMPYdaqDXJb/VXh5n/1Yuv7iNrxV3Qb3l06XD46seovcDWs3IZNV1lf\\n3Skyr0ofcchipoiHkXBODojJydSjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB\\nAf8EBTADAQH/MB0GA1UdDgQWBBRUXxuRcnFjDfR/RIAUQab8ZV/n4jAKBggqhkjO\\nPQQDAgNIADBFAiAy+JTe6Uc3KyLCMiqGl2GyWGQqQDEcO3/YG36x7om65AIhAJvz\\npxv6zFeVEkAEEkqIYi0omA9+CjanB/6Bz4n1uw8H\\n-----END CERTIFICATE-----\\n\",\n      \"CertIssuerSubject\": \"MBMxETAPBgNVBAMTCHN3YXJtLWNh\",\n      \"CertIssuerPublicKey\": \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEmT9XIw9h1qoNclv9VeHmf/Vi6/uI2vFXdBveXTpcPjqx6i9wNazchk1XWV/dKTKvSh9xyGKmiIeRcE4OiMnJ1A==\"\n    }\n  },\n  \"Status\": {\n    \"State\": \"ready\",\n    \"Message\": \"\",\n    \"Addr\": \"172.17.0.2\"\n  },\n  \"ManagerStatus\": {\n    \"Leader\": true,\n    \"Reachability\": \"reachable\",\n    \"Addr\": \"10.0.0.46:2377\"\n  }\n}"
								},
								{
									"name": "no such node",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nodes/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID or name of the node"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nodes/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID or name of the node"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "node is not part of a swarm",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nodes/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID or name of the node"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Delete a node",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/nodes/:id?force=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodes",
										":id"
									],
									"query": [
										{
											"key": "force",
											"value": "false",
											"description": "Force remove a node from the swarm"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) The ID or name of the node"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nodes/:id?force=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":id"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID or name of the node"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "no such node",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nodes/:id?force=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":id"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID or name of the node"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nodes/:id?force=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":id"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID or name of the node"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "node is not part of a swarm",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nodes/:id?force=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":id"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID or name of the node"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Update a node",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Availability\": \"active\",\n  \"Name\": \"node-name\",\n  \"Role\": \"manager\",\n  \"Labels\": {\n    \"foo\": \"bar\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/nodes/:id/update?version=-74142093",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodes",
										":id",
										"update"
									],
									"query": [
										{
											"key": "version",
											"value": "-74142093",
											"description": "(Required) The version number of the node object being updated. This is required\nto avoid conflicting writes.\n"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) The ID of the node"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Availability\": \"active\",\n  \"Name\": \"node-name\",\n  \"Role\": \"manager\",\n  \"Labels\": {\n    \"foo\": \"bar\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/nodes/:id/update?version=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID of the node"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad parameter",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Availability\": \"active\",\n  \"Name\": \"node-name\",\n  \"Role\": \"manager\",\n  \"Labels\": {\n    \"foo\": \"bar\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/nodes/:id/update?version=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID of the node"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "no such node",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Availability\": \"active\",\n  \"Name\": \"node-name\",\n  \"Role\": \"manager\",\n  \"Labels\": {\n    \"foo\": \"bar\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/nodes/:id/update?version=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID of the node"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Availability\": \"active\",\n  \"Name\": \"node-name\",\n  \"Role\": \"manager\",\n  \"Labels\": {\n    \"foo\": \"bar\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/nodes/:id/update?version=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID of the node"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "node is not part of a swarm",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Availability\": \"active\",\n  \"Name\": \"node-name\",\n  \"Role\": \"manager\",\n  \"Labels\": {\n    \"foo\": \"bar\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/nodes/:id/update?version=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID of the node"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "List nodes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nodes?filters=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nodes"
							],
							"query": [
								{
									"key": "filters",
									"value": "anim incididunt",
									"description": "Filters to process on the nodes list, encoded as JSON (a `map[string][]string`).\n\nAvailable filters:\n- `id=<node id>`\n- `label=<engine label>`\n- `membership=`(`accepted`|`pending`)`\n- `name=<node name>`\n- `node.label=<node label>`\n- `role=`(`manager`|`worker`)`\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/nodes?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodes"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"ID\": \"24ifsmvkjbyhk\",\n    \"Version\": {\n      \"Index\": 373531\n    },\n    \"CreatedAt\": \"2016-08-18T10:44:24.496525531Z\",\n    \"UpdatedAt\": \"2017-08-09T07:09:37.632105588Z\",\n    \"Spec\": {\n      \"Availability\": \"active\",\n      \"Name\": \"node-name\",\n      \"Role\": \"manager\",\n      \"Labels\": {\n        \"foo\": \"bar\"\n      }\n    },\n    \"Description\": {\n      \"Hostname\": \"bf3067039e47\",\n      \"Platform\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Resources\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Engine\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"TLSInfo\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Status\": {\n      \"State\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Message\": \"\",\n      \"Addr\": \"172.17.0.2\"\n    },\n    \"ManagerStatus\": {\n      \"Leader\": true,\n      \"Reachability\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Addr\": \"10.0.0.46:2377\"\n    }\n  },\n  {\n    \"ID\": \"24ifsmvkjbyhk\",\n    \"Version\": {\n      \"Index\": 373531\n    },\n    \"CreatedAt\": \"2016-08-18T10:44:24.496525531Z\",\n    \"UpdatedAt\": \"2017-08-09T07:09:37.632105588Z\",\n    \"Spec\": {\n      \"Availability\": \"active\",\n      \"Name\": \"node-name\",\n      \"Role\": \"manager\",\n      \"Labels\": {\n        \"foo\": \"bar\"\n      }\n    },\n    \"Description\": {\n      \"Hostname\": \"bf3067039e47\",\n      \"Platform\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Resources\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Engine\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"TLSInfo\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Status\": {\n      \"State\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Message\": \"\",\n      \"Addr\": \"172.17.0.2\"\n    },\n    \"ManagerStatus\": {\n      \"Leader\": true,\n      \"Reachability\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Addr\": \"10.0.0.46:2377\"\n    }\n  }\n]"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/nodes?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodes"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "node is not part of a swarm",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/nodes?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodes"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "swarm",
			"item": [
				{
					"name": "Inspect swarm",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/swarm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"swarm"
							]
						}
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/swarm",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"ID\": \"abajmipo7b4xz5ip2nrla6b11\",\n  \"Version\": {\n    \"Index\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"CreatedAt\": \"2016-08-18T10:44:24.496525531Z\",\n  \"UpdatedAt\": \"2017-08-09T07:09:37.632105588Z\",\n  \"Spec\": {\n    \"Name\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Labels\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Orchestration\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Raft\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"Dispatcher\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"CAConfig\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"EncryptionConfig\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"TaskDefaults\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"TLSInfo\": {\n    \"TrustRoot\": \"-----BEGIN CERTIFICATE-----\\nMIIBajCCARCgAwIBAgIUbYqrLSOSQHoxD8CwG6Bi2PJi9c8wCgYIKoZIzj0EAwIw\\nEzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMTcwNDI0MjE0MzAwWhcNMzcwNDE5MjE0\\nMzAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH\\nA0IABJk/VyMPYdaqDXJb/VXh5n/1Yuv7iNrxV3Qb3l06XD46seovcDWs3IZNV1lf\\n3Skyr0ofcchipoiHkXBODojJydSjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB\\nAf8EBTADAQH/MB0GA1UdDgQWBBRUXxuRcnFjDfR/RIAUQab8ZV/n4jAKBggqhkjO\\nPQQDAgNIADBFAiAy+JTe6Uc3KyLCMiqGl2GyWGQqQDEcO3/YG36x7om65AIhAJvz\\npxv6zFeVEkAEEkqIYi0omA9+CjanB/6Bz4n1uw8H\\n-----END CERTIFICATE-----\\n\",\n    \"CertIssuerSubject\": \"MBMxETAPBgNVBAMTCHN3YXJtLWNh\",\n    \"CertIssuerPublicKey\": \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEmT9XIw9h1qoNclv9VeHmf/Vi6/uI2vFXdBveXTpcPjqx6i9wNazchk1XWV/dKTKvSh9xyGKmiIeRcE4OiMnJ1A==\"\n  },\n  \"RootRotationInProgress\": false,\n  \"DataPathPort\": 4789,\n  \"DefaultAddrPool\": [\n    \"consequat\",\n    \"dolore ad fugiat\"\n  ],\n  \"SubnetSize\": 24,\n  \"JoinTokens\": {\n    \"Worker\": \"SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx\",\n    \"Manager\": \"SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2\"\n  }\n}"
						},
						{
							"name": "no such swarm",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/swarm",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/swarm",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "node is not part of a swarm",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/swarm",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Initialize a new swarm",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ListenAddr\": \"0.0.0.0:2377\",\n  \"AdvertiseAddr\": \"192.168.1.1:2377\",\n  \"DataPathPort\": 4789,\n  \"DefaultAddrPool\": [\n    \"10.10.0.0/8\",\n    \"20.20.0.0/8\"\n  ],\n  \"SubnetSize\": 24,\n  \"ForceNewCluster\": false,\n  \"Spec\": {\n    \"Orchestration\": {},\n    \"Raft\": {},\n    \"Dispatcher\": {},\n    \"CAConfig\": {},\n    \"EncryptionConfig\": {\n      \"AutoLockManagers\": false\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/swarm/init",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"swarm",
								"init"
							]
						}
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ListenAddr\": \"0.0.0.0:2377\",\n  \"AdvertiseAddr\": \"192.168.1.1:2377\",\n  \"DataPathPort\": 4789,\n  \"DefaultAddrPool\": [\n    \"10.10.0.0/8\",\n    \"20.20.0.0/8\"\n  ],\n  \"SubnetSize\": 24,\n  \"ForceNewCluster\": false,\n  \"Spec\": {\n    \"Orchestration\": {},\n    \"Raft\": {},\n    \"Dispatcher\": {},\n    \"CAConfig\": {},\n    \"EncryptionConfig\": {\n      \"AutoLockManagers\": false\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/swarm/init",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"init"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"7v2t30z9blmxuhnyo6s4cpenp\""
						},
						{
							"name": "bad parameter",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ListenAddr\": \"0.0.0.0:2377\",\n  \"AdvertiseAddr\": \"192.168.1.1:2377\",\n  \"DataPathPort\": 4789,\n  \"DefaultAddrPool\": [\n    \"10.10.0.0/8\",\n    \"20.20.0.0/8\"\n  ],\n  \"SubnetSize\": 24,\n  \"ForceNewCluster\": false,\n  \"Spec\": {\n    \"Orchestration\": {},\n    \"Raft\": {},\n    \"Dispatcher\": {},\n    \"CAConfig\": {},\n    \"EncryptionConfig\": {\n      \"AutoLockManagers\": false\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/swarm/init",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"init"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ListenAddr\": \"0.0.0.0:2377\",\n  \"AdvertiseAddr\": \"192.168.1.1:2377\",\n  \"DataPathPort\": 4789,\n  \"DefaultAddrPool\": [\n    \"10.10.0.0/8\",\n    \"20.20.0.0/8\"\n  ],\n  \"SubnetSize\": 24,\n  \"ForceNewCluster\": false,\n  \"Spec\": {\n    \"Orchestration\": {},\n    \"Raft\": {},\n    \"Dispatcher\": {},\n    \"CAConfig\": {},\n    \"EncryptionConfig\": {\n      \"AutoLockManagers\": false\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/swarm/init",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"init"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "node is already part of a swarm",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ListenAddr\": \"0.0.0.0:2377\",\n  \"AdvertiseAddr\": \"192.168.1.1:2377\",\n  \"DataPathPort\": 4789,\n  \"DefaultAddrPool\": [\n    \"10.10.0.0/8\",\n    \"20.20.0.0/8\"\n  ],\n  \"SubnetSize\": 24,\n  \"ForceNewCluster\": false,\n  \"Spec\": {\n    \"Orchestration\": {},\n    \"Raft\": {},\n    \"Dispatcher\": {},\n    \"CAConfig\": {},\n    \"EncryptionConfig\": {\n      \"AutoLockManagers\": false\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/swarm/init",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"init"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Join an existing swarm",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ListenAddr\": \"0.0.0.0:2377\",\n  \"AdvertiseAddr\": \"192.168.1.1:2377\",\n  \"RemoteAddrs\": [\n    \"node1:2377\"\n  ],\n  \"JoinToken\": \"SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/swarm/join",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"swarm",
								"join"
							]
						}
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ListenAddr\": \"magna ad sed eu\",\n  \"AdvertiseAddr\": \"do nulla sint sunt\",\n  \"DataPathAddr\": \"nostrud fugiat velit ut minim\",\n  \"RemoteAddrs\": [\n    \"magna\",\n    \"laboris aute veniam elit voluptate\"\n  ],\n  \"JoinToken\": \"ullamco nulla irure adipisicing\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/swarm/join",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"join"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "bad parameter",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ListenAddr\": \"magna ad sed eu\",\n  \"AdvertiseAddr\": \"do nulla sint sunt\",\n  \"DataPathAddr\": \"nostrud fugiat velit ut minim\",\n  \"RemoteAddrs\": [\n    \"magna\",\n    \"laboris aute veniam elit voluptate\"\n  ],\n  \"JoinToken\": \"ullamco nulla irure adipisicing\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/swarm/join",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"join"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ListenAddr\": \"magna ad sed eu\",\n  \"AdvertiseAddr\": \"do nulla sint sunt\",\n  \"DataPathAddr\": \"nostrud fugiat velit ut minim\",\n  \"RemoteAddrs\": [\n    \"magna\",\n    \"laboris aute veniam elit voluptate\"\n  ],\n  \"JoinToken\": \"ullamco nulla irure adipisicing\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/swarm/join",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"join"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "node is already part of a swarm",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ListenAddr\": \"magna ad sed eu\",\n  \"AdvertiseAddr\": \"do nulla sint sunt\",\n  \"DataPathAddr\": \"nostrud fugiat velit ut minim\",\n  \"RemoteAddrs\": [\n    \"magna\",\n    \"laboris aute veniam elit voluptate\"\n  ],\n  \"JoinToken\": \"ullamco nulla irure adipisicing\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/swarm/join",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"join"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Leave a swarm",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/swarm/leave?force=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"swarm",
								"leave"
							],
							"query": [
								{
									"key": "force",
									"value": "false",
									"description": "Force leave swarm, even if this is the last manager or that it will\nbreak the cluster.\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/swarm/leave?force=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"leave"
									],
									"query": [
										{
											"key": "force",
											"value": "false"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/swarm/leave?force=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"leave"
									],
									"query": [
										{
											"key": "force",
											"value": "false"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "node is not part of a swarm",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/swarm/leave?force=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"leave"
									],
									"query": [
										{
											"key": "force",
											"value": "false"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Update a swarm",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Name\": \"default\",\n  \"Labels\": {\n    \"com.example.corp.type\": \"production\",\n    \"com.example.corp.department\": \"engineering\"\n  },\n  \"Orchestration\": {\n    \"TaskHistoryRetentionLimit\": 10\n  },\n  \"Raft\": {\n    \"SnapshotInterval\": 10000,\n    \"KeepOldSnapshots\": -80956626,\n    \"LogEntriesForSlowFollowers\": 500,\n    \"ElectionTick\": 3,\n    \"HeartbeatTick\": 1\n  },\n  \"Dispatcher\": {\n    \"HeartbeatPeriod\": 5000000000\n  },\n  \"CAConfig\": {\n    \"NodeCertExpiry\": 7776000000000000,\n    \"ExternalCAs\": [\n      {\n        \"Protocol\": \"cfssl\",\n        \"URL\": \"ipsum dolor elit eu\",\n        \"Options\": {\n          \"animb\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"ea_be9\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"ut_497\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        \"CACert\": \"ulla\"\n      },\n      {\n        \"Protocol\": \"cfssl\",\n        \"URL\": \"occaecat quis incididunt\",\n        \"Options\": {\n          \"Ut_19\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        \"CACert\": \"tempor fugiat ut eu\"\n      }\n    ],\n    \"SigningCACert\": \"ipsum exercitation\",\n    \"SigningCAKey\": \"culpa labore laboris ea\",\n    \"ForceRotate\": 41857056\n  },\n  \"EncryptionConfig\": {\n    \"AutoLockManagers\": false\n  },\n  \"TaskDefaults\": {\n    \"LogDriver\": {\n      \"Name\": \"json-file\",\n      \"Options\": {\n        \"max-file\": \"10\",\n        \"max-size\": \"100m\"\n      }\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/swarm/update?version=-74142093&rotateWorkerToken=false&rotateManagerToken=false&rotateManagerUnlockKey=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"swarm",
								"update"
							],
							"query": [
								{
									"key": "version",
									"value": "-74142093",
									"description": "(Required) The version number of the swarm object being updated. This is\nrequired to avoid conflicting writes.\n"
								},
								{
									"key": "rotateWorkerToken",
									"value": "false",
									"description": "Rotate the worker join token."
								},
								{
									"key": "rotateManagerToken",
									"value": "false",
									"description": "Rotate the manager join token."
								},
								{
									"key": "rotateManagerUnlockKey",
									"value": "false",
									"description": "Rotate the manager unlock key."
								}
							]
						}
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"default\",\n  \"Labels\": {\n    \"com.example.corp.type\": \"production\",\n    \"com.example.corp.department\": \"engineering\"\n  },\n  \"Orchestration\": {\n    \"TaskHistoryRetentionLimit\": 10\n  },\n  \"Raft\": {\n    \"SnapshotInterval\": 10000,\n    \"KeepOldSnapshots\": -80956626,\n    \"LogEntriesForSlowFollowers\": 500,\n    \"ElectionTick\": 3,\n    \"HeartbeatTick\": 1\n  },\n  \"Dispatcher\": {\n    \"HeartbeatPeriod\": 5000000000\n  },\n  \"CAConfig\": {\n    \"NodeCertExpiry\": 7776000000000000,\n    \"ExternalCAs\": [\n      {\n        \"Protocol\": \"cfssl\",\n        \"URL\": \"ipsum dolor elit eu\",\n        \"Options\": {\n          \"animb\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"ea_be9\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"ut_497\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        \"CACert\": \"ulla\"\n      },\n      {\n        \"Protocol\": \"cfssl\",\n        \"URL\": \"occaecat quis incididunt\",\n        \"Options\": {\n          \"Ut_19\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        \"CACert\": \"tempor fugiat ut eu\"\n      }\n    ],\n    \"SigningCACert\": \"ipsum exercitation\",\n    \"SigningCAKey\": \"culpa labore laboris ea\",\n    \"ForceRotate\": 41857056\n  },\n  \"EncryptionConfig\": {\n    \"AutoLockManagers\": false\n  },\n  \"TaskDefaults\": {\n    \"LogDriver\": {\n      \"Name\": \"json-file\",\n      \"Options\": {\n        \"max-file\": \"10\",\n        \"max-size\": \"100m\"\n      }\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/swarm/update?version=-74142093&rotateWorkerToken=false&rotateManagerToken=false&rotateManagerUnlockKey=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"update"
									],
									"query": [
										{
											"key": "version",
											"value": "-74142093"
										},
										{
											"key": "rotateWorkerToken",
											"value": "false"
										},
										{
											"key": "rotateManagerToken",
											"value": "false"
										},
										{
											"key": "rotateManagerUnlockKey",
											"value": "false"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "bad parameter",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"default\",\n  \"Labels\": {\n    \"com.example.corp.type\": \"production\",\n    \"com.example.corp.department\": \"engineering\"\n  },\n  \"Orchestration\": {\n    \"TaskHistoryRetentionLimit\": 10\n  },\n  \"Raft\": {\n    \"SnapshotInterval\": 10000,\n    \"KeepOldSnapshots\": -80956626,\n    \"LogEntriesForSlowFollowers\": 500,\n    \"ElectionTick\": 3,\n    \"HeartbeatTick\": 1\n  },\n  \"Dispatcher\": {\n    \"HeartbeatPeriod\": 5000000000\n  },\n  \"CAConfig\": {\n    \"NodeCertExpiry\": 7776000000000000,\n    \"ExternalCAs\": [\n      {\n        \"Protocol\": \"cfssl\",\n        \"URL\": \"ipsum dolor elit eu\",\n        \"Options\": {\n          \"animb\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"ea_be9\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"ut_497\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        \"CACert\": \"ulla\"\n      },\n      {\n        \"Protocol\": \"cfssl\",\n        \"URL\": \"occaecat quis incididunt\",\n        \"Options\": {\n          \"Ut_19\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        \"CACert\": \"tempor fugiat ut eu\"\n      }\n    ],\n    \"SigningCACert\": \"ipsum exercitation\",\n    \"SigningCAKey\": \"culpa labore laboris ea\",\n    \"ForceRotate\": 41857056\n  },\n  \"EncryptionConfig\": {\n    \"AutoLockManagers\": false\n  },\n  \"TaskDefaults\": {\n    \"LogDriver\": {\n      \"Name\": \"json-file\",\n      \"Options\": {\n        \"max-file\": \"10\",\n        \"max-size\": \"100m\"\n      }\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/swarm/update?version=-74142093&rotateWorkerToken=false&rotateManagerToken=false&rotateManagerUnlockKey=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"update"
									],
									"query": [
										{
											"key": "version",
											"value": "-74142093"
										},
										{
											"key": "rotateWorkerToken",
											"value": "false"
										},
										{
											"key": "rotateManagerToken",
											"value": "false"
										},
										{
											"key": "rotateManagerUnlockKey",
											"value": "false"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"default\",\n  \"Labels\": {\n    \"com.example.corp.type\": \"production\",\n    \"com.example.corp.department\": \"engineering\"\n  },\n  \"Orchestration\": {\n    \"TaskHistoryRetentionLimit\": 10\n  },\n  \"Raft\": {\n    \"SnapshotInterval\": 10000,\n    \"KeepOldSnapshots\": -80956626,\n    \"LogEntriesForSlowFollowers\": 500,\n    \"ElectionTick\": 3,\n    \"HeartbeatTick\": 1\n  },\n  \"Dispatcher\": {\n    \"HeartbeatPeriod\": 5000000000\n  },\n  \"CAConfig\": {\n    \"NodeCertExpiry\": 7776000000000000,\n    \"ExternalCAs\": [\n      {\n        \"Protocol\": \"cfssl\",\n        \"URL\": \"ipsum dolor elit eu\",\n        \"Options\": {\n          \"animb\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"ea_be9\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"ut_497\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        \"CACert\": \"ulla\"\n      },\n      {\n        \"Protocol\": \"cfssl\",\n        \"URL\": \"occaecat quis incididunt\",\n        \"Options\": {\n          \"Ut_19\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        \"CACert\": \"tempor fugiat ut eu\"\n      }\n    ],\n    \"SigningCACert\": \"ipsum exercitation\",\n    \"SigningCAKey\": \"culpa labore laboris ea\",\n    \"ForceRotate\": 41857056\n  },\n  \"EncryptionConfig\": {\n    \"AutoLockManagers\": false\n  },\n  \"TaskDefaults\": {\n    \"LogDriver\": {\n      \"Name\": \"json-file\",\n      \"Options\": {\n        \"max-file\": \"10\",\n        \"max-size\": \"100m\"\n      }\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/swarm/update?version=-74142093&rotateWorkerToken=false&rotateManagerToken=false&rotateManagerUnlockKey=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"update"
									],
									"query": [
										{
											"key": "version",
											"value": "-74142093"
										},
										{
											"key": "rotateWorkerToken",
											"value": "false"
										},
										{
											"key": "rotateManagerToken",
											"value": "false"
										},
										{
											"key": "rotateManagerUnlockKey",
											"value": "false"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "node is not part of a swarm",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"default\",\n  \"Labels\": {\n    \"com.example.corp.type\": \"production\",\n    \"com.example.corp.department\": \"engineering\"\n  },\n  \"Orchestration\": {\n    \"TaskHistoryRetentionLimit\": 10\n  },\n  \"Raft\": {\n    \"SnapshotInterval\": 10000,\n    \"KeepOldSnapshots\": -80956626,\n    \"LogEntriesForSlowFollowers\": 500,\n    \"ElectionTick\": 3,\n    \"HeartbeatTick\": 1\n  },\n  \"Dispatcher\": {\n    \"HeartbeatPeriod\": 5000000000\n  },\n  \"CAConfig\": {\n    \"NodeCertExpiry\": 7776000000000000,\n    \"ExternalCAs\": [\n      {\n        \"Protocol\": \"cfssl\",\n        \"URL\": \"ipsum dolor elit eu\",\n        \"Options\": {\n          \"animb\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"ea_be9\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"ut_497\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        \"CACert\": \"ulla\"\n      },\n      {\n        \"Protocol\": \"cfssl\",\n        \"URL\": \"occaecat quis incididunt\",\n        \"Options\": {\n          \"Ut_19\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        \"CACert\": \"tempor fugiat ut eu\"\n      }\n    ],\n    \"SigningCACert\": \"ipsum exercitation\",\n    \"SigningCAKey\": \"culpa labore laboris ea\",\n    \"ForceRotate\": 41857056\n  },\n  \"EncryptionConfig\": {\n    \"AutoLockManagers\": false\n  },\n  \"TaskDefaults\": {\n    \"LogDriver\": {\n      \"Name\": \"json-file\",\n      \"Options\": {\n        \"max-file\": \"10\",\n        \"max-size\": \"100m\"\n      }\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/swarm/update?version=-74142093&rotateWorkerToken=false&rotateManagerToken=false&rotateManagerUnlockKey=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"update"
									],
									"query": [
										{
											"key": "version",
											"value": "-74142093"
										},
										{
											"key": "rotateWorkerToken",
											"value": "false"
										},
										{
											"key": "rotateManagerToken",
											"value": "false"
										},
										{
											"key": "rotateManagerUnlockKey",
											"value": "false"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Get the unlock key",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/swarm/unlockkey",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"swarm",
								"unlockkey"
							]
						}
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/swarm/unlockkey",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"unlockkey"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"UnlockKey\": \"SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8\"\n}"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/swarm/unlockkey",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"unlockkey"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "node is not part of a swarm",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/swarm/unlockkey",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"unlockkey"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Unlock a locked manager",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"UnlockKey\": \"SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/swarm/unlock",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"swarm",
								"unlock"
							]
						}
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"UnlockKey\": \"SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/swarm/unlock",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"unlock"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"UnlockKey\": \"SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/swarm/unlock",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"unlock"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "node is not part of a swarm",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"UnlockKey\": \"SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/swarm/unlock",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"swarm",
										"unlock"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "services",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Inspect a service",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/services/:id?insertDefaults=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"services",
										":id"
									],
									"query": [
										{
											"key": "insertDefaults",
											"value": "false",
											"description": "Fill empty fields with default values."
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of service."
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/services/:id?insertDefaults=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"services",
												":id"
											],
											"query": [
												{
													"key": "insertDefaults",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of service."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"ID\": \"anim elit reprehenderit\",\n  \"Version\": {\n    \"Index\": 373531\n  },\n  \"CreatedAt\": \"consequat Lorem eiusmod adipisicing irure\",\n  \"UpdatedAt\": \"in Duis\",\n  \"Spec\": {\n    \"Name\": \"enim ad dolore ut\",\n    \"Labels\": {\n      \"ut_f11\": \"dolor cillum magn\",\n      \"minim_8a1\": \"exercitation pariatur\"\n    },\n    \"TaskTemplate\": {\n      \"PluginSpec\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ContainerSpec\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"NetworkAttachmentSpec\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Resources\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"RestartPolicy\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Placement\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ForceUpdate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Runtime\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Networks\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"LogDriver\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Mode\": {\n      \"Replicated\": {\n        \"Replicas\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"Global\": {},\n      \"ReplicatedJob\": {\n        \"MaxConcurrent\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"TotalCompletions\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"GlobalJob\": {}\n    },\n    \"UpdateConfig\": {\n      \"Parallelism\": -37852757,\n      \"Delay\": 30082050,\n      \"FailureAction\": \"pause\",\n      \"Monitor\": -86114784,\n      \"MaxFailureRatio\": 0,\n      \"Order\": \"stop-first\"\n    },\n    \"RollbackConfig\": {\n      \"Parallelism\": 83520157,\n      \"Delay\": 44296346,\n      \"FailureAction\": \"continue\",\n      \"Monitor\": -77285281,\n      \"MaxFailureRatio\": 0,\n      \"Order\": \"start-first\"\n    },\n    \"Networks\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"EndpointSpec\": {\n      \"Mode\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Ports\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"Endpoint\": {\n    \"Spec\": {\n      \"Mode\": \"vip\",\n      \"Ports\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"Ports\": [\n      {\n        \"Name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Protocol\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"TargetPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"PublishedPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"PublishMode\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"Name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Protocol\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"TargetPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"PublishedPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"PublishMode\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ],\n    \"VirtualIPs\": [\n      {\n        \"NetworkID\": \"sit ad non qui\",\n        \"Addr\": \"sit in consequat\"\n      },\n      {\n        \"NetworkID\": \"fugiat est velit reprehenderit\",\n        \"Addr\": \"incididunt\"\n      }\n    ]\n  },\n  \"UpdateStatus\": {\n    \"State\": \"completed\",\n    \"StartedAt\": \"id laborum ut\",\n    \"CompletedAt\": \"irure ut adipisicing tempor\",\n    \"Message\": \"quis nostrud\"\n  },\n  \"ServiceStatus\": {\n    \"RunningTasks\": 7,\n    \"DesiredTasks\": 10,\n    \"CompletedTasks\": 11743210\n  },\n  \"JobStatus\": {\n    \"JobIteration\": {\n      \"Index\": 373531\n    },\n    \"LastExecution\": \"adipisicing amet officia occaecat\"\n  }\n}"
								},
								{
									"name": "no such service",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/services/:id?insertDefaults=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"services",
												":id"
											],
											"query": [
												{
													"key": "insertDefaults",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of service."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/services/:id?insertDefaults=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"services",
												":id"
											],
											"query": [
												{
													"key": "insertDefaults",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of service."
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "node is not part of a swarm",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/services/:id?insertDefaults=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"services",
												":id"
											],
											"query": [
												{
													"key": "insertDefaults",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of service."
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Delete a service",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/services/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"services",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of service."
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/services/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"services",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of service."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "no such service",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/services/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"services",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of service."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/services/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"services",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of service."
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "node is not part of a swarm",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/services/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"services",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of service."
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Update a service",
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "A base64url-encoded auth configuration for pulling from private\nregistries.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
										"key": "X-Registry-Auth",
										"value": "anim incididunt"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"top\",\n  \"TaskTemplate\": {\n    \"ContainerSpec\": {\n      \"Image\": \"busybox\",\n      \"Args\": [\n        \"top\"\n      ]\n    },\n    \"Resources\": {\n      \"Limits\": {},\n      \"Reservations\": {}\n    },\n    \"RestartPolicy\": {\n      \"Condition\": \"any\",\n      \"MaxAttempts\": 0\n    },\n    \"Placement\": {},\n    \"ForceUpdate\": 0\n  },\n  \"Mode\": {\n    \"Replicated\": {\n      \"Replicas\": 1\n    }\n  },\n  \"UpdateConfig\": {\n    \"Parallelism\": 2,\n    \"Delay\": 1000000000,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 15000000000,\n    \"MaxFailureRatio\": 0.15\n  },\n  \"RollbackConfig\": {\n    \"Parallelism\": 1,\n    \"Delay\": 1000000000,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 15000000000,\n    \"MaxFailureRatio\": 0.15\n  },\n  \"EndpointSpec\": {\n    \"Mode\": \"vip\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/services/:id/update?version=-74142093&registryAuthFrom=spec&rollback=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"services",
										":id",
										"update"
									],
									"query": [
										{
											"key": "version",
											"value": "-74142093",
											"description": "(Required) The version number of the service object being updated. This is\nrequired to avoid conflicting writes.\nThis version number should be the value as currently set on the\nservice *before* the update. You can find the current version by\ncalling `GET /services/{id}`\n"
										},
										{
											"key": "registryAuthFrom",
											"value": "spec",
											"description": "If the `X-Registry-Auth` header is not specified, this parameter\nindicates where to find registry authorization credentials.\n"
										},
										{
											"key": "rollback",
											"value": "anim incididunt",
											"description": "Set to this parameter to `previous` to cause a server-side rollback\nto the previous service spec. The supplied spec will be ignored in\nthis case.\n"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of service."
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "A base64url-encoded auth configuration for pulling from private\nregistries.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
												"key": "X-Registry-Auth",
												"value": "anim incididunt"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"top\",\n  \"TaskTemplate\": {\n    \"ContainerSpec\": {\n      \"Image\": \"busybox\",\n      \"Args\": [\n        \"top\"\n      ]\n    },\n    \"Resources\": {\n      \"Limits\": {},\n      \"Reservations\": {}\n    },\n    \"RestartPolicy\": {\n      \"Condition\": \"any\",\n      \"MaxAttempts\": 0\n    },\n    \"Placement\": {},\n    \"ForceUpdate\": 0\n  },\n  \"Mode\": {\n    \"Replicated\": {\n      \"Replicas\": 1\n    }\n  },\n  \"UpdateConfig\": {\n    \"Parallelism\": 2,\n    \"Delay\": 1000000000,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 15000000000,\n    \"MaxFailureRatio\": 0.15\n  },\n  \"RollbackConfig\": {\n    \"Parallelism\": 1,\n    \"Delay\": 1000000000,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 15000000000,\n    \"MaxFailureRatio\": 0.15\n  },\n  \"EndpointSpec\": {\n    \"Mode\": \"vip\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/services/:id/update?version=-74142093&registryAuthFrom=spec&rollback=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"services",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												},
												{
													"key": "registryAuthFrom",
													"value": "spec"
												},
												{
													"key": "rollback",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of service."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"Warning\": \"unable to pin image doesnotexist:latest to digest: image library/doesnotexist:latest not found\"\n}"
								},
								{
									"name": "bad parameter",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "A base64url-encoded auth configuration for pulling from private\nregistries.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
												"key": "X-Registry-Auth",
												"value": "anim incididunt"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"top\",\n  \"TaskTemplate\": {\n    \"ContainerSpec\": {\n      \"Image\": \"busybox\",\n      \"Args\": [\n        \"top\"\n      ]\n    },\n    \"Resources\": {\n      \"Limits\": {},\n      \"Reservations\": {}\n    },\n    \"RestartPolicy\": {\n      \"Condition\": \"any\",\n      \"MaxAttempts\": 0\n    },\n    \"Placement\": {},\n    \"ForceUpdate\": 0\n  },\n  \"Mode\": {\n    \"Replicated\": {\n      \"Replicas\": 1\n    }\n  },\n  \"UpdateConfig\": {\n    \"Parallelism\": 2,\n    \"Delay\": 1000000000,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 15000000000,\n    \"MaxFailureRatio\": 0.15\n  },\n  \"RollbackConfig\": {\n    \"Parallelism\": 1,\n    \"Delay\": 1000000000,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 15000000000,\n    \"MaxFailureRatio\": 0.15\n  },\n  \"EndpointSpec\": {\n    \"Mode\": \"vip\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/services/:id/update?version=-74142093&registryAuthFrom=spec&rollback=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"services",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												},
												{
													"key": "registryAuthFrom",
													"value": "spec"
												},
												{
													"key": "rollback",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of service."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "no such service",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "A base64url-encoded auth configuration for pulling from private\nregistries.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
												"key": "X-Registry-Auth",
												"value": "anim incididunt"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"top\",\n  \"TaskTemplate\": {\n    \"ContainerSpec\": {\n      \"Image\": \"busybox\",\n      \"Args\": [\n        \"top\"\n      ]\n    },\n    \"Resources\": {\n      \"Limits\": {},\n      \"Reservations\": {}\n    },\n    \"RestartPolicy\": {\n      \"Condition\": \"any\",\n      \"MaxAttempts\": 0\n    },\n    \"Placement\": {},\n    \"ForceUpdate\": 0\n  },\n  \"Mode\": {\n    \"Replicated\": {\n      \"Replicas\": 1\n    }\n  },\n  \"UpdateConfig\": {\n    \"Parallelism\": 2,\n    \"Delay\": 1000000000,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 15000000000,\n    \"MaxFailureRatio\": 0.15\n  },\n  \"RollbackConfig\": {\n    \"Parallelism\": 1,\n    \"Delay\": 1000000000,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 15000000000,\n    \"MaxFailureRatio\": 0.15\n  },\n  \"EndpointSpec\": {\n    \"Mode\": \"vip\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/services/:id/update?version=-74142093&registryAuthFrom=spec&rollback=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"services",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												},
												{
													"key": "registryAuthFrom",
													"value": "spec"
												},
												{
													"key": "rollback",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of service."
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "A base64url-encoded auth configuration for pulling from private\nregistries.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
												"key": "X-Registry-Auth",
												"value": "anim incididunt"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"top\",\n  \"TaskTemplate\": {\n    \"ContainerSpec\": {\n      \"Image\": \"busybox\",\n      \"Args\": [\n        \"top\"\n      ]\n    },\n    \"Resources\": {\n      \"Limits\": {},\n      \"Reservations\": {}\n    },\n    \"RestartPolicy\": {\n      \"Condition\": \"any\",\n      \"MaxAttempts\": 0\n    },\n    \"Placement\": {},\n    \"ForceUpdate\": 0\n  },\n  \"Mode\": {\n    \"Replicated\": {\n      \"Replicas\": 1\n    }\n  },\n  \"UpdateConfig\": {\n    \"Parallelism\": 2,\n    \"Delay\": 1000000000,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 15000000000,\n    \"MaxFailureRatio\": 0.15\n  },\n  \"RollbackConfig\": {\n    \"Parallelism\": 1,\n    \"Delay\": 1000000000,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 15000000000,\n    \"MaxFailureRatio\": 0.15\n  },\n  \"EndpointSpec\": {\n    \"Mode\": \"vip\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/services/:id/update?version=-74142093&registryAuthFrom=spec&rollback=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"services",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												},
												{
													"key": "registryAuthFrom",
													"value": "spec"
												},
												{
													"key": "rollback",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of service."
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "node is not part of a swarm",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "A base64url-encoded auth configuration for pulling from private\nregistries.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
												"key": "X-Registry-Auth",
												"value": "anim incididunt"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"top\",\n  \"TaskTemplate\": {\n    \"ContainerSpec\": {\n      \"Image\": \"busybox\",\n      \"Args\": [\n        \"top\"\n      ]\n    },\n    \"Resources\": {\n      \"Limits\": {},\n      \"Reservations\": {}\n    },\n    \"RestartPolicy\": {\n      \"Condition\": \"any\",\n      \"MaxAttempts\": 0\n    },\n    \"Placement\": {},\n    \"ForceUpdate\": 0\n  },\n  \"Mode\": {\n    \"Replicated\": {\n      \"Replicas\": 1\n    }\n  },\n  \"UpdateConfig\": {\n    \"Parallelism\": 2,\n    \"Delay\": 1000000000,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 15000000000,\n    \"MaxFailureRatio\": 0.15\n  },\n  \"RollbackConfig\": {\n    \"Parallelism\": 1,\n    \"Delay\": 1000000000,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 15000000000,\n    \"MaxFailureRatio\": 0.15\n  },\n  \"EndpointSpec\": {\n    \"Mode\": \"vip\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/services/:id/update?version=-74142093&registryAuthFrom=spec&rollback=anim incididunt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"services",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												},
												{
													"key": "registryAuthFrom",
													"value": "spec"
												},
												{
													"key": "rollback",
													"value": "anim incididunt"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of service."
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Get service logs",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/services/:id/logs?details=false&follow=false&stdout=false&stderr=false&since=0&timestamps=false&tail=all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"services",
										":id",
										"logs"
									],
									"query": [
										{
											"key": "details",
											"value": "false",
											"description": "Show service context and extra details provided to logs."
										},
										{
											"key": "follow",
											"value": "false",
											"description": "Keep connection after returning logs."
										},
										{
											"key": "stdout",
											"value": "false",
											"description": "Return logs from `stdout`"
										},
										{
											"key": "stderr",
											"value": "false",
											"description": "Return logs from `stderr`"
										},
										{
											"key": "since",
											"value": "0",
											"description": "Only return logs since this time, as a UNIX timestamp"
										},
										{
											"key": "timestamps",
											"value": "false",
											"description": "Add timestamps to every log line"
										},
										{
											"key": "tail",
											"value": "all",
											"description": "Only return this number of log lines from the end of the logs.\nSpecify as an integer or `all` to output all log lines.\n"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID or name of the service"
										}
									]
								},
								"description": "Get `stdout` and `stderr` logs from a service. See also\n[`/containers/{id}/logs`](#operation/ContainerLogs).\n\n**Note**: This endpoint works only for services with the `local`,\n`json-file` or `journald` logging drivers.\n"
							},
							"response": [
								{
									"name": "logs returned as a stream in response body",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/services/:id/logs?details=false&follow=false&stdout=false&stderr=false&since=0&timestamps=false&tail=all",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"services",
												":id",
												"logs"
											],
											"query": [
												{
													"key": "details",
													"value": "false"
												},
												{
													"key": "follow",
													"value": "false"
												},
												{
													"key": "stdout",
													"value": "false"
												},
												{
													"key": "stderr",
													"value": "false"
												},
												{
													"key": "since",
													"value": "0"
												},
												{
													"key": "timestamps",
													"value": "false"
												},
												{
													"key": "tail",
													"value": "all"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the service"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"anim incididunt\""
								},
								{
									"name": "no such service",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/services/:id/logs?details=false&follow=false&stdout=false&stderr=false&since=0&timestamps=false&tail=all",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"services",
												":id",
												"logs"
											],
											"query": [
												{
													"key": "details",
													"value": "false"
												},
												{
													"key": "follow",
													"value": "false"
												},
												{
													"key": "stdout",
													"value": "false"
												},
												{
													"key": "stderr",
													"value": "false"
												},
												{
													"key": "since",
													"value": "0"
												},
												{
													"key": "timestamps",
													"value": "false"
												},
												{
													"key": "tail",
													"value": "all"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the service"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such service: c2ada9df5af8\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/services/:id/logs?details=false&follow=false&stdout=false&stderr=false&since=0&timestamps=false&tail=all",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"services",
												":id",
												"logs"
											],
											"query": [
												{
													"key": "details",
													"value": "false"
												},
												{
													"key": "follow",
													"value": "false"
												},
												{
													"key": "stdout",
													"value": "false"
												},
												{
													"key": "stderr",
													"value": "false"
												},
												{
													"key": "since",
													"value": "0"
												},
												{
													"key": "timestamps",
													"value": "false"
												},
												{
													"key": "tail",
													"value": "all"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the service"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "node is not part of a swarm",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/services/:id/logs?details=false&follow=false&stdout=false&stderr=false&since=0&timestamps=false&tail=all",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"services",
												":id",
												"logs"
											],
											"query": [
												{
													"key": "details",
													"value": "false"
												},
												{
													"key": "follow",
													"value": "false"
												},
												{
													"key": "stdout",
													"value": "false"
												},
												{
													"key": "stderr",
													"value": "false"
												},
												{
													"key": "since",
													"value": "0"
												},
												{
													"key": "timestamps",
													"value": "false"
												},
												{
													"key": "tail",
													"value": "all"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID or name of the service"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "List services",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/services?filters=anim incididunt&status=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"services"
							],
							"query": [
								{
									"key": "filters",
									"value": "anim incididunt",
									"description": "A JSON encoded value of the filters (a `map[string][]string`) to\nprocess on the services list.\n\nAvailable filters:\n\n- `id=<service id>`\n- `label=<service label>`\n- `mode=[\"replicated\"|\"global\"]`\n- `name=<service name>`\n"
								},
								{
									"key": "status",
									"value": "true",
									"description": "Include service status, with count of running and desired tasks.\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/services?filters=anim incididunt&status=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"services"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										},
										{
											"key": "status",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"ID\": \"9mnpnzenvg8p8tdbtq4wvbkcz\",\n    \"Version\": {\n      \"Index\": 19\n    },\n    \"CreatedAt\": \"2016-06-07T21:05:51.880065305Z\",\n    \"UpdatedAt\": \"2016-06-07T21:07:29.962229872Z\",\n    \"Spec\": {\n      \"Name\": \"hopeful_cori\",\n      \"TaskTemplate\": {\n        \"ContainerSpec\": {\n          \"Image\": \"redis\"\n        },\n        \"Resources\": {\n          \"Limits\": {},\n          \"Reservations\": {}\n        },\n        \"RestartPolicy\": {\n          \"Condition\": \"any\",\n          \"MaxAttempts\": 0\n        },\n        \"Placement\": {},\n        \"ForceUpdate\": 0\n      },\n      \"Mode\": {\n        \"Replicated\": {\n          \"Replicas\": 1\n        }\n      },\n      \"UpdateConfig\": {\n        \"Parallelism\": 1,\n        \"Delay\": 1000000000,\n        \"FailureAction\": \"pause\",\n        \"Monitor\": 15000000000,\n        \"MaxFailureRatio\": 0.15\n      },\n      \"RollbackConfig\": {\n        \"Parallelism\": 1,\n        \"Delay\": 1000000000,\n        \"FailureAction\": \"pause\",\n        \"Monitor\": 15000000000,\n        \"MaxFailureRatio\": 0.15\n      },\n      \"EndpointSpec\": {\n        \"Mode\": \"vip\",\n        \"Ports\": [\n          {\n            \"Protocol\": \"tcp\",\n            \"TargetPort\": 6379,\n            \"PublishedPort\": 30001\n          }\n        ]\n      }\n    },\n    \"Endpoint\": {\n      \"Spec\": {\n        \"Mode\": \"vip\",\n        \"Ports\": [\n          {\n            \"Protocol\": \"tcp\",\n            \"TargetPort\": 6379,\n            \"PublishedPort\": 30001\n          }\n        ]\n      },\n      \"Ports\": [\n        {\n          \"Protocol\": \"tcp\",\n          \"TargetPort\": 6379,\n          \"PublishedPort\": 30001\n        }\n      ],\n      \"VirtualIPs\": [\n        {\n          \"NetworkID\": \"4qvuz4ko70xaltuqbt8956gd1\",\n          \"Addr\": \"10.255.0.2/16\"\n        },\n        {\n          \"NetworkID\": \"4qvuz4ko70xaltuqbt8956gd1\",\n          \"Addr\": \"10.255.0.3/16\"\n        }\n      ]\n    }\n  },\n  {\n    \"ID\": \"9mnpnzenvg8p8tdbtq4wvbkcz\",\n    \"Version\": {\n      \"Index\": 19\n    },\n    \"CreatedAt\": \"2016-06-07T21:05:51.880065305Z\",\n    \"UpdatedAt\": \"2016-06-07T21:07:29.962229872Z\",\n    \"Spec\": {\n      \"Name\": \"hopeful_cori\",\n      \"TaskTemplate\": {\n        \"ContainerSpec\": {\n          \"Image\": \"redis\"\n        },\n        \"Resources\": {\n          \"Limits\": {},\n          \"Reservations\": {}\n        },\n        \"RestartPolicy\": {\n          \"Condition\": \"any\",\n          \"MaxAttempts\": 0\n        },\n        \"Placement\": {},\n        \"ForceUpdate\": 0\n      },\n      \"Mode\": {\n        \"Replicated\": {\n          \"Replicas\": 1\n        }\n      },\n      \"UpdateConfig\": {\n        \"Parallelism\": 1,\n        \"Delay\": 1000000000,\n        \"FailureAction\": \"pause\",\n        \"Monitor\": 15000000000,\n        \"MaxFailureRatio\": 0.15\n      },\n      \"RollbackConfig\": {\n        \"Parallelism\": 1,\n        \"Delay\": 1000000000,\n        \"FailureAction\": \"pause\",\n        \"Monitor\": 15000000000,\n        \"MaxFailureRatio\": 0.15\n      },\n      \"EndpointSpec\": {\n        \"Mode\": \"vip\",\n        \"Ports\": [\n          {\n            \"Protocol\": \"tcp\",\n            \"TargetPort\": 6379,\n            \"PublishedPort\": 30001\n          }\n        ]\n      }\n    },\n    \"Endpoint\": {\n      \"Spec\": {\n        \"Mode\": \"vip\",\n        \"Ports\": [\n          {\n            \"Protocol\": \"tcp\",\n            \"TargetPort\": 6379,\n            \"PublishedPort\": 30001\n          }\n        ]\n      },\n      \"Ports\": [\n        {\n          \"Protocol\": \"tcp\",\n          \"TargetPort\": 6379,\n          \"PublishedPort\": 30001\n        }\n      ],\n      \"VirtualIPs\": [\n        {\n          \"NetworkID\": \"4qvuz4ko70xaltuqbt8956gd1\",\n          \"Addr\": \"10.255.0.2/16\"\n        },\n        {\n          \"NetworkID\": \"4qvuz4ko70xaltuqbt8956gd1\",\n          \"Addr\": \"10.255.0.3/16\"\n        }\n      ]\n    }\n  }\n]"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/services?filters=anim incididunt&status=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"services"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										},
										{
											"key": "status",
											"value": "true"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "node is not part of a swarm",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/services?filters=anim incididunt&status=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"services"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										},
										{
											"key": "status",
											"value": "true"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Create a service",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "A base64url-encoded auth configuration for pulling from private\nregistries.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
								"key": "X-Registry-Auth",
								"value": "anim incididunt"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Name\": \"web\",\n  \"TaskTemplate\": {\n    \"ContainerSpec\": {\n      \"Image\": \"nginx:alpine\",\n      \"Mounts\": [\n        {\n          \"ReadOnly\": true,\n          \"Source\": \"web-data\",\n          \"Target\": \"/usr/share/nginx/html\",\n          \"Type\": \"volume\",\n          \"VolumeOptions\": {\n            \"DriverConfig\": {},\n            \"Labels\": {\n              \"com.example.something\": \"something-value\"\n            }\n          }\n        }\n      ],\n      \"Hosts\": [\n        \"10.10.10.10 host1\",\n        \"ABCD:EF01:2345:6789:ABCD:EF01:2345:6789 host2\"\n      ],\n      \"User\": \"33\",\n      \"DNSConfig\": {\n        \"Nameservers\": [\n          \"8.8.8.8\"\n        ],\n        \"Search\": [\n          \"example.org\"\n        ],\n        \"Options\": [\n          \"timeout:3\"\n        ]\n      },\n      \"Secrets\": [\n        {\n          \"File\": {\n            \"Name\": \"www.example.org.key\",\n            \"UID\": \"33\",\n            \"GID\": \"33\",\n            \"Mode\": 384\n          },\n          \"SecretID\": \"fpjqlhnwb19zds35k8wn80lq9\",\n          \"SecretName\": \"example_org_domain_key\"\n        }\n      ]\n    },\n    \"LogDriver\": {\n      \"Name\": \"json-file\",\n      \"Options\": {\n        \"max-file\": \"3\",\n        \"max-size\": \"10M\"\n      }\n    },\n    \"Placement\": {},\n    \"Resources\": {\n      \"Limits\": {\n        \"MemoryBytes\": 104857600\n      },\n      \"Reservations\": {}\n    },\n    \"RestartPolicy\": {\n      \"Condition\": \"on-failure\",\n      \"Delay\": 10000000000,\n      \"MaxAttempts\": 10\n    }\n  },\n  \"Mode\": {\n    \"Replicated\": {\n      \"Replicas\": 4\n    }\n  },\n  \"UpdateConfig\": {\n    \"Parallelism\": 2,\n    \"Delay\": 1000000000,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 15000000000,\n    \"MaxFailureRatio\": 0.15\n  },\n  \"RollbackConfig\": {\n    \"Parallelism\": 1,\n    \"Delay\": 1000000000,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 15000000000,\n    \"MaxFailureRatio\": 0.15\n  },\n  \"EndpointSpec\": {\n    \"Ports\": [\n      {\n        \"Protocol\": \"tcp\",\n        \"PublishedPort\": 8080,\n        \"TargetPort\": 80\n      }\n    ]\n  },\n  \"Labels\": {\n    \"foo\": \"bar\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/services/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"services",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "A base64url-encoded auth configuration for pulling from private\nregistries.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
										"key": "X-Registry-Auth",
										"value": "anim incididunt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"cupidatat officia laborum sint magna\",\n  \"Labels\": {\n    \"nostrud25\": \"laboris labore\",\n    \"dolor3e\": \"elit qui ipsum et ea\"\n  },\n  \"TaskTemplate\": {\n    \"PluginSpec\": {\n      \"Name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Remote\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Disabled\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"PluginPrivilege\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"ContainerSpec\": {\n      \"Image\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Labels\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Command\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Args\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Hostname\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Env\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Dir\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"User\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Groups\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Privileges\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"TTY\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"OpenStdin\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ReadOnly\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Mounts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"StopSignal\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"StopGracePeriod\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"HealthCheck\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Hosts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DNSConfig\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Secrets\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Configs\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Isolation\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Init\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Sysctls\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"CapabilityAdd\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"CapabilityDrop\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Ulimits\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"NetworkAttachmentSpec\": {\n      \"ContainerID\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Resources\": {\n      \"Limits\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Reservations\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"RestartPolicy\": {\n      \"Condition\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Delay\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"MaxAttempts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Window\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Placement\": {\n      \"Constraints\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Preferences\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"MaxReplicas\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Platforms\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"ForceUpdate\": 2386132,\n    \"Runtime\": \"elit exercitation magna\",\n    \"Networks\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"LogDriver\": {\n      \"Name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Options\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"Mode\": {\n    \"Replicated\": {\n      \"Replicas\": 87206827\n    },\n    \"Global\": {},\n    \"ReplicatedJob\": {\n      \"MaxConcurrent\": 1,\n      \"TotalCompletions\": 19119545\n    },\n    \"GlobalJob\": {}\n  },\n  \"UpdateConfig\": {\n    \"Parallelism\": 22349876,\n    \"Delay\": -58011306,\n    \"FailureAction\": \"rollback\",\n    \"Monitor\": -25577074,\n    \"MaxFailureRatio\": 0,\n    \"Order\": \"stop-first\"\n  },\n  \"RollbackConfig\": {\n    \"Parallelism\": -55626760,\n    \"Delay\": 33938825,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 38849904,\n    \"MaxFailureRatio\": 0,\n    \"Order\": \"stop-first\"\n  },\n  \"Networks\": [\n    {\n      \"Target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Aliases\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DriverOpts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Aliases\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DriverOpts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"EndpointSpec\": {\n    \"Mode\": \"vip\",\n    \"Ports\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/services/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"services",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"ID\": \"ak7w3gjqoa3kuz8xcpnyy0pvl\",\n  \"Warning\": \"unable to pin image doesnotexist:latest to digest: image library/doesnotexist:latest not found\"\n}"
						},
						{
							"name": "bad parameter",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "A base64url-encoded auth configuration for pulling from private\nregistries.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
										"key": "X-Registry-Auth",
										"value": "anim incididunt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"cupidatat officia laborum sint magna\",\n  \"Labels\": {\n    \"nostrud25\": \"laboris labore\",\n    \"dolor3e\": \"elit qui ipsum et ea\"\n  },\n  \"TaskTemplate\": {\n    \"PluginSpec\": {\n      \"Name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Remote\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Disabled\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"PluginPrivilege\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"ContainerSpec\": {\n      \"Image\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Labels\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Command\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Args\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Hostname\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Env\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Dir\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"User\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Groups\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Privileges\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"TTY\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"OpenStdin\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ReadOnly\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Mounts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"StopSignal\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"StopGracePeriod\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"HealthCheck\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Hosts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DNSConfig\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Secrets\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Configs\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Isolation\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Init\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Sysctls\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"CapabilityAdd\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"CapabilityDrop\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Ulimits\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"NetworkAttachmentSpec\": {\n      \"ContainerID\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Resources\": {\n      \"Limits\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Reservations\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"RestartPolicy\": {\n      \"Condition\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Delay\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"MaxAttempts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Window\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Placement\": {\n      \"Constraints\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Preferences\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"MaxReplicas\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Platforms\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"ForceUpdate\": 2386132,\n    \"Runtime\": \"elit exercitation magna\",\n    \"Networks\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"LogDriver\": {\n      \"Name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Options\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"Mode\": {\n    \"Replicated\": {\n      \"Replicas\": 87206827\n    },\n    \"Global\": {},\n    \"ReplicatedJob\": {\n      \"MaxConcurrent\": 1,\n      \"TotalCompletions\": 19119545\n    },\n    \"GlobalJob\": {}\n  },\n  \"UpdateConfig\": {\n    \"Parallelism\": 22349876,\n    \"Delay\": -58011306,\n    \"FailureAction\": \"rollback\",\n    \"Monitor\": -25577074,\n    \"MaxFailureRatio\": 0,\n    \"Order\": \"stop-first\"\n  },\n  \"RollbackConfig\": {\n    \"Parallelism\": -55626760,\n    \"Delay\": 33938825,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 38849904,\n    \"MaxFailureRatio\": 0,\n    \"Order\": \"stop-first\"\n  },\n  \"Networks\": [\n    {\n      \"Target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Aliases\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DriverOpts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Aliases\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DriverOpts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"EndpointSpec\": {\n    \"Mode\": \"vip\",\n    \"Ports\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/services/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"services",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "network is not eligible for services",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "A base64url-encoded auth configuration for pulling from private\nregistries.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
										"key": "X-Registry-Auth",
										"value": "anim incididunt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"cupidatat officia laborum sint magna\",\n  \"Labels\": {\n    \"nostrud25\": \"laboris labore\",\n    \"dolor3e\": \"elit qui ipsum et ea\"\n  },\n  \"TaskTemplate\": {\n    \"PluginSpec\": {\n      \"Name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Remote\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Disabled\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"PluginPrivilege\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"ContainerSpec\": {\n      \"Image\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Labels\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Command\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Args\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Hostname\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Env\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Dir\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"User\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Groups\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Privileges\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"TTY\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"OpenStdin\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ReadOnly\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Mounts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"StopSignal\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"StopGracePeriod\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"HealthCheck\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Hosts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DNSConfig\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Secrets\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Configs\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Isolation\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Init\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Sysctls\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"CapabilityAdd\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"CapabilityDrop\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Ulimits\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"NetworkAttachmentSpec\": {\n      \"ContainerID\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Resources\": {\n      \"Limits\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Reservations\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"RestartPolicy\": {\n      \"Condition\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Delay\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"MaxAttempts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Window\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Placement\": {\n      \"Constraints\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Preferences\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"MaxReplicas\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Platforms\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"ForceUpdate\": 2386132,\n    \"Runtime\": \"elit exercitation magna\",\n    \"Networks\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"LogDriver\": {\n      \"Name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Options\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"Mode\": {\n    \"Replicated\": {\n      \"Replicas\": 87206827\n    },\n    \"Global\": {},\n    \"ReplicatedJob\": {\n      \"MaxConcurrent\": 1,\n      \"TotalCompletions\": 19119545\n    },\n    \"GlobalJob\": {}\n  },\n  \"UpdateConfig\": {\n    \"Parallelism\": 22349876,\n    \"Delay\": -58011306,\n    \"FailureAction\": \"rollback\",\n    \"Monitor\": -25577074,\n    \"MaxFailureRatio\": 0,\n    \"Order\": \"stop-first\"\n  },\n  \"RollbackConfig\": {\n    \"Parallelism\": -55626760,\n    \"Delay\": 33938825,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 38849904,\n    \"MaxFailureRatio\": 0,\n    \"Order\": \"stop-first\"\n  },\n  \"Networks\": [\n    {\n      \"Target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Aliases\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DriverOpts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Aliases\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DriverOpts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"EndpointSpec\": {\n    \"Mode\": \"vip\",\n    \"Ports\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/services/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"services",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "name conflicts with an existing service",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "A base64url-encoded auth configuration for pulling from private\nregistries.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
										"key": "X-Registry-Auth",
										"value": "anim incididunt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"cupidatat officia laborum sint magna\",\n  \"Labels\": {\n    \"nostrud25\": \"laboris labore\",\n    \"dolor3e\": \"elit qui ipsum et ea\"\n  },\n  \"TaskTemplate\": {\n    \"PluginSpec\": {\n      \"Name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Remote\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Disabled\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"PluginPrivilege\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"ContainerSpec\": {\n      \"Image\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Labels\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Command\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Args\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Hostname\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Env\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Dir\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"User\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Groups\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Privileges\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"TTY\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"OpenStdin\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ReadOnly\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Mounts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"StopSignal\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"StopGracePeriod\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"HealthCheck\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Hosts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DNSConfig\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Secrets\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Configs\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Isolation\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Init\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Sysctls\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"CapabilityAdd\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"CapabilityDrop\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Ulimits\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"NetworkAttachmentSpec\": {\n      \"ContainerID\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Resources\": {\n      \"Limits\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Reservations\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"RestartPolicy\": {\n      \"Condition\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Delay\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"MaxAttempts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Window\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Placement\": {\n      \"Constraints\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Preferences\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"MaxReplicas\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Platforms\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"ForceUpdate\": 2386132,\n    \"Runtime\": \"elit exercitation magna\",\n    \"Networks\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"LogDriver\": {\n      \"Name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Options\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"Mode\": {\n    \"Replicated\": {\n      \"Replicas\": 87206827\n    },\n    \"Global\": {},\n    \"ReplicatedJob\": {\n      \"MaxConcurrent\": 1,\n      \"TotalCompletions\": 19119545\n    },\n    \"GlobalJob\": {}\n  },\n  \"UpdateConfig\": {\n    \"Parallelism\": 22349876,\n    \"Delay\": -58011306,\n    \"FailureAction\": \"rollback\",\n    \"Monitor\": -25577074,\n    \"MaxFailureRatio\": 0,\n    \"Order\": \"stop-first\"\n  },\n  \"RollbackConfig\": {\n    \"Parallelism\": -55626760,\n    \"Delay\": 33938825,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 38849904,\n    \"MaxFailureRatio\": 0,\n    \"Order\": \"stop-first\"\n  },\n  \"Networks\": [\n    {\n      \"Target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Aliases\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DriverOpts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Aliases\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DriverOpts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"EndpointSpec\": {\n    \"Mode\": \"vip\",\n    \"Ports\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/services/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"services",
										"create"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "A base64url-encoded auth configuration for pulling from private\nregistries.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
										"key": "X-Registry-Auth",
										"value": "anim incididunt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"cupidatat officia laborum sint magna\",\n  \"Labels\": {\n    \"nostrud25\": \"laboris labore\",\n    \"dolor3e\": \"elit qui ipsum et ea\"\n  },\n  \"TaskTemplate\": {\n    \"PluginSpec\": {\n      \"Name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Remote\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Disabled\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"PluginPrivilege\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"ContainerSpec\": {\n      \"Image\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Labels\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Command\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Args\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Hostname\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Env\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Dir\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"User\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Groups\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Privileges\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"TTY\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"OpenStdin\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ReadOnly\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Mounts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"StopSignal\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"StopGracePeriod\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"HealthCheck\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Hosts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DNSConfig\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Secrets\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Configs\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Isolation\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Init\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Sysctls\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"CapabilityAdd\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"CapabilityDrop\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Ulimits\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"NetworkAttachmentSpec\": {\n      \"ContainerID\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Resources\": {\n      \"Limits\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Reservations\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"RestartPolicy\": {\n      \"Condition\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Delay\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"MaxAttempts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Window\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Placement\": {\n      \"Constraints\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Preferences\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"MaxReplicas\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Platforms\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"ForceUpdate\": 2386132,\n    \"Runtime\": \"elit exercitation magna\",\n    \"Networks\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"LogDriver\": {\n      \"Name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Options\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"Mode\": {\n    \"Replicated\": {\n      \"Replicas\": 87206827\n    },\n    \"Global\": {},\n    \"ReplicatedJob\": {\n      \"MaxConcurrent\": 1,\n      \"TotalCompletions\": 19119545\n    },\n    \"GlobalJob\": {}\n  },\n  \"UpdateConfig\": {\n    \"Parallelism\": 22349876,\n    \"Delay\": -58011306,\n    \"FailureAction\": \"rollback\",\n    \"Monitor\": -25577074,\n    \"MaxFailureRatio\": 0,\n    \"Order\": \"stop-first\"\n  },\n  \"RollbackConfig\": {\n    \"Parallelism\": -55626760,\n    \"Delay\": 33938825,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 38849904,\n    \"MaxFailureRatio\": 0,\n    \"Order\": \"stop-first\"\n  },\n  \"Networks\": [\n    {\n      \"Target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Aliases\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DriverOpts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Aliases\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DriverOpts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"EndpointSpec\": {\n    \"Mode\": \"vip\",\n    \"Ports\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/services/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"services",
										"create"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "node is not part of a swarm",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "A base64url-encoded auth configuration for pulling from private\nregistries.\n\nRefer to the [authentication section](#section/Authentication) for\ndetails.\n",
										"key": "X-Registry-Auth",
										"value": "anim incididunt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"cupidatat officia laborum sint magna\",\n  \"Labels\": {\n    \"nostrud25\": \"laboris labore\",\n    \"dolor3e\": \"elit qui ipsum et ea\"\n  },\n  \"TaskTemplate\": {\n    \"PluginSpec\": {\n      \"Name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Remote\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Disabled\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"PluginPrivilege\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"ContainerSpec\": {\n      \"Image\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Labels\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Command\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Args\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Hostname\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Env\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Dir\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"User\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Groups\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Privileges\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"TTY\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"OpenStdin\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"ReadOnly\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Mounts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"StopSignal\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"StopGracePeriod\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"HealthCheck\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Hosts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DNSConfig\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Secrets\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Configs\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Isolation\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Init\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Sysctls\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"CapabilityAdd\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"CapabilityDrop\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Ulimits\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"NetworkAttachmentSpec\": {\n      \"ContainerID\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Resources\": {\n      \"Limits\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Reservations\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"RestartPolicy\": {\n      \"Condition\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Delay\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"MaxAttempts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Window\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"Placement\": {\n      \"Constraints\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Preferences\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"MaxReplicas\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Platforms\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"ForceUpdate\": 2386132,\n    \"Runtime\": \"elit exercitation magna\",\n    \"Networks\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"LogDriver\": {\n      \"Name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Options\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"Mode\": {\n    \"Replicated\": {\n      \"Replicas\": 87206827\n    },\n    \"Global\": {},\n    \"ReplicatedJob\": {\n      \"MaxConcurrent\": 1,\n      \"TotalCompletions\": 19119545\n    },\n    \"GlobalJob\": {}\n  },\n  \"UpdateConfig\": {\n    \"Parallelism\": 22349876,\n    \"Delay\": -58011306,\n    \"FailureAction\": \"rollback\",\n    \"Monitor\": -25577074,\n    \"MaxFailureRatio\": 0,\n    \"Order\": \"stop-first\"\n  },\n  \"RollbackConfig\": {\n    \"Parallelism\": -55626760,\n    \"Delay\": 33938825,\n    \"FailureAction\": \"pause\",\n    \"Monitor\": 38849904,\n    \"MaxFailureRatio\": 0,\n    \"Order\": \"stop-first\"\n  },\n  \"Networks\": [\n    {\n      \"Target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Aliases\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DriverOpts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"Target\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Aliases\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DriverOpts\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"EndpointSpec\": {\n    \"Mode\": \"vip\",\n    \"Ports\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/services/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"services",
										"create"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "tasks",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Inspect a task",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tasks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID of the task"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the task"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"ID\": \"adipisicing Duis\",\n  \"Version\": {\n    \"Index\": 373531\n  },\n  \"CreatedAt\": \"commodo eu ut\",\n  \"UpdatedAt\": \"esse\",\n  \"Name\": \"aliqua ut laboris nostrud\",\n  \"Labels\": {\n    \"ea19\": \"aliqua sint ut\",\n    \"magna_e\": \"adipisicing eu culpa\",\n    \"ute5\": \"irure est laborum reprehenderit\",\n    \"voluptate_48\": \"cillum Excepteur ullamco\"\n  },\n  \"Spec\": {\n    \"PluginSpec\": {\n      \"Name\": \"officia dolore nulla veniam\",\n      \"Remote\": \"Excepteur \",\n      \"Disabled\": false,\n      \"PluginPrivilege\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"ContainerSpec\": {\n      \"Image\": \"dolore\",\n      \"Labels\": {\n        \"ut8\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Ut_\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"non1\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"Command\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"Args\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"Hostname\": \"exercitation Ut incididunt ad\",\n      \"Env\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"Dir\": \"inci\",\n      \"User\": \"fugiat\",\n      \"Groups\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"Privileges\": {\n        \"CredentialSpec\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"SELinuxContext\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"TTY\": false,\n      \"OpenStdin\": false,\n      \"ReadOnly\": false,\n      \"Mounts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"StopSignal\": \"aute velit\",\n      \"StopGracePeriod\": 66749971,\n      \"HealthCheck\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Hosts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"DNSConfig\": {\n        \"Nameservers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Search\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Options\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"Secrets\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"Configs\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"Isolation\": \"hyperv\",\n      \"Init\": true,\n      \"Sysctls\": {\n        \"in_bfc\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nisi52\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"CapabilityAdd\": [\n        \"CAP_NET_RAW\",\n        \"CAP_SYS_ADMIN\",\n        \"CAP_SYS_CHROOT\",\n        \"CAP_SYSLOG\"\n      ],\n      \"CapabilityDrop\": [\n        \"CAP_NET_RAW\"\n      ],\n      \"Ulimits\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"NetworkAttachmentSpec\": {\n      \"ContainerID\": \"sit proident voluptate adipisicing\"\n    },\n    \"Resources\": {\n      \"Limits\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Reservations\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"RestartPolicy\": {\n      \"Condition\": \"on-failure\",\n      \"Delay\": -64522005,\n      \"MaxAttempts\": 0,\n      \"Window\": 0\n    },\n    \"Placement\": {\n      \"Constraints\": [\n        \"node.hostname!=node3.corp.example.com\",\n        \"node.role!=manager\",\n        \"node.labels.type==production\",\n        \"node.platform.os==linux\",\n        \"node.platform.arch==x86_64\"\n      ],\n      \"Preferences\": [\n        {\n          \"Spread\": {\n            \"SpreadDescriptor\": \"node.labels.datacenter\"\n          }\n        },\n        {\n          \"Spread\": {\n            \"SpreadDescriptor\": \"node.labels.rack\"\n          }\n        }\n      ],\n      \"MaxReplicas\": 0,\n      \"Platforms\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"ForceUpdate\": 17101493,\n    \"Runtime\": \"proident nulla\",\n    \"Networks\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"LogDriver\": {\n      \"Name\": \"culpa sed\",\n      \"Options\": {\n        \"mollit9d\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"enim_ce9\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"dolore11\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"velit_bc4\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  },\n  \"ServiceID\": \"et\",\n  \"Slot\": -80099878,\n  \"NodeID\": \"nisi\",\n  \"AssignedGenericResources\": [\n    {\n      \"DiscreteResourceSpec\": {\n        \"Kind\": \"SSD\",\n        \"Value\": 3\n      }\n    },\n    {\n      \"NamedResourceSpec\": {\n        \"Kind\": \"GPU\",\n        \"Value\": \"UUID1\"\n      }\n    },\n    {\n      \"NamedResourceSpec\": {\n        \"Kind\": \"GPU\",\n        \"Value\": \"UUID2\"\n      }\n    }\n  ],\n  \"Status\": {\n    \"Timestamp\": \"anim ut Excepteur eu\",\n    \"State\": \"pending\",\n    \"Message\": \"sunt lab\",\n    \"Err\": \"laborum dolor deserunt fugiat\",\n    \"ContainerStatus\": {\n      \"ContainerID\": \"tempor\",\n      \"PID\": 78648435,\n      \"ExitCode\": 2753876\n    }\n  },\n  \"DesiredState\": \"preparing\",\n  \"JobIteration\": {\n    \"Index\": 373531\n  }\n}"
								},
								{
									"name": "no such task",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the task"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the task"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "node is not part of a swarm",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the task"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Get task logs",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tasks/:id/logs?details=false&follow=false&stdout=false&stderr=false&since=0&timestamps=false&tail=all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks",
										":id",
										"logs"
									],
									"query": [
										{
											"key": "details",
											"value": "false",
											"description": "Show task context and extra details provided to logs."
										},
										{
											"key": "follow",
											"value": "false",
											"description": "Keep connection after returning logs."
										},
										{
											"key": "stdout",
											"value": "false",
											"description": "Return logs from `stdout`"
										},
										{
											"key": "stderr",
											"value": "false",
											"description": "Return logs from `stderr`"
										},
										{
											"key": "since",
											"value": "0",
											"description": "Only return logs since this time, as a UNIX timestamp"
										},
										{
											"key": "timestamps",
											"value": "false",
											"description": "Add timestamps to every log line"
										},
										{
											"key": "tail",
											"value": "all",
											"description": "Only return this number of log lines from the end of the logs.\nSpecify as an integer or `all` to output all log lines.\n"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID of the task"
										}
									]
								},
								"description": "Get `stdout` and `stderr` logs from a task.\nSee also [`/containers/{id}/logs`](#operation/ContainerLogs).\n\n**Note**: This endpoint works only for services with the `local`,\n`json-file` or `journald` logging drivers.\n"
							},
							"response": [
								{
									"name": "logs returned as a stream in response body",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:id/logs?details=false&follow=false&stdout=false&stderr=false&since=0&timestamps=false&tail=all",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":id",
												"logs"
											],
											"query": [
												{
													"key": "details",
													"value": "false"
												},
												{
													"key": "follow",
													"value": "false"
												},
												{
													"key": "stdout",
													"value": "false"
												},
												{
													"key": "stderr",
													"value": "false"
												},
												{
													"key": "since",
													"value": "0"
												},
												{
													"key": "timestamps",
													"value": "false"
												},
												{
													"key": "tail",
													"value": "all"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the task"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"anim incididunt\""
								},
								{
									"name": "no such task",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:id/logs?details=false&follow=false&stdout=false&stderr=false&since=0&timestamps=false&tail=all",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":id",
												"logs"
											],
											"query": [
												{
													"key": "details",
													"value": "false"
												},
												{
													"key": "follow",
													"value": "false"
												},
												{
													"key": "stdout",
													"value": "false"
												},
												{
													"key": "stderr",
													"value": "false"
												},
												{
													"key": "since",
													"value": "0"
												},
												{
													"key": "timestamps",
													"value": "false"
												},
												{
													"key": "tail",
													"value": "all"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the task"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"No such task: c2ada9df5af8\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:id/logs?details=false&follow=false&stdout=false&stderr=false&since=0&timestamps=false&tail=all",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":id",
												"logs"
											],
											"query": [
												{
													"key": "details",
													"value": "false"
												},
												{
													"key": "follow",
													"value": "false"
												},
												{
													"key": "stdout",
													"value": "false"
												},
												{
													"key": "stderr",
													"value": "false"
												},
												{
													"key": "since",
													"value": "0"
												},
												{
													"key": "timestamps",
													"value": "false"
												},
												{
													"key": "tail",
													"value": "all"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the task"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "node is not part of a swarm",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/tasks/:id/logs?details=false&follow=false&stdout=false&stderr=false&since=0&timestamps=false&tail=all",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tasks",
												":id",
												"logs"
											],
											"query": [
												{
													"key": "details",
													"value": "false"
												},
												{
													"key": "follow",
													"value": "false"
												},
												{
													"key": "stdout",
													"value": "false"
												},
												{
													"key": "stderr",
													"value": "false"
												},
												{
													"key": "since",
													"value": "0"
												},
												{
													"key": "timestamps",
													"value": "false"
												},
												{
													"key": "tail",
													"value": "all"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the task"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "List tasks",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks?filters=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "filters",
									"value": "anim incididunt",
									"description": "A JSON encoded value of the filters (a `map[string][]string`) to\nprocess on the tasks list.\n\nAvailable filters:\n\n- `desired-state=(running | shutdown | accepted)`\n- `id=<task id>`\n- `label=key` or `label=\"key=value\"`\n- `name=<task name>`\n- `node=<node id or name>`\n- `service=<service name>`\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tasks?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"ID\": \"0kzzo1i0y4jz6027t0k7aezc7\",\n    \"Version\": {\n      \"Index\": 71\n    },\n    \"CreatedAt\": \"2016-06-07T21:07:31.171892745Z\",\n    \"UpdatedAt\": \"2016-06-07T21:07:31.376370513Z\",\n    \"Spec\": {\n      \"ContainerSpec\": {\n        \"Image\": \"redis\"\n      },\n      \"Resources\": {\n        \"Limits\": {},\n        \"Reservations\": {}\n      },\n      \"RestartPolicy\": {\n        \"Condition\": \"any\",\n        \"MaxAttempts\": 0\n      },\n      \"Placement\": {}\n    },\n    \"ServiceID\": \"9mnpnzenvg8p8tdbtq4wvbkcz\",\n    \"Slot\": 1,\n    \"NodeID\": \"60gvrl6tm78dmak4yl7srz94v\",\n    \"Status\": {\n      \"Timestamp\": \"2016-06-07T21:07:31.290032978Z\",\n      \"State\": \"running\",\n      \"Message\": \"started\",\n      \"ContainerStatus\": {\n        \"ContainerID\": \"e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035\",\n        \"PID\": 677\n      }\n    },\n    \"DesiredState\": \"running\",\n    \"NetworksAttachments\": [\n      {\n        \"Network\": {\n          \"ID\": \"4qvuz4ko70xaltuqbt8956gd1\",\n          \"Version\": {\n            \"Index\": 18\n          },\n          \"CreatedAt\": \"2016-06-07T20:31:11.912919752Z\",\n          \"UpdatedAt\": \"2016-06-07T21:07:29.955277358Z\",\n          \"Spec\": {\n            \"Name\": \"ingress\",\n            \"Labels\": {\n              \"com.docker.swarm.internal\": \"true\"\n            },\n            \"DriverConfiguration\": {},\n            \"IPAMOptions\": {\n              \"Driver\": {},\n              \"Configs\": [\n                {\n                  \"Subnet\": \"10.255.0.0/16\",\n                  \"Gateway\": \"10.255.0.1\"\n                }\n              ]\n            }\n          },\n          \"DriverState\": {\n            \"Name\": \"overlay\",\n            \"Options\": {\n              \"com.docker.network.driver.overlay.vxlanid_list\": \"256\"\n            }\n          },\n          \"IPAMOptions\": {\n            \"Driver\": {\n              \"Name\": \"default\"\n            },\n            \"Configs\": [\n              {\n                \"Subnet\": \"10.255.0.0/16\",\n                \"Gateway\": \"10.255.0.1\"\n              }\n            ]\n          }\n        },\n        \"Addresses\": [\n          \"10.255.0.10/16\"\n        ]\n      }\n    ]\n  },\n  {\n    \"ID\": \"1yljwbmlr8er2waf8orvqpwms\",\n    \"Version\": {\n      \"Index\": 30\n    },\n    \"CreatedAt\": \"2016-06-07T21:07:30.019104782Z\",\n    \"UpdatedAt\": \"2016-06-07T21:07:30.231958098Z\",\n    \"Name\": \"hopeful_cori\",\n    \"Spec\": {\n      \"ContainerSpec\": {\n        \"Image\": \"redis\"\n      },\n      \"Resources\": {\n        \"Limits\": {},\n        \"Reservations\": {}\n      },\n      \"RestartPolicy\": {\n        \"Condition\": \"any\",\n        \"MaxAttempts\": 0\n      },\n      \"Placement\": {}\n    },\n    \"ServiceID\": \"9mnpnzenvg8p8tdbtq4wvbkcz\",\n    \"Slot\": 1,\n    \"NodeID\": \"60gvrl6tm78dmak4yl7srz94v\",\n    \"Status\": {\n      \"Timestamp\": \"2016-06-07T21:07:30.202183143Z\",\n      \"State\": \"shutdown\",\n      \"Message\": \"shutdown\",\n      \"ContainerStatus\": {\n        \"ContainerID\": \"1cf8d63d18e79668b0004a4be4c6ee58cddfad2dae29506d8781581d0688a213\"\n      }\n    },\n    \"DesiredState\": \"shutdown\",\n    \"NetworksAttachments\": [\n      {\n        \"Network\": {\n          \"ID\": \"4qvuz4ko70xaltuqbt8956gd1\",\n          \"Version\": {\n            \"Index\": 18\n          },\n          \"CreatedAt\": \"2016-06-07T20:31:11.912919752Z\",\n          \"UpdatedAt\": \"2016-06-07T21:07:29.955277358Z\",\n          \"Spec\": {\n            \"Name\": \"ingress\",\n            \"Labels\": {\n              \"com.docker.swarm.internal\": \"true\"\n            },\n            \"DriverConfiguration\": {},\n            \"IPAMOptions\": {\n              \"Driver\": {},\n              \"Configs\": [\n                {\n                  \"Subnet\": \"10.255.0.0/16\",\n                  \"Gateway\": \"10.255.0.1\"\n                }\n              ]\n            }\n          },\n          \"DriverState\": {\n            \"Name\": \"overlay\",\n            \"Options\": {\n              \"com.docker.network.driver.overlay.vxlanid_list\": \"256\"\n            }\n          },\n          \"IPAMOptions\": {\n            \"Driver\": {\n              \"Name\": \"default\"\n            },\n            \"Configs\": [\n              {\n                \"Subnet\": \"10.255.0.0/16\",\n                \"Gateway\": \"10.255.0.1\"\n              }\n            ]\n          }\n        },\n        \"Addresses\": [\n          \"10.255.0.5/16\"\n        ]\n      }\n    ]\n  }\n]"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tasks?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "node is not part of a swarm",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/tasks?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tasks"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "secrets",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Inspect a secret",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secrets/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID of the secret"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/secrets/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the secret"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"ID\": \"ktnbjxoalbkvbvedmg1urrz8h\",\n  \"Version\": {\n    \"Index\": 11\n  },\n  \"CreatedAt\": \"2016-11-05T01:20:17.327670065Z\",\n  \"UpdatedAt\": \"2016-11-05T01:20:17.327670065Z\",\n  \"Spec\": {\n    \"Name\": \"app-dev.crt\",\n    \"Labels\": {\n      \"foo\": \"bar\"\n    },\n    \"Driver\": {\n      \"Name\": \"secret-bucket\",\n      \"Options\": {\n        \"OptionA\": \"value for driver option A\",\n        \"OptionB\": \"value for driver option B\"\n      }\n    }\n  }\n}"
								},
								{
									"name": "secret not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/secrets/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the secret"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/secrets/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the secret"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "node is not part of a swarm",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/secrets/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the secret"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Delete a secret",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secrets/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID of the secret"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/secrets/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the secret"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "secret not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/secrets/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the secret"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/secrets/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the secret"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "node is not part of a swarm",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/secrets/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the secret"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Update a Secret",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"irure sed aute\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"Data\": \"\",\n  \"Driver\": {\n    \"Name\": \"some-driver\",\n    \"Options\": {\n      \"OptionA\": \"value for driver-specific option A\",\n      \"OptionB\": \"value for driver-specific option B\"\n    }\n  },\n  \"Templating\": {\n    \"Name\": \"some-driver\",\n    \"Options\": {\n      \"OptionA\": \"value for driver-specific option A\",\n      \"OptionB\": \"value for driver-specific option B\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/secrets/:id/update?version=-74142093",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										":id",
										"update"
									],
									"query": [
										{
											"key": "version",
											"value": "-74142093",
											"description": "(Required) The version number of the secret object being updated. This is\nrequired to avoid conflicting writes.\n"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) The ID or name of the secret"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"irure sed aute\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"Data\": \"\",\n  \"Driver\": {\n    \"Name\": \"some-driver\",\n    \"Options\": {\n      \"OptionA\": \"value for driver-specific option A\",\n      \"OptionB\": \"value for driver-specific option B\"\n    }\n  },\n  \"Templating\": {\n    \"Name\": \"some-driver\",\n    \"Options\": {\n      \"OptionA\": \"value for driver-specific option A\",\n      \"OptionB\": \"value for driver-specific option B\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/:id/update?version=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID or name of the secret"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad parameter",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"irure sed aute\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"Data\": \"\",\n  \"Driver\": {\n    \"Name\": \"some-driver\",\n    \"Options\": {\n      \"OptionA\": \"value for driver-specific option A\",\n      \"OptionB\": \"value for driver-specific option B\"\n    }\n  },\n  \"Templating\": {\n    \"Name\": \"some-driver\",\n    \"Options\": {\n      \"OptionA\": \"value for driver-specific option A\",\n      \"OptionB\": \"value for driver-specific option B\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/:id/update?version=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID or name of the secret"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "no such secret",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"irure sed aute\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"Data\": \"\",\n  \"Driver\": {\n    \"Name\": \"some-driver\",\n    \"Options\": {\n      \"OptionA\": \"value for driver-specific option A\",\n      \"OptionB\": \"value for driver-specific option B\"\n    }\n  },\n  \"Templating\": {\n    \"Name\": \"some-driver\",\n    \"Options\": {\n      \"OptionA\": \"value for driver-specific option A\",\n      \"OptionB\": \"value for driver-specific option B\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/:id/update?version=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID or name of the secret"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"irure sed aute\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"Data\": \"\",\n  \"Driver\": {\n    \"Name\": \"some-driver\",\n    \"Options\": {\n      \"OptionA\": \"value for driver-specific option A\",\n      \"OptionB\": \"value for driver-specific option B\"\n    }\n  },\n  \"Templating\": {\n    \"Name\": \"some-driver\",\n    \"Options\": {\n      \"OptionA\": \"value for driver-specific option A\",\n      \"OptionB\": \"value for driver-specific option B\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/:id/update?version=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID or name of the secret"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "node is not part of a swarm",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"irure sed aute\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"Data\": \"\",\n  \"Driver\": {\n    \"Name\": \"some-driver\",\n    \"Options\": {\n      \"OptionA\": \"value for driver-specific option A\",\n      \"OptionB\": \"value for driver-specific option B\"\n    }\n  },\n  \"Templating\": {\n    \"Name\": \"some-driver\",\n    \"Options\": {\n      \"OptionA\": \"value for driver-specific option A\",\n      \"OptionB\": \"value for driver-specific option B\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/:id/update?version=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID or name of the secret"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "List secrets",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/secrets?filters=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secrets"
							],
							"query": [
								{
									"key": "filters",
									"value": "anim incididunt",
									"description": "A JSON encoded value of the filters (a `map[string][]string`) to\nprocess on the secrets list.\n\nAvailable filters:\n\n- `id=<secret id>`\n- `label=<key> or label=<key>=value`\n- `name=<secret name>`\n- `names=<secret name>`\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/secrets?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"ID\": \"blt1owaxmitz71s9v5zh81zun\",\n    \"Version\": {\n      \"Index\": 85\n    },\n    \"CreatedAt\": \"2017-07-20T13:55:28.678958722Z\",\n    \"UpdatedAt\": \"2017-07-20T13:55:28.678958722Z\",\n    \"Spec\": {\n      \"Name\": \"mysql-passwd\",\n      \"Labels\": {\n        \"some.label\": \"some.value\"\n      },\n      \"Driver\": {\n        \"Name\": \"secret-bucket\",\n        \"Options\": {\n          \"OptionA\": \"value for driver option A\",\n          \"OptionB\": \"value for driver option B\"\n        }\n      }\n    }\n  },\n  {\n    \"ID\": \"ktnbjxoalbkvbvedmg1urrz8h\",\n    \"Version\": {\n      \"Index\": 11\n    },\n    \"CreatedAt\": \"2016-11-05T01:20:17.327670065Z\",\n    \"UpdatedAt\": \"2016-11-05T01:20:17.327670065Z\",\n    \"Spec\": {\n      \"Name\": \"app-dev.crt\",\n      \"Labels\": {\n        \"foo\": \"bar\"\n      }\n    }\n  }\n]"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/secrets?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "node is not part of a swarm",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/secrets?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Create a secret",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Name\": \"app-key.crt\",\n  \"Labels\": {\n    \"foo\": \"bar\"\n  },\n  \"Data\": \"VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==\",\n  \"Driver\": {\n    \"Name\": \"secret-bucket\",\n    \"Options\": {\n      \"OptionA\": \"value for driver option A\",\n      \"OptionB\": \"value for driver option B\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/secrets/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secrets",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"app-key.crt\",\n  \"Labels\": {\n    \"foo\": \"bar\"\n  },\n  \"Data\": \"VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==\",\n  \"Driver\": {\n    \"Name\": \"secret-bucket\",\n    \"Options\": {\n      \"OptionA\": \"value for driver option A\",\n      \"OptionB\": \"value for driver option B\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/secrets/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"Id\": \"dolore pariatur eu\"\n}"
						},
						{
							"name": "name conflicts with an existing object",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"app-key.crt\",\n  \"Labels\": {\n    \"foo\": \"bar\"\n  },\n  \"Data\": \"VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==\",\n  \"Driver\": {\n    \"Name\": \"secret-bucket\",\n    \"Options\": {\n      \"OptionA\": \"value for driver option A\",\n      \"OptionB\": \"value for driver option B\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/secrets/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										"create"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"app-key.crt\",\n  \"Labels\": {\n    \"foo\": \"bar\"\n  },\n  \"Data\": \"VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==\",\n  \"Driver\": {\n    \"Name\": \"secret-bucket\",\n    \"Options\": {\n      \"OptionA\": \"value for driver option A\",\n      \"OptionB\": \"value for driver option B\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/secrets/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										"create"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "node is not part of a swarm",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"app-key.crt\",\n  \"Labels\": {\n    \"foo\": \"bar\"\n  },\n  \"Data\": \"VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==\",\n  \"Driver\": {\n    \"Name\": \"secret-bucket\",\n    \"Options\": {\n      \"OptionA\": \"value for driver option A\",\n      \"OptionB\": \"value for driver option B\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/secrets/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										"create"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "configs",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Inspect a config",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configs/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configs",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID of the config"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/configs/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configs",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"ID\": \"ktnbjxoalbkvbvedmg1urrz8h\",\n  \"Version\": {\n    \"Index\": 11\n  },\n  \"CreatedAt\": \"2016-11-05T01:20:17.327670065Z\",\n  \"UpdatedAt\": \"2016-11-05T01:20:17.327670065Z\",\n  \"Spec\": {\n    \"Name\": \"app-dev.crt\"\n  }\n}"
								},
								{
									"name": "config not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/configs/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configs",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the config"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/configs/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configs",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the config"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "node is not part of a swarm",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/configs/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configs",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the config"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Delete a config",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configs/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configs",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) ID of the config"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/configs/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configs",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the config"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "config not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/configs/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configs",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the config"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/configs/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configs",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the config"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "node is not part of a swarm",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/configs/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configs",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) ID of the config"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						},
						{
							"name": "Update a Config",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"incididunt nisi\",\n  \"Labels\": {\n    \"dolore_d3e\": \"ipsum dolore sed \",\n    \"mollita\": \"esse amet officia incididunt\"\n  },\n  \"Data\": \"laborum mollit c\",\n  \"Templating\": {\n    \"Name\": \"some-driver\",\n    \"Options\": {\n      \"OptionA\": \"value for driver-specific option A\",\n      \"OptionB\": \"value for driver-specific option B\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configs/:id/update?version=-74142093",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configs",
										":id",
										"update"
									],
									"query": [
										{
											"key": "version",
											"value": "-74142093",
											"description": "(Required) The version number of the config object being updated. This is\nrequired to avoid conflicting writes.\n"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "anim incididunt",
											"description": "(Required) The ID or name of the config"
										}
									]
								}
							},
							"response": [
								{
									"name": "no error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"incididunt nisi\",\n  \"Labels\": {\n    \"dolore_d3e\": \"ipsum dolore sed \",\n    \"mollita\": \"esse amet officia incididunt\"\n  },\n  \"Data\": \"laborum mollit c\",\n  \"Templating\": {\n    \"Name\": \"some-driver\",\n    \"Options\": {\n      \"OptionA\": \"value for driver-specific option A\",\n      \"OptionB\": \"value for driver-specific option B\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/configs/:id/update?version=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configs",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID or name of the config"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad parameter",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"incididunt nisi\",\n  \"Labels\": {\n    \"dolore_d3e\": \"ipsum dolore sed \",\n    \"mollita\": \"esse amet officia incididunt\"\n  },\n  \"Data\": \"laborum mollit c\",\n  \"Templating\": {\n    \"Name\": \"some-driver\",\n    \"Options\": {\n      \"OptionA\": \"value for driver-specific option A\",\n      \"OptionB\": \"value for driver-specific option B\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/configs/:id/update?version=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configs",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID or name of the config"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "no such config",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"incididunt nisi\",\n  \"Labels\": {\n    \"dolore_d3e\": \"ipsum dolore sed \",\n    \"mollita\": \"esse amet officia incididunt\"\n  },\n  \"Data\": \"laborum mollit c\",\n  \"Templating\": {\n    \"Name\": \"some-driver\",\n    \"Options\": {\n      \"OptionA\": \"value for driver-specific option A\",\n      \"OptionB\": \"value for driver-specific option B\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/configs/:id/update?version=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configs",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID or name of the config"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"incididunt nisi\",\n  \"Labels\": {\n    \"dolore_d3e\": \"ipsum dolore sed \",\n    \"mollita\": \"esse amet officia incididunt\"\n  },\n  \"Data\": \"laborum mollit c\",\n  \"Templating\": {\n    \"Name\": \"some-driver\",\n    \"Options\": {\n      \"OptionA\": \"value for driver-specific option A\",\n      \"OptionB\": \"value for driver-specific option B\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/configs/:id/update?version=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configs",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID or name of the config"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								},
								{
									"name": "node is not part of a swarm",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"incididunt nisi\",\n  \"Labels\": {\n    \"dolore_d3e\": \"ipsum dolore sed \",\n    \"mollita\": \"esse amet officia incididunt\"\n  },\n  \"Data\": \"laborum mollit c\",\n  \"Templating\": {\n    \"Name\": \"some-driver\",\n    \"Options\": {\n      \"OptionA\": \"value for driver-specific option A\",\n      \"OptionB\": \"value for driver-specific option B\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/configs/:id/update?version=-74142093",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configs",
												":id",
												"update"
											],
											"query": [
												{
													"key": "version",
													"value": "-74142093"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "anim incididunt",
													"description": "(Required) The ID or name of the config"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Something went wrong.\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "List configs",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/configs?filters=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configs"
							],
							"query": [
								{
									"key": "filters",
									"value": "anim incididunt",
									"description": "A JSON encoded value of the filters (a `map[string][]string`) to\nprocess on the configs list.\n\nAvailable filters:\n\n- `id=<config id>`\n- `label=<key> or label=<key>=value`\n- `name=<config name>`\n- `names=<config name>`\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configs?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configs"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"ID\": \"ktnbjxoalbkvbvedmg1urrz8h\",\n    \"Version\": {\n      \"Index\": 11\n    },\n    \"CreatedAt\": \"2016-11-05T01:20:17.327670065Z\",\n    \"UpdatedAt\": \"2016-11-05T01:20:17.327670065Z\",\n    \"Spec\": {\n      \"Name\": \"server.conf\"\n    }\n  }\n]"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configs?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configs"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "node is not part of a swarm",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configs?filters=anim incididunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configs"
									],
									"query": [
										{
											"key": "filters",
											"value": "anim incididunt"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				},
				{
					"name": "Create a config",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Name\": \"server.conf\",\n  \"Labels\": {\n    \"foo\": \"bar\"\n  },\n  \"Data\": \"VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/configs/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configs",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "no error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"server.conf\",\n  \"Labels\": {\n    \"foo\": \"bar\"\n  },\n  \"Data\": \"VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configs/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configs",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"Id\": \"dolore pariatur eu\"\n}"
						},
						{
							"name": "name conflicts with an existing object",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"server.conf\",\n  \"Labels\": {\n    \"foo\": \"bar\"\n  },\n  \"Data\": \"VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configs/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configs",
										"create"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "server error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"server.conf\",\n  \"Labels\": {\n    \"foo\": \"bar\"\n  },\n  \"Data\": \"VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configs/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configs",
										"create"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						},
						{
							"name": "node is not part of a swarm",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"server.conf\",\n  \"Labels\": {\n    \"foo\": \"bar\"\n  },\n  \"Data\": \"VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configs/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configs",
										"create"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Something went wrong.\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Check auth configuration",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"hannibal\",\n  \"password\": \"xxxx\",\n  \"serveraddress\": \"https://index.docker.io/v1/\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth"
					]
				},
				"description": "Validate credentials for a registry and, if available, get an identity\ntoken for accessing the registry without password.\n"
			},
			"response": [
				{
					"name": "An identity token was generated successfully.",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"hannibal\",\n  \"password\": \"xxxx\",\n  \"serveraddress\": \"https://index.docker.io/v1/\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"Status\": \"Login Succeeded\",\n  \"IdentityToken\": \"9cbaf023786cd7...\"\n}"
				},
				{
					"name": "No error",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"hannibal\",\n  \"password\": \"xxxx\",\n  \"serveraddress\": \"https://index.docker.io/v1/\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Server error",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"hannibal\",\n  \"password\": \"xxxx\",\n  \"serveraddress\": \"https://index.docker.io/v1/\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Something went wrong.\"\n}"
				}
			]
		},
		{
			"name": "Get system information",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/info",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"info"
					]
				}
			},
			"response": [
				{
					"name": "No error",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/info",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"info"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"ID\": \"7TRN:IPZB:QYBB:VPBQ:UMPP:KARE:6ZNR:XE6T:7EWV:PKF4:ZOJD:TPYS\",\n  \"Containers\": 14,\n  \"ContainersRunning\": 3,\n  \"ContainersPaused\": 1,\n  \"ContainersStopped\": 10,\n  \"Images\": 508,\n  \"Driver\": \"overlay2\",\n  \"DriverStatus\": [\n    [\n      \"Backing Filesystem\",\n      \"extfs\"\n    ],\n    [\n      \"Supports d_type\",\n      \"true\"\n    ],\n    [\n      \"Native Overlay Diff\",\n      \"true\"\n    ]\n  ],\n  \"DockerRootDir\": \"/var/lib/docker\",\n  \"Plugins\": {\n    \"Volume\": [\n      \"local\"\n    ],\n    \"Network\": [\n      \"bridge\",\n      \"host\",\n      \"ipvlan\",\n      \"macvlan\",\n      \"null\",\n      \"overlay\"\n    ],\n    \"Authorization\": [\n      \"img-authz-plugin\",\n      \"hbm\"\n    ],\n    \"Log\": [\n      \"awslogs\",\n      \"fluentd\",\n      \"gcplogs\",\n      \"gelf\",\n      \"journald\",\n      \"json-file\",\n      \"logentries\",\n      \"splunk\",\n      \"syslog\"\n    ]\n  },\n  \"MemoryLimit\": true,\n  \"SwapLimit\": true,\n  \"KernelMemory\": true,\n  \"KernelMemoryTCP\": true,\n  \"CpuCfsPeriod\": true,\n  \"CpuCfsQuota\": true,\n  \"CPUShares\": true,\n  \"CPUSet\": true,\n  \"PidsLimit\": true,\n  \"OomKillDisable\": false,\n  \"IPv4Forwarding\": true,\n  \"BridgeNfIptables\": true,\n  \"BridgeNfIp6tables\": true,\n  \"Debug\": true,\n  \"NFd\": 64,\n  \"NGoroutines\": 174,\n  \"SystemTime\": \"2017-08-08T20:28:29.06202363Z\",\n  \"LoggingDriver\": \"ea in consequat magna\",\n  \"CgroupDriver\": \"cgroupfs\",\n  \"CgroupVersion\": \"1\",\n  \"NEventsListener\": 30,\n  \"KernelVersion\": \"4.9.38-moby\",\n  \"OperatingSystem\": \"Alpine Linux v3.5\",\n  \"OSVersion\": \"16.04\",\n  \"OSType\": \"linux\",\n  \"Architecture\": \"x86_64\",\n  \"NCPU\": 4,\n  \"MemTotal\": 2095882240,\n  \"IndexServerAddress\": \"https://index.docker.io/v1/\",\n  \"RegistryConfig\": {\n    \"AllowNondistributableArtifactsCIDRs\": [\n      \"::1/128\",\n      \"127.0.0.0/8\"\n    ],\n    \"AllowNondistributableArtifactsHostnames\": [\n      \"registry.internal.corp.example.com:3000\",\n      \"[2001:db8:a0b:12f0::1]:443\"\n    ],\n    \"InsecureRegistryCIDRs\": [\n      \"::1/128\",\n      \"127.0.0.0/8\"\n    ],\n    \"IndexConfigs\": {\n      \"127.0.0.1:5000\": {\n        \"Name\": \"127.0.0.1:5000\",\n        \"Mirrors\": [],\n        \"Secure\": false,\n        \"Official\": false\n      },\n      \"[2001:db8:a0b:12f0::1]:80\": {\n        \"Name\": \"[2001:db8:a0b:12f0::1]:80\",\n        \"Mirrors\": [],\n        \"Secure\": false,\n        \"Official\": false\n      },\n      \"docker.io\": {\n        \"Name\": \"docker.io\",\n        \"Mirrors\": [\n          \"https://hub-mirror.corp.example.com:5000/\"\n        ],\n        \"Secure\": true,\n        \"Official\": true\n      },\n      \"registry.internal.corp.example.com:3000\": {\n        \"Name\": \"registry.internal.corp.example.com:3000\",\n        \"Mirrors\": [],\n        \"Secure\": false,\n        \"Official\": false\n      }\n    },\n    \"Mirrors\": [\n      \"https://hub-mirror.corp.example.com:5000/\",\n      \"https://[2001:db8:a0b:12f0::1]/\"\n    ]\n  },\n  \"GenericResources\": [\n    {\n      \"DiscreteResourceSpec\": {\n        \"Kind\": \"SSD\",\n        \"Value\": 3\n      }\n    },\n    {\n      \"NamedResourceSpec\": {\n        \"Kind\": \"GPU\",\n        \"Value\": \"UUID1\"\n      }\n    },\n    {\n      \"NamedResourceSpec\": {\n        \"Kind\": \"GPU\",\n        \"Value\": \"UUID2\"\n      }\n    }\n  ],\n  \"HttpProxy\": \"http://xxxxx:xxxxx@proxy.corp.example.com:8080\",\n  \"HttpsProxy\": \"https://xxxxx:xxxxx@proxy.corp.example.com:4443\",\n  \"NoProxy\": \"*.local, 169.254/16\",\n  \"Name\": \"node5.corp.example.com\",\n  \"Labels\": [\n    \"storage=ssd\",\n    \"production\"\n  ],\n  \"ExperimentalBuild\": true,\n  \"ServerVersion\": \"17.06.0-ce\",\n  \"ClusterStore\": \"consul://consul.corp.example.com:8600/some/path\",\n  \"ClusterAdvertise\": \"node5.corp.example.com:8000\",\n  \"Runtimes\": {\n    \"runc\": {\n      \"path\": \"runc\"\n    },\n    \"runc-master\": {\n      \"path\": \"/go/bin/runc\"\n    },\n    \"custom\": {\n      \"path\": \"/usr/local/bin/my-oci-runtime\",\n      \"runtimeArgs\": [\n        \"--debug\",\n        \"--systemd-cgroup=false\"\n      ]\n    }\n  },\n  \"DefaultRuntime\": \"runc\",\n  \"Swarm\": {\n    \"NodeID\": \"k67qz4598weg5unwwffg6z1m1\",\n    \"NodeAddr\": \"10.0.0.46\",\n    \"LocalNodeState\": \"active\",\n    \"ControlAvailable\": true,\n    \"Error\": \"\",\n    \"RemoteManagers\": [\n      {\n        \"NodeID\": \"71izy0goik036k48jg985xnds\",\n        \"Addr\": \"10.0.0.158:2377\"\n      },\n      {\n        \"NodeID\": \"79y6h1o4gv8n120drcprv5nmc\",\n        \"Addr\": \"10.0.0.159:2377\"\n      },\n      {\n        \"NodeID\": \"k67qz4598weg5unwwffg6z1m1\",\n        \"Addr\": \"10.0.0.46:2377\"\n      }\n    ],\n    \"Nodes\": 4,\n    \"Managers\": 3,\n    \"Cluster\": {\n      \"ID\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Version\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"CreatedAt\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"UpdatedAt\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"Spec\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"TLSInfo\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"RootRotationInProgress\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DataPathPort\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"DefaultAddrPool\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"SubnetSize\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  },\n  \"LiveRestoreEnabled\": false,\n  \"Isolation\": \"default\",\n  \"InitBinary\": \"docker-init\",\n  \"ContainerdCommit\": {\n    \"ID\": \"cfb82a876ecc11b5ca0977d1733adbe58599088a\",\n    \"Expected\": \"2d41c047c83e09a6d61d464906feb2a2f3c52aa4\"\n  },\n  \"RuncCommit\": {\n    \"ID\": \"cfb82a876ecc11b5ca0977d1733adbe58599088a\",\n    \"Expected\": \"2d41c047c83e09a6d61d464906feb2a2f3c52aa4\"\n  },\n  \"InitCommit\": {\n    \"ID\": \"cfb82a876ecc11b5ca0977d1733adbe58599088a\",\n    \"Expected\": \"2d41c047c83e09a6d61d464906feb2a2f3c52aa4\"\n  },\n  \"SecurityOptions\": [\n    \"name=apparmor\",\n    \"name=seccomp,profile=default\",\n    \"name=selinux\",\n    \"name=userns\",\n    \"name=rootless\"\n  ],\n  \"ProductLicense\": \"Community Engine\",\n  \"DefaultAddressPools\": [\n    {\n      \"Base\": \"10.10.0.0/16\",\n      \"Size\": 86002138\n    },\n    {\n      \"Base\": \"10.10.0.0/16\",\n      \"Size\": -58008868\n    }\n  ],\n  \"Warnings\": [\n    \"WARNING: No memory limit support\",\n    \"WARNING: bridge-nf-call-iptables is disabled\",\n    \"WARNING: bridge-nf-call-ip6tables is disabled\"\n  ]\n}"
				},
				{
					"name": "Server error",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/info",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"info"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Something went wrong.\"\n}"
				}
			]
		},
		{
			"name": "Get version",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "google.com",
					"host": [
						"google",
						"com"
					]
				},
				"description": "Returns the version of Docker that is running and various information about the system that Docker is running on."
			},
			"response": [
				{
					"name": "no error",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/version",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"version"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"Platform\": {\n    \"Name\": \"dolore\"\n  },\n  \"Components\": [\n    {\n      \"Name\": \"Engine\",\n      \"Version\": \"19.03.12\",\n      \"Details\": {}\n    },\n    {\n      \"Name\": \"Engine\",\n      \"Version\": \"19.03.12\",\n      \"Details\": {}\n    }\n  ],\n  \"Version\": \"19.03.12\",\n  \"ApiVersion\": \"1.40\",\n  \"MinAPIVersion\": \"1.12\",\n  \"GitCommit\": \"48a66213fe\",\n  \"GoVersion\": \"go1.13.14\",\n  \"Os\": \"linux\",\n  \"Arch\": \"amd64\",\n  \"KernelVersion\": \"4.19.76-linuxkit\",\n  \"Experimental\": true,\n  \"BuildTime\": \"2020-06-22T15:49:27.000000000+00:00\"\n}"
				},
				{
					"name": "server error",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/version",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"version"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Something went wrong.\"\n}"
				}
			]
		},
		{
			"name": "Create a new image from a container",
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessTokenUrl",
							"value": "https://sso.camunda.homeserver1.home64.de/auth/realms/camunda-platform/protocol/openid-connect/token",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "openid email profile",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "XALaRPl5qwTEItdwCMiPS62nVpKs7dL7",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "operate",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://sso.schwanzer.online/realms/prod/protocol/openid-connect/auth",
							"type": "string"
						},
						{
							"key": "redirect_uri",
							"value": "https://files.schwanzer.online/login",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						},
						{
							"key": "password",
							"value": "bfQbE63$tGx^2#",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "code_verifier",
							"value": "",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Hostname\": \"439f4e91bd1d\",\n  \"Domainname\": \"qui \",\n  \"User\": \"in pariatur sed magna sint\",\n  \"AttachStdin\": false,\n  \"AttachStdout\": true,\n  \"AttachStderr\": true,\n  \"ExposedPorts\": {\n    \"80/tcp\": {},\n    \"443/tcp\": {}\n  },\n  \"Tty\": false,\n  \"OpenStdin\": false,\n  \"StdinOnce\": false,\n  \"Env\": [\n    \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n  ],\n  \"Cmd\": [\n    \"/bin/sh\"\n  ],\n  \"Healthcheck\": {\n    \"Test\": [\n      \"enim tempor do cupidatat\",\n      \"esse \"\n    ],\n    \"Interval\": 34229442,\n    \"Timeout\": 42479280,\n    \"Retries\": -35645579,\n    \"StartPeriod\": -75015144\n  },\n  \"ArgsEscaped\": false,\n  \"Image\": \"example-image:1.0\",\n  \"Volumes\": {\n    \"nulla_d\": {}\n  },\n  \"WorkingDir\": \"/public/\",\n  \"NetworkDisabled\": false,\n  \"MacAddress\": \"id mollit ex\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"StopSignal\": \"SIGTERM\",\n  \"StopTimeout\": 10,\n  \"Shell\": [\n    \"/bin/sh\",\n    \"-c\"\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/commit",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"commit"
					],
					"query": [
						{
							"key": "repo",
							"value": "anim incididunt",
							"description": "Repository name for the created image",
							"disabled": true
						},
						{
							"key": "tag",
							"value": "anim incididunt",
							"description": "Tag name for the create image",
							"disabled": true
						},
						{
							"key": "comment",
							"value": "anim incididunt",
							"description": "Commit message",
							"disabled": true
						},
						{
							"key": "container",
							"value": "anim incididunt",
							"description": "The ID or name of the container to commit",
							"disabled": true
						},
						{
							"key": "author",
							"value": "anim incididunt",
							"description": "Author of the image (e.g., `John Hannibal Smith <hannibal@a-team.com>`)",
							"disabled": true
						},
						{
							"key": "pause",
							"value": "true",
							"description": "Whether to pause the container before committing",
							"disabled": true
						},
						{
							"key": "changes",
							"value": "anim incididunt",
							"description": "`Dockerfile` instructions to apply while committing",
							"disabled": true
						}
					]
				}
			},
			"response": [
				{
					"name": "no error",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Hostname\": \"439f4e91bd1d\",\n  \"Domainname\": \"qui \",\n  \"User\": \"in pariatur sed magna sint\",\n  \"AttachStdin\": false,\n  \"AttachStdout\": true,\n  \"AttachStderr\": true,\n  \"ExposedPorts\": {\n    \"80/tcp\": {},\n    \"443/tcp\": {}\n  },\n  \"Tty\": false,\n  \"OpenStdin\": false,\n  \"StdinOnce\": false,\n  \"Env\": [\n    \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n  ],\n  \"Cmd\": [\n    \"/bin/sh\"\n  ],\n  \"Healthcheck\": {\n    \"Test\": [\n      \"enim tempor do cupidatat\",\n      \"esse \"\n    ],\n    \"Interval\": 34229442,\n    \"Timeout\": 42479280,\n    \"Retries\": -35645579,\n    \"StartPeriod\": -75015144\n  },\n  \"ArgsEscaped\": false,\n  \"Image\": \"example-image:1.0\",\n  \"Volumes\": {\n    \"nulla_d\": {}\n  },\n  \"WorkingDir\": \"/public/\",\n  \"NetworkDisabled\": false,\n  \"MacAddress\": \"id mollit ex\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"StopSignal\": \"SIGTERM\",\n  \"StopTimeout\": 10,\n  \"Shell\": [\n    \"/bin/sh\",\n    \"-c\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/commit?container=anim incididunt&repo=anim incididunt&tag=anim incididunt&comment=anim incididunt&author=anim incididunt&pause=true&changes=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"commit"
							],
							"query": [
								{
									"key": "container",
									"value": "anim incididunt"
								},
								{
									"key": "repo",
									"value": "anim incididunt"
								},
								{
									"key": "tag",
									"value": "anim incididunt"
								},
								{
									"key": "comment",
									"value": "anim incididunt"
								},
								{
									"key": "author",
									"value": "anim incididunt"
								},
								{
									"key": "pause",
									"value": "true"
								},
								{
									"key": "changes",
									"value": "anim incididunt"
								}
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"Id\": \"dolore pariatur eu\"\n}"
				},
				{
					"name": "no such container",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Hostname\": \"439f4e91bd1d\",\n  \"Domainname\": \"qui \",\n  \"User\": \"in pariatur sed magna sint\",\n  \"AttachStdin\": false,\n  \"AttachStdout\": true,\n  \"AttachStderr\": true,\n  \"ExposedPorts\": {\n    \"80/tcp\": {},\n    \"443/tcp\": {}\n  },\n  \"Tty\": false,\n  \"OpenStdin\": false,\n  \"StdinOnce\": false,\n  \"Env\": [\n    \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n  ],\n  \"Cmd\": [\n    \"/bin/sh\"\n  ],\n  \"Healthcheck\": {\n    \"Test\": [\n      \"enim tempor do cupidatat\",\n      \"esse \"\n    ],\n    \"Interval\": 34229442,\n    \"Timeout\": 42479280,\n    \"Retries\": -35645579,\n    \"StartPeriod\": -75015144\n  },\n  \"ArgsEscaped\": false,\n  \"Image\": \"example-image:1.0\",\n  \"Volumes\": {\n    \"nulla_d\": {}\n  },\n  \"WorkingDir\": \"/public/\",\n  \"NetworkDisabled\": false,\n  \"MacAddress\": \"id mollit ex\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"StopSignal\": \"SIGTERM\",\n  \"StopTimeout\": 10,\n  \"Shell\": [\n    \"/bin/sh\",\n    \"-c\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/commit?container=anim incididunt&repo=anim incididunt&tag=anim incididunt&comment=anim incididunt&author=anim incididunt&pause=true&changes=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"commit"
							],
							"query": [
								{
									"key": "container",
									"value": "anim incididunt"
								},
								{
									"key": "repo",
									"value": "anim incididunt"
								},
								{
									"key": "tag",
									"value": "anim incididunt"
								},
								{
									"key": "comment",
									"value": "anim incididunt"
								},
								{
									"key": "author",
									"value": "anim incididunt"
								},
								{
									"key": "pause",
									"value": "true"
								},
								{
									"key": "changes",
									"value": "anim incididunt"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"No such container: c2ada9df5af8\"\n}"
				},
				{
					"name": "server error",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Hostname\": \"439f4e91bd1d\",\n  \"Domainname\": \"qui \",\n  \"User\": \"in pariatur sed magna sint\",\n  \"AttachStdin\": false,\n  \"AttachStdout\": true,\n  \"AttachStderr\": true,\n  \"ExposedPorts\": {\n    \"80/tcp\": {},\n    \"443/tcp\": {}\n  },\n  \"Tty\": false,\n  \"OpenStdin\": false,\n  \"StdinOnce\": false,\n  \"Env\": [\n    \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n  ],\n  \"Cmd\": [\n    \"/bin/sh\"\n  ],\n  \"Healthcheck\": {\n    \"Test\": [\n      \"enim tempor do cupidatat\",\n      \"esse \"\n    ],\n    \"Interval\": 34229442,\n    \"Timeout\": 42479280,\n    \"Retries\": -35645579,\n    \"StartPeriod\": -75015144\n  },\n  \"ArgsEscaped\": false,\n  \"Image\": \"example-image:1.0\",\n  \"Volumes\": {\n    \"nulla_d\": {}\n  },\n  \"WorkingDir\": \"/public/\",\n  \"NetworkDisabled\": false,\n  \"MacAddress\": \"id mollit ex\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"StopSignal\": \"SIGTERM\",\n  \"StopTimeout\": 10,\n  \"Shell\": [\n    \"/bin/sh\",\n    \"-c\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/commit?container=anim incididunt&repo=anim incididunt&tag=anim incididunt&comment=anim incididunt&author=anim incididunt&pause=true&changes=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"commit"
							],
							"query": [
								{
									"key": "container",
									"value": "anim incididunt"
								},
								{
									"key": "repo",
									"value": "anim incididunt"
								},
								{
									"key": "tag",
									"value": "anim incididunt"
								},
								{
									"key": "comment",
									"value": "anim incididunt"
								},
								{
									"key": "author",
									"value": "anim incididunt"
								},
								{
									"key": "pause",
									"value": "true"
								},
								{
									"key": "changes",
									"value": "anim incididunt"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Something went wrong.\"\n}"
				}
			]
		},
		{
			"name": "Monitor events",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/events?since=anim incididunt&until=anim incididunt&filters=anim incididunt",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events"
					],
					"query": [
						{
							"key": "since",
							"value": "anim incididunt",
							"description": "Show events created since this timestamp then stream new events."
						},
						{
							"key": "until",
							"value": "anim incididunt",
							"description": "Show events created until this timestamp then stop streaming."
						},
						{
							"key": "filters",
							"value": "anim incididunt",
							"description": "A JSON encoded value of filters (a `map[string][]string`) to process on the event list. Available filters:\n\n- `config=<string>` config name or ID\n- `container=<string>` container name or ID\n- `daemon=<string>` daemon name or ID\n- `event=<string>` event type\n- `image=<string>` image name or ID\n- `label=<string>` image or container label\n- `network=<string>` network name or ID\n- `node=<string>` node ID\n- `plugin`=<string> plugin name or ID\n- `scope`=<string> local or swarm\n- `secret=<string>` secret name or ID\n- `service=<string>` service name or ID\n- `type=<string>` object to filter by, one of `container`, `image`, `volume`, `network`, `daemon`, `plugin`, `node`, `service`, `secret` or `config`\n- `volume=<string>` volume name\n"
						}
					]
				},
				"description": "Stream real-time events from the server.\n\nVarious objects within Docker report events when something happens to them.\n\nContainers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`\n\nImages report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`\n\nVolumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`\n\nNetworks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`\n\nThe Docker daemon reports these events: `reload`\n\nServices report these events: `create`, `update`, and `remove`\n\nNodes report these events: `create`, `update`, and `remove`\n\nSecrets report these events: `create`, `update`, and `remove`\n\nConfigs report these events: `create`, `update`, and `remove`\n\nThe Builder reports `prune` events\n"
			},
			"response": [
				{
					"name": "no error",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events?since=anim incididunt&until=anim incididunt&filters=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "since",
									"value": "anim incididunt"
								},
								{
									"key": "until",
									"value": "anim incididunt"
								},
								{
									"key": "filters",
									"value": "anim incididunt"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"Type\": \"container\",\n  \"Action\": \"create\",\n  \"Actor\": {\n    \"ID\": \"ede54ee1afda366ab42f824e8a5ffd195155d853ceaec74a927f249ea270c743\",\n    \"Attributes\": {\n      \"com.example.some-label\": \"some-label-value\",\n      \"image\": \"alpine:latest\",\n      \"name\": \"my-container\"\n    }\n  },\n  \"scope\": \"local\",\n  \"time\": 1629574695,\n  \"timeNano\": 1629574695515050000\n}"
				},
				{
					"name": "bad parameter",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events?since=anim incididunt&until=anim incididunt&filters=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "since",
									"value": "anim incididunt"
								},
								{
									"key": "until",
									"value": "anim incididunt"
								},
								{
									"key": "filters",
									"value": "anim incididunt"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Something went wrong.\"\n}"
				},
				{
					"name": "server error",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events?since=anim incididunt&until=anim incididunt&filters=anim incididunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "since",
									"value": "anim incididunt"
								},
								{
									"key": "until",
									"value": "anim incididunt"
								},
								{
									"key": "filters",
									"value": "anim incididunt"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Something went wrong.\"\n}"
				}
			]
		},
		{
			"name": "Get data usage information",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/system/df",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"system",
						"df"
					]
				}
			},
			"response": [
				{
					"name": "no error",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/system/df",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"system",
								"df"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"LayersSize\": -5310687,\n  \"Images\": [\n    {\n      \"Id\": \"sha256:ec3f0931a6e6b6855d76b2d7b0be30e81860baccd891b2e243280bf1cd8ad710\",\n      \"ParentId\": \"\",\n      \"RepoTags\": [\n        \"example:1.0\",\n        \"example:latest\",\n        \"example:stable\",\n        \"internal.registry.example.com:5000/example:1.0\"\n      ],\n      \"RepoDigests\": [\n        \"example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb\",\n        \"internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578\"\n      ],\n      \"Created\": -69721993,\n      \"Size\": 172064416,\n      \"SharedSize\": 1239828,\n      \"VirtualSize\": 172064416,\n      \"Labels\": {\n        \"com.example.some-label\": \"some-value\",\n        \"com.example.some-other-label\": \"some-other-value\"\n      },\n      \"Containers\": 2\n    },\n    {\n      \"Id\": \"sha256:ec3f0931a6e6b6855d76b2d7b0be30e81860baccd891b2e243280bf1cd8ad710\",\n      \"ParentId\": \"\",\n      \"RepoTags\": [\n        \"example:1.0\",\n        \"example:latest\",\n        \"example:stable\",\n        \"internal.registry.example.com:5000/example:1.0\"\n      ],\n      \"RepoDigests\": [\n        \"example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb\",\n        \"internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578\"\n      ],\n      \"Created\": 56407846,\n      \"Size\": 172064416,\n      \"SharedSize\": 1239828,\n      \"VirtualSize\": 172064416,\n      \"Labels\": {\n        \"com.example.some-label\": \"some-value\",\n        \"com.example.some-other-label\": \"some-other-value\"\n      },\n      \"Containers\": 2\n    }\n  ],\n  \"Containers\": [\n    {\n      \"Id\": \"magna fugiat\",\n      \"Names\": [\n        \"nulla reprehenderit\",\n        \"ex ad\"\n      ],\n      \"Image\": \"aliquip in elit do\",\n      \"ImageID\": \"velit eiusmod mollit\",\n      \"Command\": \"in labore\",\n      \"Created\": -75568599,\n      \"Ports\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"SizeRw\": 442597,\n      \"SizeRootFs\": 68837486,\n      \"Labels\": {\n        \"ex_be8\": \"sint eiusmod dolore\"\n      },\n      \"State\": \"anim consequat sunt\",\n      \"Status\": \"tempor laboris sunt in\",\n      \"HostConfig\": {\n        \"NetworkMode\": \"Lorem ea occaecat\"\n      },\n      \"NetworkSettings\": {\n        \"Networks\": {\n          \"ipsumf\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"enim9\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      },\n      \"Mounts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    {\n      \"Id\": \"Duis dolor in tempor in\",\n      \"Names\": [\n        \"nisi velit in\",\n        \"do\"\n      ],\n      \"Image\": \"mollit officia exercitation tempor aliqua\",\n      \"ImageID\": \"dolor eiusmod amet\",\n      \"Command\": \"proident nostrud qui officia non\",\n      \"Created\": -52508827,\n      \"Ports\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"SizeRw\": 20689844,\n      \"SizeRootFs\": 68370673,\n      \"Labels\": {\n        \"labore3aa\": \"occaec\",\n        \"adipisicingbbd\": \"officia\"\n      },\n      \"State\": \"minim\",\n      \"Status\": \"sint eu quis\",\n      \"HostConfig\": {\n        \"NetworkMode\": \"dolor fugiat sed qui\"\n      },\n      \"NetworkSettings\": {\n        \"Networks\": {\n          \"qui745\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"incididunt_50\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"sint_2bb\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      },\n      \"Mounts\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  ],\n  \"Volumes\": [\n    {\n      \"Name\": \"tardis\",\n      \"Driver\": \"custom\",\n      \"Mountpoint\": \"/var/lib/docker/volumes/tardis\",\n      \"Labels\": {\n        \"com.example.some-label\": \"some-value\",\n        \"com.example.some-other-label\": \"some-other-value\"\n      },\n      \"Scope\": \"local\",\n      \"Options\": {\n        \"device\": \"tmpfs\",\n        \"o\": \"size=100m,uid=1000\",\n        \"type\": \"tmpfs\"\n      },\n      \"CreatedAt\": \"2016-06-07T20:31:11.853781916Z\",\n      \"Status\": {\n        \"eiusmod87d\": {}\n      },\n      \"UsageData\": {\n        \"Size\": -1,\n        \"RefCount\": -1\n      }\n    },\n    {\n      \"Name\": \"tardis\",\n      \"Driver\": \"custom\",\n      \"Mountpoint\": \"/var/lib/docker/volumes/tardis\",\n      \"Labels\": {\n        \"com.example.some-label\": \"some-value\",\n        \"com.example.some-other-label\": \"some-other-value\"\n      },\n      \"Scope\": \"local\",\n      \"Options\": {\n        \"device\": \"tmpfs\",\n        \"o\": \"size=100m,uid=1000\",\n        \"type\": \"tmpfs\"\n      },\n      \"CreatedAt\": \"2016-06-07T20:31:11.853781916Z\",\n      \"Status\": {\n        \"irure211\": {}\n      },\n      \"UsageData\": {\n        \"Size\": -1,\n        \"RefCount\": -1\n      }\n    }\n  ],\n  \"BuildCache\": [\n    {\n      \"ID\": \"ndlpt0hhvkqcdfkputsk4cq9c\",\n      \"Parent\": \"hw53o5aio51xtltp5xjp8v7fx\",\n      \"Type\": \"regular\",\n      \"Description\": \"mount / from exec /bin/sh -c echo 'Binary::apt::APT::Keep-Downloaded-Packages \\\"true\\\";' > /etc/apt/apt.conf.d/keep-cache\",\n      \"InUse\": false,\n      \"Shared\": true,\n      \"Size\": 51,\n      \"CreatedAt\": \"2016-08-18T10:44:24.496525531Z\",\n      \"LastUsedAt\": \"2017-08-09T07:09:37.632105588Z\",\n      \"UsageCount\": 26\n    },\n    {\n      \"ID\": \"ndlpt0hhvkqcdfkputsk4cq9c\",\n      \"Parent\": \"hw53o5aio51xtltp5xjp8v7fx\",\n      \"Type\": \"regular\",\n      \"Description\": \"mount / from exec /bin/sh -c echo 'Binary::apt::APT::Keep-Downloaded-Packages \\\"true\\\";' > /etc/apt/apt.conf.d/keep-cache\",\n      \"InUse\": false,\n      \"Shared\": true,\n      \"Size\": 51,\n      \"CreatedAt\": \"2016-08-18T10:44:24.496525531Z\",\n      \"LastUsedAt\": \"2017-08-09T07:09:37.632105588Z\",\n      \"UsageCount\": 26\n    }\n  ]\n}"
				},
				{
					"name": "server error",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/system/df",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"system",
								"df"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Something went wrong.\"\n}"
				}
			]
		},
		{
			"name": "Get image information from the registry",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/distribution/:name/json",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"distribution",
						":name",
						"json"
					],
					"variable": [
						{
							"key": "name",
							"value": "anim incididunt",
							"description": "(Required) Image name or id"
						}
					]
				},
				"description": "Return image digest and platform information by contacting the registry.\n"
			},
			"response": [
				{
					"name": "descriptor and platform information",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/distribution/:name/json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"distribution",
								":name",
								"json"
							],
							"variable": [
								{
									"key": "name",
									"value": "anim incididunt",
									"description": "(Required) Image name or id"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"Descriptor\": {\n    \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n    \"digest\": \"sha256:c0537ff6a5218ef531ece93d4984efc99bbf3f7497c0a7726c88e2bb7584dc96\",\n    \"size\": 3987495\n  },\n  \"Platforms\": [\n    {\n      \"architecture\": \"arm\",\n      \"os\": \"windows\",\n      \"os.version\": \"10.0.19041.1165\",\n      \"os.features\": [\n        \"win32k\"\n      ],\n      \"variant\": \"v7\"\n    },\n    {\n      \"architecture\": \"arm\",\n      \"os\": \"windows\",\n      \"os.version\": \"10.0.19041.1165\",\n      \"os.features\": [\n        \"win32k\"\n      ],\n      \"variant\": \"v7\"\n    }\n  ]\n}"
				},
				{
					"name": "Failed authentication or no image found",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/distribution/:name/json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"distribution",
								":name",
								"json"
							],
							"variable": [
								{
									"key": "name",
									"value": "anim incididunt",
									"description": "(Required) Image name or id"
								}
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"No such image: someimage (tag: latest)\"\n}"
				},
				{
					"name": "Server error",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/distribution/:name/json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"distribution",
								":name",
								"json"
							],
							"variable": [
								{
									"key": "name",
									"value": "anim incididunt",
									"description": "(Required) Image name or id"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Something went wrong.\"\n}"
				}
			]
		},
		{
			"name": "Initialize interactive session",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/vnd.docker.raw-stream"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/session",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"session"
					]
				},
				"description": "Start a new interactive session with a server. Session allows server to\ncall back to the client for advanced capabilities.\n\n### Hijacking\n\nThis endpoint hijacks the HTTP connection to HTTP2 transport that allows\nthe client to expose gPRC services on that connection.\n\nFor example, the client sends this request to upgrade the connection:\n\n```\nPOST /session HTTP/1.1\nUpgrade: h2c\nConnection: Upgrade\n```\n\nThe Docker daemon responds with a `101 UPGRADED` response follow with\nthe raw stream:\n\n```\nHTTP/1.1 101 UPGRADED\nConnection: Upgrade\nUpgrade: h2c\n```\n"
			},
			"response": [
				{
					"name": "no error, hijacking successful",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/session",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"session"
							]
						}
					},
					"status": "Switching Protocols",
					"code": 101,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "bad parameter",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/session",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"session"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/vnd.docker.raw-stream"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "server error",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/session",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"session"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/vnd.docker.raw-stream"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "/v1.41",
			"type": "string"
		}
	]
}